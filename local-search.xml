<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux使用TUN模式实现透明代理</title>
    <link href="/post/8852bf9.html"/>
    <url>/post/8852bf9.html</url>
    
    <content type="html"><![CDATA[<h3 id="树莓派做旁路由"><a href="#树莓派做旁路由" class="headerlink" title="树莓派做旁路由"></a>树莓派做旁路由</h3><p>我的树莓派作为旁路由，代理所有经过的流量，包括自己发出的请求。</p><p>编辑 /etc/sysctl.conf 文件，将 net.ipv4.ip_forward=0 修改为 net.ipv4.ip_forward=1，然后执行 sysctl -p 以使配置生效</p><p>docker中开启<code>privileged: true</code>，并且clash中开启<code>tun</code>模式</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">version: &#39;3&#39;services:  clash:    image: dreamacro&#x2F;clash-premium:latest    container_name: clash    volumes:      - .&#x2F;clash:&#x2F;root&#x2F;.config&#x2F;clash    restart: unless-stopped    network_mode: &quot;host&quot; # or &quot;host&quot; on Linux    privileged: true    environment:      - TZ&#x3D;Asia&#x2F;Shanghai<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="不代理本机数据"><a href="#不代理本机数据" class="headerlink" title="不代理本机数据"></a>不代理本机数据</h3><p>另一个Linux主机不对内部应用进行代理。</p><p>开启网卡混杂模式<br>    ip link set enp3s0 promisc on</p><p>创建macvlan网络</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">  docker network create -d macvlan \                       --subnet&#x3D;192.168.1.0&#x2F;24 \--gateway&#x3D;192.168.1.1 \-o parent&#x3D;enp3s0 \macvlan142<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">version: &#39;3&#39;services:  clash:    image: dreamacro&#x2F;clash-premium:latest    container_name: clash_tun    volumes:      - .&#x2F;clash:&#x2F;root&#x2F;.config&#x2F;clash    restart: unless-stopped    networks:      macvlan142:        ipv4_address: 192.168.1.220        privileged: true    environment:      - TZ&#x3D;Asia&#x2F;Shanghainetworks:  macvlan142:    external: true  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>其他设备将网关改为192.168.1.220即可使用。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://github.com/lululau/clashindocker">clashindocker</a></p>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>透明代理</tag>
      
      <tag>Clash</tag>
      
      <tag>macvlan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过代理服务更改HTTP request的地址</title>
    <link href="/post/86d57f8b.html"/>
    <url>/post/86d57f8b.html</url>
    
    <content type="html"><![CDATA[<p>利用更改<a href="https://github.com/abhinavsingh/proxy.py">proxy.py</a>中的<a href="https://github.com/abhinavsingh/proxy.py/tree/develop?tab=readme-ov-file#redirecttocustomserverplugin">Redirect To Custom Server Plugin</a>插件来更改原Android端请求的IP地址。</p><p>更改<code>plugin/redirect_to_custom_server.py</code>文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RedirectToCustomServerPlugin</span><span class="token punctuation">(</span>HttpProxyBasePlugin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">before_upstream_connection</span><span class="token punctuation">(</span>            self<span class="token punctuation">,</span> request<span class="token punctuation">:</span> HttpParser<span class="token punctuation">,</span>    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Optional<span class="token punctuation">[</span>HttpParser<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 原服务器地址</span>        old_server <span class="token operator">=</span> <span class="token string">'http://xxx:8088'</span>        <span class="token comment"># 新服务器地址</span>        new_server <span class="token operator">=</span> <span class="token string">'http://yyy:8088'</span>        url <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>_url<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> request<span class="token punctuation">.</span>is_https_tunnel <span class="token keyword">and</span> old_server <span class="token keyword">in</span> url <span class="token punctuation">:</span>            url <span class="token operator">=</span> url<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>old_server<span class="token punctuation">,</span>new_server<span class="token punctuation">)</span>                        request<span class="token punctuation">.</span>set_url<span class="token punctuation">(</span>url<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf_8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># Update Host header too, otherwise upstream can reject our request</span>            <span class="token keyword">if</span> request<span class="token punctuation">.</span>has_header<span class="token punctuation">(</span><span class="token string">b'Host'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>                request<span class="token punctuation">.</span>del_header<span class="token punctuation">(</span><span class="token string">b'Host'</span><span class="token punctuation">)</span>            request<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span>                <span class="token string">b'Host'</span><span class="token punctuation">,</span> urlparse<span class="token punctuation">.</span>urlsplit<span class="token punctuation">(</span>                    new_server<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">.</span>netloc<span class="token punctuation">,</span>            <span class="token punctuation">)</span>        <span class="token keyword">return</span> request<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>启动proxy.py服务</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">proxy  --enable-web-server <span class="token parameter variable">--plugins</span> proxy.plugin.RedirectToCustomServerPlugin <span class="token parameter variable">--hostname</span> <span class="token number">0.0</span>.0.0  <span class="token parameter variable">--port</span> <span class="token number">1080</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>最后在Android端设置代理为当前服务即可实现IP地址的变更。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代理</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos7升级OpenSSH</title>
    <link href="/post/489071f8.html"/>
    <url>/post/489071f8.html</url>
    
    <content type="html"><![CDATA[<p>出于对安全的考虑，需要升级OpenSSH的版本，但是Centos7的源中的OpenSSH版本比较低，需要手动安装。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">查看可升级的版本yum --showduplicates list openssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="安装开启telnet服务"><a href="#安装开启telnet服务" class="headerlink" title="安装开启telnet服务"></a>安装开启telnet服务</h3><p>先开启telnet防止网络问题导致远程连接失败，无法补救。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">yum install telnet-server  -yyum install telnet -ysystemctl enable telnet.socketsystemctl start telnet.socket<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>编辑<code>/etc/securetty</code>文件，允许终端使用root用户登录</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">echo &#39;pts&#x2F;0&#39; &gt;&gt;&#x2F;etc&#x2F;securettyecho &#39;pts&#x2F;1&#39; &gt;&gt;&#x2F;etc&#x2F;securetty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="升级OpenSSH"><a href="#升级OpenSSH" class="headerlink" title="升级OpenSSH"></a>升级OpenSSH</h3><p>先备份配置文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">mv &#x2F;etc&#x2F;ssh&#x2F;sshd_config &#x2F;etc&#x2F;ssh&#x2F;sshd_config.$(date +%Y%m%d)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>编译的脚本可以参考<a href="https://github.com/boypt/openssh-rpms">boypt/openssh-rpms</a>，在rpm包所在的目录执行<code>rpm -ivh --force --nodeps --replacepkgs --replacefiles openssh-*.rpm</code></p><p>升级成功后，重启sshd服务，使用另外一个终端尝试是否能正常登录。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://github.com/boypt/openssh-rpms">boypt/openssh-rpms</a></p><p><a href="https://cikeblog.com/upgrade-openssh-to-openssh-9-9p1-under-centos7.html">Centos7下rpm升级OpenSSH到openssh-9.9p1版本</a></p><p><a href="https://www.cnblogs.com/jianzhan/p/ssh-update.html">记一次手动将OpenSSH从7.4升级到9.3的过程</a></p>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Centos</tag>
      
      <tag>OpenSSH</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FFmpeg使用笔记</title>
    <link href="/post/9539654e.html"/>
    <url>/post/9539654e.html</url>
    
    <content type="html"><![CDATA[<p>CentOS 7 下安装FFmpeg</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">dnf -y install https:&#x2F;&#x2F;download1.rpmfusion.org&#x2F;free&#x2F;fedora&#x2F;rpmfusion-free-release-$\(rpm -E %fedora).noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>intel核显也可以直接使用支持qsv的docker<a href="https://hub.docker.com/r/wzhy1234/ffmpeg-qsv">ffmpeg-qsv</a></p><h3 id="检查视频完整性"><a href="#检查视频完整性" class="headerlink" title="检查视频完整性"></a>检查视频完整性</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">ffmpeg -v error -i file.avi -f null -  </code></pre></div></figure><p>输出到日志  </p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">ffmpeg -v error -i file.avi -f null -  2&gt;error.log</code></pre></div></figure><h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">ffmpeg -i file.mp4</code></pre></div></figure><h3 id="指定码率和分辨率"><a href="#指定码率和分辨率" class="headerlink" title="指定码率和分辨率"></a>指定码率和分辨率</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">ffmpeg -i A.mp4 -vcodec libx264 -b:v 1500k -vf scale=1280:720 B.mp4</code></pre></div></figure><h3 id="缩放为固定分辨率的命令行："><a href="#缩放为固定分辨率的命令行：" class="headerlink" title="缩放为固定分辨率的命令行："></a>缩放为固定分辨率的命令行：</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">ffmpeg -i 1.mp4 -vf scale=640:480 output.mp4</code></pre></div></figure><h3 id="缩放为自适应宽高比的命令行："><a href="#缩放为自适应宽高比的命令行：" class="headerlink" title="缩放为自适应宽高比的命令行："></a>缩放为自适应宽高比的命令行：</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">ffmpeg -i 1.mp4 -vf scale=640:-2 output.mp4</code></pre></div></figure><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>创建一个文本文件，列出要合并的视频文件。以下是一个示例：</p><p>首先，创建一个文本文件，比如 input.txt，内容如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">file &#39;input1.mp4&#39;file &#39;input2.mp4&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>可使用脚本生成</p><p>Windows:</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">(for %i in (*.wmv) do @echo file &#39;%i&#39;) &gt; input.txt</code></pre></div></figure><p>Linux:</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">printf &quot;file &#39;%s&#39;\n&quot; *.wmv &gt; input.txt</code></pre></div></figure><p>然后，使用以下命令将这两个视频文件合并成一个：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">ffmpeg -f concat -i input.txt -c copy output.mp4</code></pre></div></figure><p>在这个例子中，input.txt 包含了要合并的视频文件列表。-f concat 告诉 FFmpeg 使用 concat 协议，-i input.txt 指定了输入文件，-c copy 告诉 FFmpeg 只进行复制而不重新编码，这样可以加快处理速度并且保持视频质量，最后的 output.mp4 是合并后的输出文件名。</p><h3 id="提取ISO中的文件，我这里取的都是第一条流"><a href="#提取ISO中的文件，我这里取的都是第一条流" class="headerlink" title="提取ISO中的文件，我这里取的都是第一条流"></a>提取ISO中的文件，我这里取的都是第一条流</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">ffmpeg -i input.iso -map 0:v:0 -map 0:a:0 -c copy output.mp4</code></pre></div></figure><h3 id="截图功能"><a href="#截图功能" class="headerlink" title="截图功能"></a>截图功能</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">ffmpeg -ss 00:12:39.0 -i input.wmv  -frames:v 1 /share/media/output.jpg</code></pre></div></figure><h3 id="截取视频"><a href="#截取视频" class="headerlink" title="截取视频"></a>截取视频</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">ffmpeg  -ss 00:45:35 -to 00:57:47 -i input.mp4 -c copy test.mp4</code></pre></div></figure><h3 id="下载m3u8文件"><a href="#下载m3u8文件" class="headerlink" title="下载m3u8文件"></a>下载m3u8文件</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">ffmpeg -i 视频地址 -c copy -bsf:a aac_adtstoasc output.mp4</code></pre></div></figure><p>ffmpeg毕竟不是下载工具，下载也可以使用<a href="https://github.com/llychao/m3u8-downloader">m3u8-downloader</a>，支持更多参数。</p><h3 id="合并字幕"><a href="#合并字幕" class="headerlink" title="合并字幕"></a>合并字幕</h3><p>推荐使用外挂字幕形式，合并成mkv格式</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">ffmpeg -i input.mp4 -i sub.srt -c copy  output.mkv</code></pre></div></figure><p>也可以使用<code>mkvmerge</code>进行处理</p><p>参考<a href="https://ubuntuhandbook.org/index.php/2018/08/mkvtoolnix-26-0-0-released/">MKVToolNix 26.0.0 Released, How to Install it in Ubuntu</a>进行安装</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo sh -c &#39;echo &quot;deb https:&#x2F;&#x2F;mkvtoolnix.download&#x2F;ubuntu&#x2F; $(lsb_release -sc) main&quot; &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;bunkus.org.list&#39;wget -q -O - https:&#x2F;&#x2F;mkvtoolnix.download&#x2F;gpg-pub-moritzbunkus.txt | sudo apt-key add -sudo apt-get updatesudo apt-get install mkvtoolnix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>合并字幕，并且设置默认字幕为中文</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">mkvmerge -o merge/Game.of.Thrones.S02E08.mkv  Game.of.Thrones.S02E08.mkv --language 0:chi Game.of.Thrones.S02E08.ass </code></pre></div></figure><h3 id="反交错"><a href="#反交错" class="headerlink" title="反交错"></a>反交错</h3><p>隔行扫描的视频可以在转码阶段进行反交错处理</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">ffmpeg -i input.mp4 -vf yadif output.mp4</code></pre></div></figure><p>若视频包含大量快速运动场景可使用mdeint、bwdif、mcdeint滤镜</p><h3 id="视频质量对比"><a href="#视频质量对比" class="headerlink" title="视频质量对比"></a>视频质量对比</h3><p>VMAF是Netflix开发的视频质量评估算法，VMAF分值在0~100之间，越大越好，20分对应极差，100分对应极好。</p><p>查看libvmaf支持的参数</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">ffmpeg -h filter=libvmaf</code></pre></div></figure><p>n_threads为线程数，n_subsample抽样帧的间隔</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">ffmpeg -i &#39;硬编码.mp4&#39; -i &#39;2023-10-10 17-06-09.mp4&#39; -lavfi &quot;[0:v][1:v]libvmaf=n_threads=4:n_subsample=10:log_fmt=json:log_path=vmaf_report.json&quot; -f null -</code></pre></div></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://juejin.cn/post/7034349606704152589">FFMPEG合并视频文件（无损）</a></p><p><a href="https://www.jianshu.com/p/9c07b730d1dc">每天一点FFmpeg</a></p><p><a href="https://sspai.com/post/77442">视频压缩画质对比工具VMAF使用记录</a></p>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java给ID加锁的实现</title>
    <link href="/post/2b6e6ad5.html"/>
    <url>/post/2b6e6ad5.html</url>
    
    <content type="html"><![CDATA[<p>服务端开发锁无处不在，有时就是需要对用户或者某个资源加锁，防止被并发访问，我这里分别介绍单体应用和分布式应用对锁ID的实现。</p><h3 id="单体应用"><a href="#单体应用" class="headerlink" title="单体应用"></a>单体应用</h3><p>单体应用，可以使用Jvm的锁，高效简单。</p><h4 id="String-intern确保ID的唯一性，再锁该ID"><a href="#String-intern确保ID的唯一性，再锁该ID" class="headerlink" title="String.intern确保ID的唯一性，再锁该ID"></a>String.intern确保ID的唯一性，再锁该ID</h4><p>stackoverflow上有人提出了简单的解决方案：<a href="https://stackoverflow.com/questions/5639870/simple-java-name-based-locks">simple-java-name-based-locks</a></p><blockquote><p>All those answers I see are way too complicated. Why not simply use:</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeInNamedLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockName<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> runnable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">synchronized</span><span class="token punctuation">(</span>lockName<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    runnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>The key point is the method intern: it ensures that the String returned is a global unique object, and so it can be used as a vm-instance-wide mutex. All interned Strings are held in a global pool, so that’s your static cache you were talking about in your original question. Don’t worry about memleaks; those strings will be gc’ed if no other thread references it. Note however, that up to and including Java6 this pool is kept in PermGen space instead of the heap, so you might have to increase it.</p></blockquote><blockquote><p>There’s a problem though if some other code in your vm locks on the same string for completely different reasons, but a) this is very unlikely, and b) you can get around it by introducing namespaces, e.g. executeInNamedLock(this.getClass().getName() + “_” + myLockName);</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">internLock</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">biz</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>使用Java自带的synchronized进行锁ID，由于synchronized是基于对象进行加锁，不能保证同一个ID是一个Java对象，我们需要将ID转换为String，并放入常量池中，保证每个ID都是对应一个唯一的对象。关于intern的详细介绍，可以看美团技术团队写的<a href="https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html">深入解析String#intern</a></p><p>完整代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">ImmutableList</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span> <span class="token number">10002</span><span class="token punctuation">,</span> <span class="token number">10003</span><span class="token punctuation">,</span> <span class="token number">10004</span><span class="token punctuation">,</span> <span class="token number">10005</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">,</span> <span class="token number">10003</span><span class="token punctuation">,</span> <span class="token number">10003</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 模拟5秒钟耗时操作     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">biz</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"id:&#123;&#125;"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 使用 String.intern     *     * @param id     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">internLock</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">biz</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStringIntern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"使用 String.intern"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>it <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">internLock</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行结果:</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">15:15:31.355 [Test worker] INFO LockTest - 使用 String.intern15:15:36.369 [Thread-21] INFO LockTest - id:1000215:15:36.369 [Thread-23] INFO LockTest - id:1000415:15:36.369 [Thread-27] INFO LockTest - id:1000315:15:36.369 [Thread-20] INFO LockTest - id:1000115:15:36.369 [Thread-24] INFO LockTest - id:1000515:15:41.377 [Thread-25] INFO LockTest - id:1000115:15:41.377 [Thread-22] INFO LockTest - id:1000315:15:46.387 [Thread-26] INFO LockTest - id:10003<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可以看出list中的前五个元素<code>10001, 10002, 10003, 10004, 10005</code>没有被阻塞，<code>15:15:36</code>时出的结果，第6个和第7个元素<code>10001,100003</code>被阻塞，耗时5秒钟。最后一个<code>100003</code>又被前一个<code>100003</code>阻塞，耗时5秒钟。从结果上看符合我们的预期。</p><h4 id="使用Guava的Interners-newWeakInterner"><a href="#使用Guava的Interners-newWeakInterner" class="headerlink" title="使用Guava的Interners.newWeakInterner"></a>使用Guava的Interners.newWeakInterner</h4><p>使用 intern()有性能问题,可以用 guava 的 Interners.newWeakInterner()一个弱引用的内部常量池<br>具体代码:</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Interner</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> pool <span class="token operator">=</span> <span class="token class-name">Interners</span><span class="token punctuation">.</span><span class="token function">newWeakInterner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">guavaInternLock</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">biz</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行结果</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">15:15:11.339 [Test worker] INFO LockTest - 使用 Guava Interners15:15:16.357 [Thread-12] INFO LockTest - id:1000115:15:16.357 [Thread-13] INFO LockTest - id:1000215:15:16.358 [Thread-14] INFO LockTest - id:1000315:15:16.360 [Thread-15] INFO LockTest - id:1000415:15:16.360 [Thread-16] INFO LockTest - id:1000515:15:21.372 [Thread-19] INFO LockTest - id:1000315:15:21.372 [Thread-17] INFO LockTest - id:1000115:15:26.385 [Thread-18] INFO LockTest - id:10003<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="使用Guava的Striped"><a href="#使用Guava的Striped" class="headerlink" title="使用Guava的Striped"></a>使用Guava的Striped</h4><p>如果想实现更细力度的锁，可以使用 <code>JUC</code>中的Lock，但是单纯使用Lock是无法区分id的，需要我们自己实现判重逻辑。可以使用<code>Guava Striped</code>很轻松实现该功能。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">Striped</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Lock</span><span class="token punctuation">></span></span> striped <span class="token operator">=</span> <span class="token class-name">Striped</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stripedLock</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Lock</span> lock <span class="token operator">=</span> striped<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token function">biz</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行结果</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">15:14:51.323 [Test worker] INFO LockTest - 使用 Guava Striped15:14:56.339 [Thread-5] INFO LockTest - id:1000215:14:56.339 [Thread-7] INFO LockTest - id:1000415:14:56.339 [Thread-8] INFO LockTest - id:1000515:14:56.339 [Thread-4] INFO LockTest - id:1000115:14:56.339 [Thread-6] INFO LockTest - id:1000315:15:01.354 [Thread-9] INFO LockTest - id:1000115:15:01.354 [Thread-10] INFO LockTest - id:1000315:15:06.357 [Thread-11] INFO LockTest - id:10003<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="分布式应用"><a href="#分布式应用" class="headerlink" title="分布式应用"></a>分布式应用</h3><p>由于分布式环境中，需要部署多个节点，上文提到的锁是基于单个JVM，不能保证同一时间某个资源只有一个线程访问，所以需要借助其他中间件。</p><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><p>关于Redis加锁的原理可以看我之前写的<a href="/post/3a12d43e.html" title="Redis进阶">Redis进阶</a>，我这里直接使用<a href="https://github.com/redisson/redisson">redisson</a>封装好的工具。<br><code>redisson</code>借助<code>lua</code>脚本，实现了可重入锁、读写锁等多种锁。具体可参考<a href="https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8">分布式锁和同步器</a></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">redisLock</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">RLock</span> lock <span class="token operator">=</span> <span class="token class-name">RedisClient</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token function">biz</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行结果</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">2022-07-05 09:45:33 INFO  (Thread-6 LockTest:76)- id:100032022-07-05 09:45:33 INFO  (Thread-9 LockTest:76)- id:100012022-07-05 09:45:33 INFO  (Thread-8 LockTest:76)- id:100052022-07-05 09:45:33 INFO  (Thread-5 LockTest:76)- id:100022022-07-05 09:45:33 INFO  (Thread-7 LockTest:76)- id:100042022-07-05 09:45:38 INFO  (Thread-4 LockTest:76)- id:100012022-07-05 09:45:38 INFO  (Thread-10 LockTest:76)- id:100032022-07-05 09:45:43 INFO  (Thread-11 LockTest:76)- id:10003<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h4><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://blog.csdn.net/inrgihc/article/details/119335729">使用 Google Guava Striped 实现基于 Key 的并发锁</a></p><p><a href="https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html">深入解析String#intern</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>锁</tag>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pandas连接Clickhouse</title>
    <link href="/post/2cd58774.html"/>
    <url>/post/2cd58774.html</url>
    
    <content type="html"><![CDATA[<p>我这里介绍两种方法：</p><ol><li><p>使用Pandas的read_sql方法通过sqlalchemy连接Clickhouse，需要安装<a href="https://github.com/xzkostyan/clickhouse-sqlalchemy">clickhouse-sqlalchemy</a></p></li><li><p>使用<a href="https://github.com/kszucs/pandahouse">pandahouse</a>直接读取，返回DataFrame</p></li></ol><p>推荐使用第一种方式，因为与我们平时连接数据库方式一致，无缝衔接，而且<code>clickhouse-sqlalchemy</code>一直在维护，<code>pandahouse</code>已经很久没更新了。</p><h3 id="clickhouse-sqlalchemy"><a href="#clickhouse-sqlalchemy" class="headerlink" title="clickhouse-sqlalchemy"></a>clickhouse-sqlalchemy</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">pip install clickhouse-sqlalchemy</code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdclick_url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'clickhouse+http://admin:paswd@localhost:8123/pro'</span></span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span>click_url<span class="token punctuation">)</span>fin_sql <span class="token operator">=</span> <span class="token triple-quoted-string string">'''select count(code) from finished'''</span>pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span>fin_sql<span class="token punctuation">,</span>con<span class="token operator">=</span>engine<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="pandahouse"><a href="#pandahouse" class="headerlink" title="pandahouse"></a>pandahouse</h3><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">pip install pandahouse</code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pandahouse <span class="token keyword">import</span> read_clickhouseconnection <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>database<span class="token operator">=</span><span class="token string">'pro'</span><span class="token punctuation">,</span>                  host<span class="token operator">=</span><span class="token string">'localhost:8123'</span><span class="token punctuation">,</span>                  user<span class="token operator">=</span><span class="token string">'admin'</span><span class="token punctuation">,</span>                  password<span class="token operator">=</span><span class="token string">'paswd'</span><span class="token punctuation">)</span>df <span class="token operator">=</span> read_clickhouse<span class="token punctuation">(</span>fin_sql<span class="token punctuation">,</span>connection<span class="token operator">=</span>connection<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pandas</tag>
      
      <tag>Clickhouse</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java log 不打印异常栈信息</title>
    <link href="/post/6b05ac2c.html"/>
    <url>/post/6b05ac2c.html</url>
    
    <content type="html"><![CDATA[<p>最近查线上问题时，发现了一个不打印异常栈信息的情况，仔细排查原来和JVM优化有关<span id="more"></span>，log如下</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">2022-01-25 11:57:38,074 ERROR (AgentOutboundController.java:126)- nulljava.lang.NullPointerException: null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>查看日志时我以为代码中没有打印异常的详细信息，又查看了一遍代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>发现代码写的没什么问题，那么问题出在哪？<br>原来JVM对一些特定的异常类型做了Fast Throw优化，如果检测到在代码里某个位置连续多次抛出同一类型异常的话，异常栈信息会被清空。</p><p>在启动时配置<code>-XX:-OmitStackTraceInFastThrow</code>参数，即可关闭此优化。</p><p>配置好参数重启服务，日志恢复了正常：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">2022-01-25 12:53:37,167 ERROR (AgentOutboundController.java:126)- nulljava.lang.NullPointerException: nullat com.example.production.api.service.AgentOutboundService.lambda$addOutboundCode$0(AgentOutboundService.java:388)at java.util.ArrayList.forEach(ArrayList.java:1259)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>将异常栈信息打印出来就可以看到到底是那行代码出现了问题了。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://my.oschina.net/LucasZhu/blog/1830044">JVM参数OmitStackTraceInFastThrow导致的异常栈信息不见了</a></p><p><a href="https://juejin.cn/post/6967908573649043492">OmitStackTraceInFastThrow与JVM的C1,C2编译器</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JVM</tag>
      
      <tag>Log</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自建直播流媒体服务</title>
    <link href="/post/3bc6b560.html"/>
    <url>/post/3bc6b560.html</url>
    
    <content type="html"><![CDATA[<p>想在web端播放实时监控视频，查看了设备厂商的接口文档，不能直接获取到视频的直播流，需要我们自己实现一下。我们准备调用厂商提供的SDK将视频流拿到后推送给客户端，这中间需要搭建一个推流服务。<a href="https://github.com/ossrs/srs">SRS</a>是一个简单高效的实时视频服务器，支持RTMP/WebRTC/HLS/HTTP-FLV/SRT。</p><span id="more"></span><p>作为测试，我用Docker启动一个临时的容器</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">docker run --rm -it -p 1935:1935 -p 1985:1985 -p 8080:8080 \    ossrs&#x2F;srs:3 .&#x2F;objs&#x2F;srs -c conf&#x2F;srs.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>1935是rtmp协议的默认端口，视频推流时需要使用这个端口。<br>8080是HTTP协议的接口。</p><p>启动成功之后，我使用OBS进行推流测试。</p><p><img src="https://img.yjll.site/img/20211112165712.png" alt="20211112165712"></p><p><img src="https://img.yjll.site/img/20211112170021.png" alt="20211112170021"></p><p>推流成功后，可以使用<code>VLC</code>进行测试。</p><p><img src="https://img.yjll.site/img/20211112165910.png" alt="20211112165910"></p><p>我这里使用的是<code>rtmp</code>协议获取数据，<code>SRS</code>也支持其他协议。</p><p><strong>HTTP-FLV</strong></p><p><a href="http://192.168.1.200:8080/live/key.flv">http://192.168.1.200:8080/live/key.flv</a></p><p><strong>HLS</strong></p><p><a href="http://192.168.1.200:8080/live/key.m3u8">http://192.168.1.200:8080/live/key.m3u8</a></p><p>流媒体协议 RTMP, HTTP-FLV, HLS 简单对比</p><p><img src="https://img.yjll.site/img/20211112170754.png" alt="20211112170754"></p>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python更新服务器SSH密钥</title>
    <link href="/post/65ba80c8.html"/>
    <url>/post/65ba80c8.html</url>
    
    <content type="html"><![CDATA[<p>出于安全考虑，需要更换服务器上的ssh密钥，但是重复一台一台服务器更改又太浪费时间，这种重复又浪费时间的工作就交给计算机吧。在网上查了查，<code>paramiko</code>正适合，看了看文档，不错，说干就干。</p><span id="more"></span><p>先安装<code>paramiko</code>包</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">pip install paramiko<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>密钥忘生成了，我这里使用git-bash带的命令进行生成，切记不要忘记备份原密钥。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>下面是对应的脚本，<code>paramiko</code>使用起来还是比较优雅的，简单看看就能理解。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> paramikoold_key <span class="token operator">=</span> <span class="token string">r'D:\tmp\id_rsa'</span>new_key <span class="token operator">=</span> <span class="token string">r'C:\Users\ROOT\.ssh\id_rsa'</span>new_pub_key <span class="token operator">=</span> <span class="token string">r'C:\Users\ROOT\.ssh\id_rsa.pub'</span><span class="token keyword">def</span> <span class="token function">ssh_key</span><span class="token punctuation">(</span>host<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 密钥</span>    pkey <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>RSAKey<span class="token punctuation">.</span>from_private_key_file<span class="token punctuation">(</span>old_key<span class="token punctuation">)</span>    <span class="token comment"># 使用transport实现执行多个操作</span>    trans <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>Transport<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    trans<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> pkey<span class="token operator">=</span>pkey<span class="token punctuation">)</span>    ssh <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>SSHClient<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 将sshclient的对象的transport指定为以上的trans</span>    ssh<span class="token punctuation">.</span>_transport <span class="token operator">=</span> trans    <span class="token comment"># 使用sftp上传文件</span>    sftp <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>SFTPClient<span class="token punctuation">.</span>from_transport<span class="token punctuation">(</span>trans<span class="token punctuation">)</span>    sftp<span class="token punctuation">.</span>put<span class="token punctuation">(</span>localpath<span class="token operator">=</span>new_pub_key<span class="token punctuation">,</span> remotepath<span class="token operator">=</span><span class="token string">'/root/.ssh/authorized_keys'</span><span class="token punctuation">)</span>    sftp<span class="token punctuation">.</span>put<span class="token punctuation">(</span>localpath<span class="token operator">=</span>new_key<span class="token punctuation">,</span> remotepath<span class="token operator">=</span><span class="token string">'/root/.ssh/id_rsa'</span><span class="token punctuation">)</span>    stdin<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr <span class="token operator">=</span> ssh<span class="token punctuation">.</span>exec_command<span class="token punctuation">(</span><span class="token string">'systemctl restart sshd'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    trans<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    ssh_key<span class="token punctuation">(</span><span class="token string">'192.168.1.200'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>脚本运行之后，试试能不能登录上，登不上去那就。。。</p><p><img src="https://img.yjll.site/img/20211105163601.png" alt=""></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.cnblogs.com/wongbingming/articles/12384764.html">使用 Python ssh 远程登陆服务器的最佳方案</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Pandas计算最大连续间隔时间</title>
    <link href="/post/15886092.html"/>
    <url>/post/15886092.html</url>
    
    <content type="html"><![CDATA[<p>日常统计中总会遇到需要统计和周期有关的数据，如用户连续登录天数，事件发生的连续性等。<br>样本数据是用户的ID和抽奖日期，准备计算出每个用户的连续抽奖最大间隔时间，我先说一下我的思路。先将根据用户ID将用户分组并按照日期排序，对相邻的日期进行比较，差异为1天的即为连续数据，对连续数据进行计数即可计算出最大的时间间隔。</p><span id="more"></span><p>数据样本</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddf <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r'tmp\draw.csv'</span><span class="token punctuation">)</span>df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><table><thead><tr><th></th><th>draw_date</th><th>weixin_id</th></tr></thead><tbody><tr><td>0</td><td>2021-05-25</td><td>751478029716439040</td></tr><tr><td>1</td><td>2021-05-28</td><td>751478029716439040</td></tr><tr><td>2</td><td>2021-06-08</td><td>751478029716439040</td></tr><tr><td>3</td><td>2021-06-09</td><td>751478029716439040</td></tr><tr><td>4</td><td>2021-06-15</td><td>639062248681259008</td></tr><tr><td>5</td><td>2021-06-16</td><td>639062248681259008</td></tr><tr><td>6</td><td>2021-06-17</td><td>639062248681259008</td></tr><tr><td>7</td><td>2021-06-18</td><td>639062248681259008</td></tr><tr><td>8</td><td>2021-06-19</td><td>639062248681259008</td></tr><tr><td>9</td><td>2021-06-21</td><td>639062248681259008</td></tr></tbody></table><p>样本中数据是字符串，我先将日期转成对应的格式</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">'draw_date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'draw_date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>我这里使用<code>shift</code>将日期下移一位，再加上一天和相邻数据进行比较，目的是判断前后两条时间间隔是否相差1天，不相等记为True反之为False</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token keyword">for</span> name<span class="token punctuation">,</span>group <span class="token keyword">in</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'weixin_id'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    check <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>group<span class="token punctuation">[</span><span class="token string">'draw_date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> group<span class="token punctuation">[</span><span class="token string">'draw_date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>check<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">4     True5    False6    False7    False8    False9     TrueName: draw_date, dtype: bool0     True1     True2     True3    FalseName: draw_date, dtype: bool<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>用<code>cumsum</code>窗口函数，对上文提到的标记按照行累加，标记为False的情况不会计算</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> name<span class="token punctuation">,</span>group <span class="token keyword">in</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'weixin_id'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    check <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>group<span class="token punctuation">[</span><span class="token string">'draw_date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> group<span class="token punctuation">[</span><span class="token string">'draw_date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    cumsum <span class="token operator">=</span> check<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cumsum<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">4    15    16    17    18    19    2Name: draw_date, dtype: int320    11    22    33    3Name: draw_date, dtype: int32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>用<code>value_counts</code>对上文累计的数据进行分组计数，可以算出每段时间的间隔天数，按照我们的需求取最大的即可</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> name<span class="token punctuation">,</span>group <span class="token keyword">in</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'weixin_id'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    check <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>group<span class="token punctuation">[</span><span class="token string">'draw_date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> group<span class="token punctuation">[</span><span class="token string">'draw_date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    cumsum <span class="token operator">=</span> check<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span>    value_counts <span class="token operator">=</span> cumsum<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>value_counts<span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1    52    1Name: draw_date, dtype: int643    22    11    1Name: draw_date, dtype: int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>上边的循环代码可以用<code>agg</code>替代</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetimedf<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'weixin_id'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span>    <span class="token keyword">lambda</span> group<span class="token punctuation">:</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>group<span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> group<span class="token punctuation">)</span><span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><table><thead><tr><th></th><th>draw_date</th></tr></thead><tbody><tr><td>weixin_id</td><td></td></tr><tr><td>639062248681259008</td><td>5</td></tr><tr><td>751478029716439040</td><td>2</td></tr></tbody></table><p>前后数据比较也可直接使用<code>diff</code>函数，该函数可算出前后两条数据相减的结果</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'weixin_id'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span>    <span class="token keyword">lambda</span> group <span class="token punctuation">:</span>        group<span class="token punctuation">.</span>diff<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>            <span class="token keyword">lambda</span> d<span class="token punctuation">:</span>d<span class="token punctuation">.</span>days <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><table><thead><tr><th></th><th>draw_date</th></tr></thead><tbody><tr><td>weixin_id</td><td></td></tr><tr><td>639062248681259008</td><td>5</td></tr><tr><td>751478029716439040</td><td>2</td></tr></tbody></table><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://blog.csdn.net/wwqnmdhmp/article/details/108927935">【pandas】计算最大连续间隔时间</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pandas</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Logstash同步Mysql数据到Elasticsearch</title>
    <link href="/post/863f4886.html"/>
    <url>/post/863f4886.html</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.yjll.site/img/Logstash.png" alt="Logstash"><br>Logstash是一个开源数据收集引擎，具有近实时管道功能。Logstash可以动态地将来自不同数据源的数据统一起来，并将数据标准化到你所选择的目的地。</p><p>项目用到ES做统计，需要同步Mysql数据到ES中，我们使用Logstash进行同步，Logstash安装需要依赖的包比较多，我为了方便直接使用Docker进行操作。</p><span id="more"></span><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>首先要编写同步数据的配置文件，从Mysql同步数据到ElasticSearch中，使用jdbc里连接数据库作为input，ouput为ES。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">input &#123; stdin &#123; &#125;    jdbc &#123;        #注意mysql连接地址一定要用ip，不能使用localhost等        jdbc_connection_string &#x3D;&gt; &quot;jdbc:mysql:&#x2F;&#x2F;192.168.1.200:3308&#x2F;test&quot;        jdbc_user &#x3D;&gt; &quot;test&quot;        jdbc_password &#x3D;&gt; &quot;test&quot;        #这个jar包的地址是容器内的地址        jdbc_driver_library &#x3D;&gt; &quot;&#x2F;usr&#x2F;share&#x2F;logstash&#x2F;pipeline&#x2F;mysql-connector-java-8.0.11.jar&quot;        jdbc_driver_class &#x3D;&gt; &quot;com.mysql.jdbc.Driver&quot;        jdbc_paging_enabled &#x3D;&gt; &quot;true&quot;        jdbc_page_size &#x3D;&gt; &quot;5000&quot;        statement &#x3D;&gt; &quot;SELECT * FROM base_areas where id &gt; :sql_last_value&quot;        tracking_column &#x3D;&gt; id        use_column_value &#x3D;&gt; true        last_run_metadata_path &#x3D;&gt; &quot;&#x2F;usr&#x2F;share&#x2F;logstash&#x2F;pipeline&#x2F;area&quot;        schedule &#x3D;&gt; &quot;* * * * *&quot;    &#125; &#125;   output &#123;     stdout &#123;        codec &#x3D;&gt; json_lines    &#125;    elasticsearch &#123;        hosts &#x3D;&gt; &quot;192.168.1.200:9200&quot;        index &#x3D;&gt; &quot;area&quot;        document_type &#x3D;&gt; &quot;_doc&quot;        document_id &#x3D;&gt; &quot;%&#123;id&#125;&quot;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>重点在于 <code>use_column_value</code> 和 <code>tracking_column</code> 这两个参数，当use_column_value为true时，可以用 :sql_last_value 这个变量来获取tracking_column对应的字段的最新值，默认即第一次启动时为 0 。我的示例中tracking_column对应id，即Logstash都会记录每次查询结果id的最大值，供下一次查询使用。</p><p>Logstash将tracking_column的最新值记录到<code>last_run_metadata_path</code>配置的文件，启动时读取该文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">docker run -it -v  $PWD&#x2F;pipeline&#x2F;:&#x2F;usr&#x2F;share&#x2F;logstash&#x2F;pipeline -v $PWD&#x2F;logstash.yml:&#x2F;usr&#x2F;share&#x2F;logstash&#x2F;config&#x2F;logstash.yml -v $PWD&#x2F;pipelines.yml:&#x2F;usr&#x2F;share&#x2F;logstash&#x2F;config&#x2F;pipelines.yml   logstash:6.4.3  bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>先安装jdbc和es的插件</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">bash-4.2$ ~&#x2F;bin&#x2F;logstash-plugin install logstash-input-jdbcValidating logstash-input-jdbcInstalling logstash-input-jdbcInstallation successfulbash-4.2$ ~&#x2F;bin&#x2F;logstash-plugin install logstash-output-elasticsearchValidating logstash-output-elasticsearchInstalling logstash-output-elasticsearchInstallation successful<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>由于是在容器内部连接服务，所以ES的连接不要使用localhost和127.0.0.1，更改为实际IP地址</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">bash-4.2$ cat ~&#x2F;config&#x2F;logstash.yml http.host: &quot;0.0.0.0&quot;xpack.monitoring.elasticsearch.url: http:&#x2F;&#x2F;192.168.1.200:9200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h3><p>运行同步脚本可手动执行也可以配置调度执行</p><h4 id="手动执行"><a href="#手动执行" class="headerlink" title="手动执行"></a>手动执行</h4><p><code>~/bin/logstash -f ***.config</code></p><h4 id="调度执行"><a href="#调度执行" class="headerlink" title="调度执行"></a>调度执行</h4><p>调度任务可读取配置文件<code>config/pipelines.yml</code>，默认有一个<code>main</code>，<code>/usr/share/logstash/pipeline</code>为pipeline的存放路径，该文件夹内的pipeline都会被执行。<br>可手动更改该文件，添加<code>id</code>和<code>config</code>即可。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">bash-4.2$ cat ~&#x2F;config&#x2F;pipelines.yml - pipeline.id: main  path.config: &quot;&#x2F;usr&#x2F;share&#x2F;logstash&#x2F;pipeline&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>好，配置已完成，运行<code>/usr/local/bin/docker-entrypoint</code>启动调度任务</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>logstash</code>是ES官方提供的工具，支持扩展多，配置灵活，但是只能同步增量数据，对于源数据删除和修改的情况，logstash无能为力，还有基于定时任务同步无法保证实时，对实时性要求高的场景要考虑其他方案。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.elastic.co/guide/en/logstash/current/docker-config.html#_pipeline_configuration">Configuring Logstash for Docker</a></p><p><a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-jdbc.html">Jdbc input plugin</a></p><p><a href="https://doc.yonyoucloud.com/doc/logstash-best-practice-cn/index.html">Logstash 最佳实践</a></p>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Elasticsearch</tag>
      
      <tag>Mysql</tag>
      
      <tag>Logstash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Canal实现Mysql至ClickHouse实时同步</title>
    <link href="/post/abdd8675.html"/>
    <url>/post/abdd8675.html</url>
    
    <content type="html"><![CDATA[<p>前面两篇文章(<a href="/post/ab6a3b54.html" title="Canal推送Mysql增量数据至RabbitMQ">Canal推送Mysql增量数据至RabbitMQ</a> <a href="/post/15c08367.html" title="Canal实现Mysql至Elasticsearch实时同步">Canal实现Mysql至Elasticsearch实时同步</a>)介绍了如何搭建Canal并且使用Canal将Mysql的解析后的数据投放到MQ中，和从MQ中同步数据到Elasticsearch中，这篇文章主要介绍如何同步数据到关系型数据库中。</p><span id="more"></span><h3 id="ClickHouse"><a href="#ClickHouse" class="headerlink" title="ClickHouse"></a>ClickHouse</h3><p>Canal提供了对关系型数据库的支持，虽然ClickHouse不是关系型数据库，但是可以兼容部分SQL语句(select,insert等)，我很可以对增量数据进行同步。由于提供的包内不包含ClickHouse的JDBC驱动，我们去下载必要的jar包(<code>lz4-1.3.0.jar</code>,<code>clickhouse-jdbc-0.2.4.jar</code>,<code>httpclient-4.3.3.jar</code>,<code>httpcore-4.4.13.jar</code>)并放入<code>canal/adapter/lib</code>内。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>我将数据分别同步到Mysql和ClickHouse中，防止相互干扰我这里使用了两个队列，两个instance分别从不同的队列中消费消息。</p><p>编辑 <code>adapter/conf/application.yml</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">canalAdapters</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">instance</span><span class="token punctuation">:</span> canal.mysql <span class="token comment"># canal instance Name or mq topic name</span>    <span class="token key atrule">groups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">groupId</span><span class="token punctuation">:</span> g1        <span class="token key atrule">outerAdapters</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> rdb            <span class="token key atrule">key</span><span class="token punctuation">:</span> mysql1            <span class="token key atrule">properties</span><span class="token punctuation">:</span>              <span class="token key atrule">jdbc.driverClassName</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver              <span class="token key atrule">jdbc.url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;serverTimezone=Asia/Shanghai</span>              <span class="token key atrule">jdbc.username</span><span class="token punctuation">:</span> root              <span class="token key atrule">jdbc.password</span><span class="token punctuation">:</span> root  <span class="token punctuation">-</span> <span class="token key atrule">instance</span><span class="token punctuation">:</span> canal.clickhouse <span class="token comment"># canal instance Name or mq topic name</span>    <span class="token key atrule">groups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">groupId</span><span class="token punctuation">:</span> g1        <span class="token key atrule">outerAdapters</span><span class="token punctuation">:</span>          <span class="token comment">#- name: logger</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> rdb            <span class="token key atrule">key</span><span class="token punctuation">:</span> clickhouse            <span class="token key atrule">properties</span><span class="token punctuation">:</span>              <span class="token key atrule">jdbc.driverClassName</span><span class="token punctuation">:</span> ru.yandex.clickhouse.ClickHouseDriver              <span class="token key atrule">jdbc.url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>clickhouse<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>8123/pro              <span class="token key atrule">jdbc.username</span><span class="token punctuation">:</span>              <span class="token key atrule">jdbc.password</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>编辑MySQL的配置文件 <code>adapter/conf/rdb/scan_log.yml</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">dataSourceKey: defaultDSdestination: canal.mysqlgroupId: g1outerAdapterKey: mysql1concurrent: truedbMapping:  database: pro  table: scan_log  targetTable: scan_log  targetPk:    id: id  mapAll: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>编辑ClickHouse的配置文件 <code>adapter/conf/rdb/ch_scan_log.yml</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">dataSourceKey: defaultDSdestination: canal.clickhousegroupId: g1outerAdapterKey: clickhouseconcurrent: truedbMapping:  database: pro  table: scan_log   targetTable: scan_log  targetPk:    id: id    mapAll: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="同步报错"><a href="#同步报错" class="headerlink" title="同步报错"></a>同步报错</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">datax Unknown system variable &#39;tx_read_only&#39;The connection property &#39;zeroDateTimeBehavior&#39; acceptable values are: &#39;CONVERT_TO_NULL&#39;, &#39;EXCEPTION&#39; or &#39;ROUND&#39;. The value &#39;convertToNull&#39; is not acceptable.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>由于我使用的是Mysql8，需要更新mysql驱动<code>8.0.13</code>以上版本。</p><p>下载<a href="https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.22/mysql-connector-java-8.0.22.jar">mysql-connector-java-8.0.22.jar</a>放入lib中即可</p><p>还有同步clickhouse时，update和delete语句会报错，因为clickhouse的语法并不是完全兼容关系型数据库，我这里只对增量表进行了同步。</p><h3 id="全量同步"><a href="#全量同步" class="headerlink" title="全量同步"></a>全量同步</h3><p>Mysql通过REST接口的方式导入全量数据</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">curl http:&#x2F;&#x2F;127.0.0.1:8081&#x2F;etl&#x2F;rdb&#x2F;mysql1&#x2F;scan_log.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>由于语法兼容性问题ClickHouse不能使用这种方式，同步全量数据我使用的是<a href="https://github.com/alibaba/DataX">DataX</a>，细节方面可以参考<a href="/post/6a3f5dff.html" title="DataX同步全量Mqsql数据到Elasticsearch">DataX同步全量Mqsql数据到Elasticsearch</a>这篇。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://segmentfault.com/a/1190000021512811">clickhouse修改用户密码</a></p><p><a href="https://github.com/alibaba/canal/wiki/Sync-RDB">RDB适配器</a></p>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Canal</tag>
      
      <tag>Mysql</tag>
      
      <tag>ClickHouse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Canal实现Mysql至Elasticsearch实时同步</title>
    <link href="/post/15c08367.html"/>
    <url>/post/15c08367.html</url>
    
    <content type="html"><![CDATA[<p>canal 1.1.1版本之后, 内置增加客户端数据同步功能。我这里使用<a href="https://github.com/alibaba/canal/releases/download/canal-1.1.5/canal.adapter-1.1.5.tar.gz">canal.adapter-1.1.5.tar.gz</a>，该版本支持RabbitMQ，可从队列中取数据。</p><span id="more"></span><p>关于RabbitMQ配置和对接可以看我之前写的一篇<a href="/post/ab6a3b54.html" title="Canal推送Mysql增量数据至RabbitMQ">Canal推送Mysql增量数据至RabbitMQ</a>。</p><h3 id="对接RabbitMQ"><a href="#对接RabbitMQ" class="headerlink" title="对接RabbitMQ"></a>对接RabbitMQ</h3><p>编辑<code>adapter/conf/application.yml</code>,配置rabbitMQ信息</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">canal.conf</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> rabbitMQ <span class="token comment">#tcp kafka rocketMQ rabbitMQ</span>  <span class="token key atrule">consumerProperties</span><span class="token punctuation">:</span>    <span class="token comment"># rabbitMQ consumer</span>    <span class="token key atrule">rabbitmq.host</span><span class="token punctuation">:</span> 127.0.0.1    <span class="token key atrule">rabbitmq.virtual.host</span><span class="token punctuation">:</span> /    <span class="token key atrule">rabbitmq.username</span><span class="token punctuation">:</span> root    <span class="token key atrule">rabbitmq.password</span><span class="token punctuation">:</span> root    <span class="token key atrule">rabbitmq.resource.ownerId</span><span class="token punctuation">:</span>  <span class="token key atrule">srcDataSources</span><span class="token punctuation">:</span>    <span class="token key atrule">defaultDS</span><span class="token punctuation">:</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//remote<span class="token punctuation">:</span>3306/test<span class="token punctuation">?</span>useUnicode=true      <span class="token key atrule">username</span><span class="token punctuation">:</span> root      <span class="token key atrule">password</span><span class="token punctuation">:</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Elasticsearch配置"><a href="#Elasticsearch配置" class="headerlink" title="Elasticsearch配置"></a>Elasticsearch配置</h3><p>编辑<code>adapter/conf/application.yml</code>,配置canalAdapters同步es6，队列使用<code>canal.es</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">canalAdapters</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">instance</span><span class="token punctuation">:</span> canal.es <span class="token comment"># canal instance Name or mq topic name</span>    <span class="token key atrule">groups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">groupId</span><span class="token punctuation">:</span> g1        <span class="token key atrule">outerAdapters</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> es6            <span class="token key atrule">hosts</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">9200</span> <span class="token comment"># 127.0.0.1:9200 for rest mode</span>            <span class="token key atrule">properties</span><span class="token punctuation">:</span>              <span class="token key atrule">mode</span><span class="token punctuation">:</span> rest <span class="token comment"># or rest</span>              <span class="token comment"># security.auth: test:123456 #  only used for rest mode</span>              <span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> elasticsearch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>canal会扫描<code>adapter/conf/es6/</code>下的所有配置文件，其中信息要和<code>adapter/conf/application.yml</code>匹配</p><p>cat ./adapter/conf/es6/scan_log.yml</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">dataSourceKey</span><span class="token punctuation">:</span> defaultDS<span class="token key atrule">destination</span><span class="token punctuation">:</span> canal.es<span class="token key atrule">groupId</span><span class="token punctuation">:</span> g1<span class="token key atrule">esMapping</span><span class="token punctuation">:</span>  <span class="token key atrule">_index</span><span class="token punctuation">:</span> scan_log  <span class="token key atrule">_type</span><span class="token punctuation">:</span> _doc  <span class="token key atrule">_id</span><span class="token punctuation">:</span> id  <span class="token key atrule">sql</span><span class="token punctuation">:</span> <span class="token string">"select id, code, casecode from scan_log"</span>  <span class="token key atrule">commitBatch</span><span class="token punctuation">:</span> <span class="token number">3000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="建立ElasticSearchmapping"><a href="#建立ElasticSearchmapping" class="headerlink" title="建立ElasticSearchmapping"></a>建立ElasticSearchmapping</h3><p>新版ES提倡使用<code>_doc</code>作为<code>_type</code>，我们这里使用Mysql表名作为ES的index，建立mapping</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUT /scan_log <span class="token punctuation">&#123;</span>    <span class="token property">"mappings"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token property">"_doc"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token property">"code"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                    <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"long"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"casecode"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"fields"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"keyword"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>                        <span class="token property">"ignore_above"</span> <span class="token operator">:</span> <span class="token number">256</span>                      <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我们也可以通过Logstash帮我们自动创建mapping,Logstash可以根据json格式创建mapping，关于Logstash可以看我之前写的文章<a href="/post/863f4886.html" title="使用Logstash同步Mysql数据到Elasticsearch">使用Logstash同步Mysql数据到Elasticsearch</a></p><p>使用generator方式生成json</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">cat logstash-sample.conf input &#123;   generator &#123;    count &#x3D;&gt; 1    message &#x3D;&gt; &#39;    &#123;        &quot;id&quot;: 628247969266810880,        &quot;code&quot;: 2199023788471,        &quot;casecode&quot;: &quot;999STZPMDDV&quot;    &#125;&#39;    codec &#x3D;&gt; json  &#125;&#125;output &#123;  elasticsearch &#123;    hosts &#x3D;&gt; [&quot;http:&#x2F;&#x2F;localhost:9200&quot;]    index &#x3D;&gt; &quot;scan_log&quot;    document_type &#x3D;&gt; &quot;_doc&quot;    document_id &#x3D;&gt; &quot;%&#123;id&#125;&quot;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>mapping创建完成后，我们启动项目，日志中发现这个错误</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Load canal adapter: es6 failed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>出现问题的不只我一个，<a href="https://github.com/alibaba/canal/issues/3466">#3466</a>中有人提出解决方案，使用<a href="https://github.com/alibaba/canal/releases/download/canal-1.1.5-alpha-2/canal.adapter-1.1.5-SNAPSHOT.tar.gz">canal.adapter-1.1.5-SNAPSHOT.tar.gz</a>版本中的<code>client-adapter.es6x-1.1.5-SNAPSHOT-jar-with-dependencies.jar</code>替换现版本中的<code>client-adapter.es6x-1.1.5-jar-with-dependencies.jar</code>，完美解决。</p><h3 id="同步全量数据"><a href="#同步全量数据" class="headerlink" title="同步全量数据"></a>同步全量数据</h3><p>adapter支持通过REST接口的方式导入全量数据</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"># 先暂停同步curl http:&#x2F;&#x2F;127.0.0.1:8081&#x2F;syncSwitch&#x2F;canal.escurl http:&#x2F;&#x2F;127.0.0.1:8081&#x2F;syncSwitch&#x2F;canal.es&#x2F;off -X PUT# 全量导入curl http:&#x2F;&#x2F;127.0.0.1:8081&#x2F;etl&#x2F;es6&#x2F;scan_log.yml -X POST# 恢复同步curl http:&#x2F;&#x2F;127.0.0.1:8081&#x2F;syncSwitch&#x2F;canal.es&#x2F;on -X PUT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>路径中的<code>scan_log.yml</code>为<code>adapter/conf/es6/</code>下的配置</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://github.com/alibaba/canal/wiki/Sync-ES">ElasticSearch适配器</a></p><p><a href="https://github.com/alibaba/canal/wiki/ClientAdapter">ClientAdapter</a></p><p><a href="https://jasonkayzk.github.io/2019/10/03/ElasticSearch%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8%E9%AB%98%E7%89%88%E6%9C%AC%E7%A7%BB%E9%99%A4%E6%98%A0%E5%B0%84%E7%B1%BB%E5%9E%8B/">ElasticSearch为什么在高版本移除映射类型</a></p><p><a href="https://www.alibabacloud.com/help/zh/doc-detail/135297.htm">通过Canal将MySQL数据同步到阿里云Elasticsearch</a></p>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Elasticsearch</tag>
      
      <tag>Canal</tag>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Canal推送Mysql增量数据至RabbitMQ</title>
    <link href="/post/ab6a3b54.html"/>
    <url>/post/ab6a3b54.html</url>
    
    <content type="html"><![CDATA[<p>canal [kə’næl]，译意为水道/管道/沟渠，主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费</p><p><img src="https://img.yjll.site/img/Canal.png" alt="Canal"></p><span id="more"></span><p>工作原理</p><ul><li>canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送 dump 协议</li><li>MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal )</li><li>canal 解析 binary log 对象(原始为 byte 流)</li></ul><p>从<a href="https://github.com/alibaba/canal/releases/tag/canal-1.1.5">v1.1.5</a>版本开始，Canal新增对RabbitMQ的支持。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><!-- log-bin=mysql-bin 　　# 开启 binlogbinlog-format=ROW 　　# 选择 ROW 模式server_id=1 　　　　   # 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复 --><p><code>canal</code>需要Mysql端开启二进制日志同步，我使用的阿里云的Mysql，默认已开启<code>binlog dump</code>。</p><p>RabbitMQ我使用Docker部署，注意镜像要使用带<code>management</code>版本的，方便在界面操作。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">docker run --name rabbitmq -d -p 15672:15672 -p 5672:5672 -e RABBITMQ_DEFAULT_USER&#x3D;root -e RABBITMQ_DEFAULT_PASS&#x3D;root   rabbitmq:3.8.2-management<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>RabbitMQ的<code>Exchange</code>,<code>Queue</code>,<code>Binding</code>也要优先配置好，我的需求是canal解析完Mysql的binlog后，将信息分别推送到3个队列中，我这里为了隔离环境建3个队列，分别是同步Elasticsearch的<code>canal.es</code>，同步ClickHouse的<code>canal.clickhouse</code>和同步Mysql的<code>canal.mysql</code>。因为是无差别投放，我只创建了一个交换机<code>canal</code>。将3个队列<code>canal.es</code>、<code>canal.clickhouse</code>、<code>canal.mysql</code>绑定到交换机<code>canal</code>上。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>编辑<code>deployer/conf/example/instance.properties</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"># 我这里使用了gtid日志进行同步canal.instance.gtidon&#x3D;truecanal.instance.master.address&#x3D;localhost:3306canal.instance.dbUsername&#x3D;rootcanal.instance.dbPassword&#x3D;root# 这里配置发送消息的主题，由于3队列接收全部数据，所以此处主题我没有用到，使用的默认值canal.mq.topic&#x3D;example<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>编辑<code>deployer/conf/canal.properties</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"># 此处更改为rabbitmq模式canal.serverMode &#x3D; rabbitmqrabbitmq.host &#x3D; 127.0.0.1rabbitmq.virtual.host &#x3D; &#x2F;rabbitmq.exchange &#x3D; canalrabbitmq.username &#x3D; rootrabbitmq.password &#x3D; root# 消息持久化rabbitmq.deliveryMode &#x3D; 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>运行 <code>bin/startup.sh</code> ，服务便开始运行了</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>由于三个队列需要同步的数据库不同，无差别投放会造成不必要的性能浪费，可开启<code>dynamicTopic</code>功能，根据topic将数据投放至不能的队列。</p><p>编辑<code>deployer/conf/example/instance.properties</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">canal.mq.dynamicTopic&#x3D;pro\\..*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>投递的topic为<code>库名_表名</code></p><p>Exchanges和Queues的绑定关系在RebbitMQ的后台配置即可，模式选择Topic模式。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://github.com/alibaba/canal/wiki/QuickStart">alibaba/canal</a></p><p><a href="https://github.com/alibaba/canal/wiki/Canal-Kafka-RocketMQ-QuickStart">Canal Kafka RocketMQ QuickStart</a></p>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Canal</tag>
      
      <tag>Mysql</tag>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xpath语法</title>
    <link href="/post/d16b66c8.html"/>
    <url>/post/d16b66c8.html</url>
    
    <content type="html"><![CDATA[<p><strong>XPath</strong>即为<a href="https://zh.wikipedia.org/wiki/XML">XML</a>路径语言（XML Path Language），它是一种用来确定XML文档中某部分位置的计算机语言。</p><p>XPath基于XML的树状结构，提供在数据结构树中找寻节点的能力。起初XPath的提出的初衷是将其作为一个通用的、介于XPointer与XSL间的语法模型。但是XPath很快的被开发者采用来当作小型查询语言。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>nodename</td><td>选取此节点的所有子节点</td></tr><tr><td>/</td><td>从根节点选取</td></tr><tr><td>//</td><td>从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置</td></tr><tr><td>.</td><td>选取当前节点</td></tr><tr><td>..</td><td>选取当前节点的父节点</td></tr><tr><td>@</td><td>选取属性</td></tr></tbody></table><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>python使用<code>lxml</code>进行解析</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreehtml<span class="token operator">=</span>etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'d:/github.html'</span><span class="token punctuation">,</span>etree<span class="token punctuation">.</span>HTMLParser<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''//*[@id="org-repositories"]/div[1]/div/ul/li[1]/div[1]/div[1]/h3/a/@href'''</span><span class="token punctuation">)</span><span class="token keyword">for</span> row <span class="token keyword">in</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>scrapy</code>框架也支持xpath解析</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">proxy <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'http'</span><span class="token punctuation">:</span> <span class="token string">'http://dev:7890'</span><span class="token punctuation">,</span><span class="token string">'https'</span><span class="token punctuation">:</span> <span class="token string">'http://dev:7890'</span><span class="token punctuation">&#125;</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url<span class="token punctuation">,</span>verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>proxies<span class="token operator">=</span>proxy<span class="token punctuation">)</span><span class="token comment"># %%</span><span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment"># %%</span><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>selector <span class="token keyword">import</span> Selector<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>http <span class="token keyword">import</span> HtmlResponseresponse <span class="token operator">=</span> Selector<span class="token punctuation">(</span>text<span class="token operator">=</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">for</span> elem <span class="token keyword">in</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="main"]/article'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    title <span class="token operator">=</span> elem<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'string(./header/h1/a)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> elem<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./header/h1/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">next</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[@rel="next"]/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>Java可以使用<code>htmlcleaner</code>解析HTML</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.sourceforge.htmlcleaner<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>htmlcleaner<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我这里代码使用Groovy写的，和Java写法有点差异</p><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">HtmlCleaner hc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HtmlCleaner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> node <span class="token operator">=</span> hc<span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"d:/github.html"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>println node<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"title"</span></span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>println node<span class="token punctuation">.</span><span class="token function">evaluateXPath</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"//*[@id=\"org-repositories\"]/div[1]/div/ul/li[*]/div[1]/div[1]/h3/a/@href"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="获取xpath"><a href="#获取xpath" class="headerlink" title="获取xpath"></a>获取xpath</h3><p>我们可以通过Chrome的开发这工具来获取xpath，但这种方式获取的xpath不是很友好，只是单纯的将所有的路径都显示出来。</p><p><img src="https://img.yjll.site/img/Chrome_xpath.png" alt="Chrome_xpath"></p><p>可以安装<br><a href="https://github.com/fy0/EasySelect">EasySelect</a>这个Chrome扩展，可以很方便取到我们想要的数据。</p><p><img src="https://raw.githubusercontent.com/fy0/EasySelect/master/misc/example2.png" alt="example2"></p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>再安利一个小工具，可根据curl命令生成代码。<br><a href="https://curl.trillworks.com/">Convert curl syntax to Python</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Python</tag>
      
      <tag>Xpath</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ZooKeeper在实际开发中的应用-事件监听</title>
    <link href="/post/bf85b35c.html"/>
    <url>/post/bf85b35c.html</url>
    
    <content type="html"><![CDATA[<h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><p><a href="https://curator.apache.org/">Apache Curator</a>是Netflix公司开源的一个Zookeeper客户端，与Zookeeper提供的原生客户端相比，Curator的抽象层次更高，简化了Zookeeper客户端的开发量。Patrixck Hunt（Zookeeper committer）以一句 <strong>Guava is to Java what Curator is to Zookeeper</strong> 给予高度评价。</p><h4 id="Watcher-标准事件处理器"><a href="#Watcher-标准事件处理器" class="headerlink" title="Watcher 标准事件处理器"></a>Watcher 标准事件处理器</h4><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">Watcher watcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>WatchedEvent watchedEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"监听到的变化 watchedEvent = "</span></span> <span class="token operator">+</span> watchedEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> content <span class="token operator">=</span> curatorFramework<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">usingWatcher</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">'/path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"监听节点内容："</span></span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 变更节点数据</span>curatorFramework<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span>workerPath<span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">"Change"</span></span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Watcher监听器是一次性的，可以在事件触发之后重复订阅</p><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">Watcher watcher <span class="token operator">=</span> null<span class="token punctuation">;</span>watcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>WatchedEvent watchedEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        curatorFramework<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">usingWatcher</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">'/path'</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"监听到的变化 watchedEvent = "</span></span> <span class="token operator">+</span> watchedEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="Curator引入Cache实现监听"><a href="#Curator引入Cache实现监听" class="headerlink" title="Curator引入Cache实现监听"></a>Curator引入Cache实现监听</h4><p>Curator引入了Cache来方便我们订阅事件。</p><ul><li>NodeCache  监控本节点的新增，删除，更新</li><li>PathChildrenCache 不会对二级子节点进行监听，只会对子节点进行监听</li><li>TreeCache 监听指定节点下所有节点的变化</li></ul><p>我这里用<code>NodeCache</code>举例子</p><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">NodeCache nodeCache <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">NodeCache</span><span class="token punctuation">(</span>curatorFramework<span class="token punctuation">,</span> workerPath<span class="token punctuation">)</span><span class="token punctuation">;</span>nodeCache<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>NodeCacheListener listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NodeCacheListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nodeChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">&#123;</span>        ChildData childData <span class="token operator">=</span> nodeCache<span class="token punctuation">.</span><span class="token function">getCurrentData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"ZNode Change, data=&#123;&#125;"</span></span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>childData<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">"Utf-8"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>nodeCache<span class="token punctuation">.</span><span class="token function">getListenable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 变更节点数据</span>curatorFramework<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span>workerPath<span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">"Change1"</span></span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span>curatorFramework<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span>workerPath<span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">"Change2"</span></span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span>curatorFramework<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span>workerPath<span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">"Change3"</span></span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10_000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>我们项目使用微服务技术对原有服务进行拆分，将接口分散到不同服务中，并将网关独立出来。服务端一部分接口需要登录才可以访问，网关需要对这部分接口和TOKEN进行校验。但是我们对需登录的接口的标记是基于注解的，方便切面拦截。拆分服务后网关是不知道哪些接口是需要校验的，最后我们借助了ZK来实现，下游服务发布时扫描代码中的接口，将需要登录的接口set到ZK中，网关启动时从ZK节点中取数据保存到内存中并订阅该节点，每次下游服务发布时触发事件，更新网关中的数据。</p><h4 id="下游服务实现"><a href="#下游服务实现" class="headerlink" title="下游服务实现"></a>下游服务实现</h4><h4 id="网关实现"><a href="#网关实现" class="headerlink" title="网关实现"></a>网关实现</h4><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.cnblogs.com/crazymakercircle/p/10228385.html">Zookeeper Curator 事件监听 </a></p><p><a href="https://zhouj000.github.io/2019/02/06/zookeeper-02/">zookeeper(二) Java API</a></p>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>中间件</tag>
      
      <tag>ZooKeeper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Docker部署Python项目</title>
    <link href="/post/ee11952c.html"/>
    <url>/post/ee11952c.html</url>
    
    <content type="html"><![CDATA[<p>日常开发Python，环境是一个让人头疼的问题，首先<code>Python2</code>和<code>Python3</code>很多语法不兼容，开发环境难免安装多个版本的Python，即使使用同一个版本Python不同项目使用不同版本的第三方包也会导致各种问题，所以开发Python都会使用虚拟环境，不同项目使用不同的环境，其实我们也可以使用Docker将不同的环境进行区分。</p><span id="more"></span><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">.├── app.py├── Dockerfile|── .gitignore└── requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这是一个简单的python项目目录，只有一个<code>app.py</code>，运行一个基于Flask编写的web服务，requirements.txt是运行该项目所需要的依赖。启动项目前我们先通过<code>pip install -r requirements.txt</code>安装必要依赖，<code>python3 app.py</code>启动项目。</p><p>app.py</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello, World!'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>现在我们创建一个容器，在容器内完成以上步骤。</p><figure><div class="code-wrapper"><pre class="line-numbers language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">FROM python:3.6# 设置工作目录WORKDIR &#x2F;app# 将当前目录的所有文件复制到工作目录内ADD . &#x2F;app# 安装依赖RUN pip install -r requirements.txt -i https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;# 启动CMD [&quot;python&quot;, &quot;app.py&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>构建镜像</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">docker build -t py-test .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>运行</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">docker run -p 9089:80  --name&#x3D;py-test py-test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">* Serving Flask app &quot;app&quot; (lazy loading)* Environment: production  WARNING: This is a development server. Do not use it in a production deployment.  Use a production WSGI server instead.* Debug mode: on* Running on http:&#x2F;&#x2F;0.0.0.0:80&#x2F; (Press CTRL+C to quit)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>好了，容器启动成功，但是这种部署方式有一个不灵活的点就是我们的代码是在容器构建的时候COPY到容器内部的，导致我们更新代码时需要重新构建容器。其实我们还可以通过<code>volume</code>将我们的代码挂载在容器内部，容器执行的其实是宿主机上的代码。</p><figure><div class="code-wrapper"><pre class="line-numbers language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">FROM python:3.6# 设置工作目录WORKDIR &#x2F;app# 将requirements.txt复制到工作目录，方便操作ADD .&#x2F;requirements.txt &#x2F;app&#x2F;requirements.txt# 安装依赖RUN pip install -r requirements.txt -i https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;# 启动CMD [&quot;python&quot;, &quot;app.py&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>启动容器时指定挂载路径，将我们当前目录挂载到/app</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">docker run -p 9089:80 -v $PWD&#x2F;:&#x2F;app -d --name&#x3D;py-test  py-test;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>我是以DEBUG方式启动的web服务，如代码有变更，服务会自动加载，我们现在更改一下app.py的代码保存一下，可以看到服务器自动重启了</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">* Detected change in &#39;&#x2F;app&#x2F;app.py&#39;, reloading* Restarting with stat* Debugger is active!* Debugger PIN: 286-043-277<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring编程式事务原理</title>
    <link href="/post/65703737.html"/>
    <url>/post/65703737.html</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>类型</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED</td><td>支持当前事务 如果不存，就建一个（默认的）</td><td>A,B，如果A有事务，则B使用A事务。如果A没有事务，则B开启一个新的事务。（A,B在同一个事务中）</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>支持当前事务 如果不存在，就不使用事务</td><td>A,B，如果A有事务，则B就使用A的事务。如果A没有事务，则B就不使用事务</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>支持当前事务 如果不存在，抛出异常</td><td>A,B，如果A有事务，则B就使用A的事务。如果A没有事务，则B抛出异常</td></tr><tr><td>PROPAGATION_REQUIRES_NEW</td><td>如果有事务存在 挂起当前事务，创建一个新的事务</td><td>A,B，如果A有事务，B将A的事务挂起，并重新创建一个事务（A，B不在一个事务中，两个事务互不影响）</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>以非事务方式运行 如果有事务存在，挂起当前事务</td><td>A,B，非事务方式运行，A有事务就挂起事务</td></tr><tr><td>PROPAGATION_NEVER</td><td>以非事务方式运行 如果有事务存在，抛出异常</td><td>总是以非事务运行</td></tr><tr><td>PROPAGATION_NESTED</td><td>如果当前事务存在，则嵌套事务执行</td><td>基于SavePonit技术。（保存点） A,B，A有事务，A执行之后，将A事务执行之后的内容保存到SavePonit。B事务有异常的情况，用户需要自己设置事务是提交还是回滚到保存点</td></tr></tbody></table><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">DataSourceTransactionManager</span> dstManager<span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">DefaultTransactionDefinition</span> def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultTransactionDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  def<span class="token punctuation">.</span><span class="token function">setPropagationBehavior</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PROPAGATION_REQUIRES_NEW</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TransactionStatus</span> transaction<span class="token operator">=</span> dstManager<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span>def<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span><span class="token punctuation">&#123;</span>    userDao<span class="token punctuation">.</span><span class="token function">updateTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    dstManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  dstManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>DataSourceTransactionManager</code>是<code>PlatformTransactionManager</code>的一个实现。<code>PlatformTransactionManager</code>是Spring事务处理抽象层中的管理器。</p><p>统一一致的事务抽象是Spring框架的一大优势，无论是全局事务还是本地事务，JTA、JDBC、Hibernate还是JPA，Spring都使用统一的编程模型，使得应用程序可以很容易地在全局事务与本地事务，或者不同的事务框架之间进行切换。下图是Spring事务抽象的核心类图：</p><p><img src="https://img.yjll.site/img/PlatformTransactionManager.png" alt="PlatformTransactionManager"></p><p>PlatformTransactionManager：事务管理器<br>getTransaction方法：事务获取操作，根据事务属性定义，获取当前事务或者创建新事物；<br>commit方法：事务提交操作，注意这里所说的提交并非直接提交事务，而是根据当前事务状态执行提交或者回滚操作；<br>rollback方法：事务回滚操作，同样，也并非一定直接回滚事务，也有可能只是标记事务为只读，等待其他调用方执行回滚。</p><p>TransactionDefinition：事务属性定义<br>getPropagationBehavior方法：返回事务的传播属性，默认是PROPAGATION_REQUIRED；<br>getIsolationLevel方法：返回事务隔离级别，事务隔离级别只有在创建新事务时才有效，也就是说只对应传播属性PROPAGATION_REQUIRED和PROPAGATION_REQUIRES_NEW；<br>getTimeout方法：返回事务超时时间，以秒为单位，同样只有在创建新事务时才有效；<br>isReadOnly方法：是否优化为只读事务，支持这项属性的事务管理器会将事务标记为只读，只读事务不允许有写操作，不支持只读属性的事务管理器需要忽略这项设置，这一点跟其他事务属性定义不同，针对其他不支持的属性设置，事务管理器应该抛出异常。<br>getName方法：返回事务名称，声明式事务中默认值为“类的完全限定名.方法名”。</p><p>TransactionStatus：当前事务状态<br>isNewTransaction方法：当前方法是否创建了新事务（区别于使用现有事务以及没有事务）；<br>hasSavepoint方法：在嵌套事务场景中，判断当前事务是否包含保存点；<br>setRollbackOnly和isRollbackOnly方法：只读属性设置（主要用于标记事务，等待回滚）和查询；<br>flush方法：刷新底层会话中的修改到数据库，一般用于刷新如Hibernate/JPA的会话，是否生效由具体事务资源实现决定；<br>isCompleted方法：判断当前事务是否已完成（已提交或者已回滚）。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">TransactionStatus</span> <span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">TransactionDefinition</span> definition<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建DataSourceTransactionObject</span><span class="token class-name">Object</span> transaction <span class="token operator">=</span> <span class="token function">doGetTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Cache debug flag to avoid repeated checks.</span><span class="token keyword">boolean</span> debugEnabled <span class="token operator">=</span> logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>definition <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Use defaults if no transaction definition given.</span>definition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultTransactionDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 已有事务逻辑，通过handleExistingTransaction方法处理</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isExistingTransaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Existing transaction found -> check propagation behavior to find out how to behave.</span><span class="token keyword">return</span> <span class="token function">handleExistingTransaction</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Check definition settings for new transaction.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">TIMEOUT_DEFAULT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidTimeoutException</span><span class="token punctuation">(</span><span class="token string">"Invalid transaction timeout"</span><span class="token punctuation">,</span> definition<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 以下是当前无事务的情况</span>    <span class="token comment">// - PROPAGATION_MANDATORY：当前事务不存在，抛出异常</span><span class="token comment">// No existing transaction found -> check propagation behavior to find out how to proceed.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PROPAGATION_MANDATORY</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span><span class="token string">"No existing transaction found for transaction marked with propagation 'mandatory'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 无事务便创建事务</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PROPAGATION_REQUIRED</span> <span class="token operator">||</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PROPAGATION_REQUIRES_NEW</span> <span class="token operator">||</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PROPAGATION_NESTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SuspendedResourcesHolder</span> suspendedResources <span class="token operator">=</span> <span class="token function">suspend</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Creating new transaction with name ["</span> <span class="token operator">+</span> definition<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]: "</span> <span class="token operator">+</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">SYNCHRONIZATION_NEVER</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DefaultTransactionStatus</span> status <span class="token operator">=</span> <span class="token function">newTransactionStatus</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">doBegin</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">prepareSynchronization</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> status<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">throw</span> ex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 无事务不需创建</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// Create "empty" transaction: no actual transaction, but potentially synchronization.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">ISOLATION_DEFAULT</span> <span class="token operator">&amp;&amp;</span> logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Custom isolation level specified but no actual transaction initiated; "</span> <span class="token operator">+</span><span class="token string">"isolation level will effectively be ignored: "</span> <span class="token operator">+</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">SYNCHRONIZATION_ALWAYS</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">prepareTransactionStatus</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span>DataSourceTransactionManager</span>#doGetTransaction<span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">doGetTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">DataSourceTransactionObject</span> txObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>txObject<span class="token punctuation">.</span><span class="token function">setSavepointAllowed</span><span class="token punctuation">(</span><span class="token function">isNestedTransactionAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ConnectionHolder</span> conHolder <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">ConnectionHolder</span><span class="token punctuation">)</span> <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span>conHolder<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> txObject<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span>DataSourceTransactionManager</span>#isExistingTransaction<span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isExistingTransaction</span><span class="token punctuation">(</span><span class="token class-name">Object</span> transaction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">DataSourceTransactionObject</span> txObject <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DataSourceTransactionObject</span><span class="token punctuation">)</span> transaction<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">hasConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTransactionActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>TransactionSynchronizationManager</code> 是事务同步管理器，TransactionSynchronizationManager通过ThreadLocal对象在当前线程记录了resources和synchronizations属性。resources是一个HashMap，用于记录当前参与事务的事务资源，方便进行事务同步，在DataSourceTransactionManager的例子中就是以dataSource作为key，保存了数据库连接，这样在同一个线程中，不同的方法调用就可以通过dataSource获取相同的数据库连接，从而保证所有操作在一个事务中进行。</p><p>org.springframework.transaction.support.AbstractPlatformTransactionManager#handleExistingTransaction</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">TransactionStatus</span> <span class="token function">handleExistingTransaction</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span> definition<span class="token punctuation">,</span> <span class="token class-name">Object</span> transaction<span class="token punctuation">,</span> <span class="token keyword">boolean</span> debugEnabled<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">TransactionException</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// PROPAGATION_NEVER 直接抛出异常</span><span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PROPAGATION_NEVER</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span><span class="token string">"Existing transaction found for transaction marked with propagation 'never'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// PROPAGATION_NOT_SUPPORTED suspend挂起当前事务，当前方法不使用事务</span><span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PROPAGATION_NOT_SUPPORTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Suspending current transaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Object</span> suspendedResources <span class="token operator">=</span> <span class="token function">suspend</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">SYNCHRONIZATION_ALWAYS</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">prepareTransactionStatus</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// PROPAGATION_REQUIRES_NEW suspend挂起当前事务，doBegin创建一个新事务</span><span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PROPAGATION_REQUIRES_NEW</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Suspending current transaction, creating new transaction with name ["</span> <span class="token operator">+</span>definition<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">SuspendedResourcesHolder</span> suspendedResources <span class="token operator">=</span> <span class="token function">suspend</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">SYNCHRONIZATION_NEVER</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DefaultTransactionStatus</span> status <span class="token operator">=</span> <span class="token function">newTransactionStatus</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">doBegin</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">prepareSynchronization</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> status<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> beginEx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">resumeAfterBeginException</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">,</span> beginEx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">throw</span> beginEx<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// PROPAGATION_NESTED 嵌套事务</span><span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PROPAGATION_NESTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNestedTransactionAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NestedTransactionNotSupportedException</span><span class="token punctuation">(</span><span class="token string">"Transaction manager does not allow nested transactions by default - "</span> <span class="token operator">+</span><span class="token string">"specify 'nestedTransactionAllowed' property with value 'true'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Creating nested transaction with name ["</span> <span class="token operator">+</span> definition<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">useSavepointForNestedTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Create savepoint within existing Spring-managed transaction,</span><span class="token comment">// through the SavepointManager API implemented by TransactionStatus.</span><span class="token comment">// Usually uses JDBC 3.0 savepoints. Never activates Spring synchronization.</span><span class="token class-name">DefaultTransactionStatus</span> status <span class="token operator">=</span><span class="token function">prepareTransactionStatus</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>status<span class="token punctuation">.</span><span class="token function">createAndHoldSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> status<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>     <span class="token comment">// PROPAGATION_REQUIRED、PROPAGATION_SUPPORTS、PROPAGATION_MANDATORY 使用当前事务</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// Nested transaction through nested begin and commit/rollback calls.</span><span class="token comment">// Usually only for JTA: Spring synchronization might get activated here</span><span class="token comment">// in case of a pre-existing JTA transaction.</span><span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">SYNCHRONIZATION_NEVER</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DefaultTransactionStatus</span> status <span class="token operator">=</span> <span class="token function">newTransactionStatus</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">doBegin</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">prepareSynchronization</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> status<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Assumably PROPAGATION_SUPPORTS or PROPAGATION_REQUIRED.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Participating in existing transaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isValidateExistingTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">ISOLATION_DEFAULT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Integer</span> currentIsolationLevel <span class="token operator">=</span> <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">getCurrentTransactionIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>currentIsolationLevel <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> currentIsolationLevel <span class="token operator">!=</span> definition<span class="token punctuation">.</span><span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Constants</span> isoConstants <span class="token operator">=</span> <span class="token class-name">DefaultTransactionDefinition</span><span class="token punctuation">.</span>constants<span class="token punctuation">;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span><span class="token string">"Participating transaction with definition ["</span> <span class="token operator">+</span>definition <span class="token operator">+</span> <span class="token string">"] specifies isolation level which is incompatible with existing transaction: "</span> <span class="token operator">+</span><span class="token punctuation">(</span>currentIsolationLevel <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span>isoConstants<span class="token punctuation">.</span><span class="token function">toCode</span><span class="token punctuation">(</span>currentIsolationLevel<span class="token punctuation">,</span> <span class="token class-name">DefaultTransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">PREFIX_ISOLATION</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token string">"(unknown)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>definition<span class="token punctuation">.</span><span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">isCurrentTransactionReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span><span class="token string">"Participating transaction with definition ["</span> <span class="token operator">+</span>definition <span class="token operator">+</span> <span class="token string">"] is not marked as read-only but existing transaction is"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">SYNCHRONIZATION_NEVER</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">prepareTransactionStatus</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><a href="https://zhuanlan.zhihu.com/p/54067384">【技术干货】Spring事务原理一探</a></p><p><a href="https://blog.csdn.net/oDeviloo/article/details/101757711">spring事务传播性源码解析</a></p><p><a href="https://my.oschina.net/marvelcode/blog/3195379">Spring事务源码解析</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Transaction</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python通过跳板机连接远程MySQL</title>
    <link href="/post/adfcf5ef.html"/>
    <url>/post/adfcf5ef.html</url>
    
    <content type="html"><![CDATA[<p>一般公司的数据库在一个远程服务器里，而这个服务器需要链接跳板机才可以访问，常用的数据库客户端工具都支持配置SSH隧道，可以通过SSH隧道连接远程服务。但python脚本如何访问数据库呢，我们可以借助<code>sshtunnel</code>这个库来实现。</p><span id="more"></span><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sshtunnel <span class="token keyword">import</span> SSHTunnelForwarder<span class="token keyword">import</span> records<span class="token keyword">with</span> SSHTunnelForwarder<span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token string">'jump-server'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        ssh_username<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>        ssh_pkey<span class="token operator">=</span><span class="token string">r"C:\Users\LH\.ssh\id_rsa"</span><span class="token punctuation">,</span>        remote_bind_address<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'target-server'</span><span class="token punctuation">,</span> <span class="token number">3306</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        local_bind_address<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">3306</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span> <span class="token keyword">as</span> server<span class="token punctuation">:</span>        db <span class="token operator">=</span> records<span class="token punctuation">.</span>Database<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'mysql+pymysql://root:pwd@</span><span class="token interpolation"><span class="token punctuation">&#123;</span>server<span class="token punctuation">.</span>local_bind_address<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>server<span class="token punctuation">.</span>local_bind_address<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">/code'</span></span><span class="token punctuation">)</span>    result <span class="token operator">=</span> db<span class="token punctuation">.</span>query<span class="token punctuation">(</span><span class="token string">'select name from base_areas limit 3'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>as_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>sshtunnel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>聊一聊Mybatis-Spring都帮我们做了什么</title>
    <link href="/post/112d5fa0.html"/>
    <url>/post/112d5fa0.html</url>
    
    <content type="html"><![CDATA[<p>MyBatis-Spring 会帮助我们将 MyBatis 代码无缝地整合到 Spring 中。它将允许 MyBatis 参与到 Spring 的事务管理之中，创建映射器 mapper 和 SqlSession 并注入到 bean 中，本文将跟随Mybatis-Spring 的源码，一步步探究是它是如何实现的。</p><span id="more"></span><p>我们先进行一个必要的bean配置。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"com.xxx.goods.dao"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> sqlSessionFactoryRef <span class="token operator">=</span> <span class="token string">"goodsSqlSessionFactory"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsDataSourceConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">Environment</span> env<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"goodsDataSource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.goods"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">initDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">DataSourceBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"goodsTransactionManager"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token keyword">public</span> <span class="token class-name">DataSourceTransactionManager</span> <span class="token function">transactionManager</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"goodsSqlSessionFactory"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">initSqlSessionFactory</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">SqlSessionFactoryBean</span> sessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sessionFactory<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        sessionFactory<span class="token punctuation">.</span><span class="token function">setMapperLocations</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"mybatis.goods.mapper-locations"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sessionFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Mybatis原生写法"><a href="#Mybatis原生写法" class="headerlink" title="Mybatis原生写法"></a>Mybatis原生写法</h3><p>我这里引用<a href="https://mybatis.org/mybatis-3/zh/getting-started.html">Mybatis官方文档</a>中的说明</p><ul><li><code>SqlSessionFactory</code> SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。 使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，多次重建 SqlSessionFactory 被视为一种代码“坏习惯”。因此 SqlSessionFactory 的最佳作用域是应用作用域。 有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。</li></ul><ul><li><code>SqlSession</code> 每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。 绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的 HttpSession。 如果你现在正在使用一种 Web 框架，考虑将 SqlSession 放在一个和 HTTP 请求相似的作用域中。 换句话说，每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它。 这个关闭操作很重要，为了确保每次都能执行关闭操作，你应该把这个关闭操作放到 finally 块中。 下面的示例就是一个确保 SqlSession 关闭的标准模式：</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">SqlSession</span> session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 你的应用逻辑代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><code>Mapper</code> 映射器是一些绑定映射语句的接口。映射器接口的实例是从 SqlSession 中获得的。虽然从技术层面上来讲，任何映射器实例的最大作用域与请求它们的 SqlSession 相同。但方法作用域才是映射器实例的最合适的作用域。 也就是说，映射器实例应该在调用它们的方法中被获取，使用完毕之后即可丢弃。 映射器实例并不需要被显式地关闭。尽管在整个请求作用域保留映射器实例不会有什么问题，但是你很快会发现，在这个作用域上管理太多像 SqlSession 的资源会让你忙不过来。 因此，最好将映射器放在方法作用域内。就像下面的例子一样：</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">SqlSession</span> session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">BlogMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">BlogMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 你的应用逻辑代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="依赖注入框架"><a href="#依赖注入框架" class="headerlink" title="依赖注入框架"></a>依赖注入框架</h3><p>依赖注入框架可以创建线程安全的、基于事务的 SqlSession 和映射器，并将它们直接注入到你的 bean 中，因此可以直接忽略它们的生命周期。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我们分析一下<code>Mybatis-Spring</code>如何做到的</p><p>Mybatis配置时我们使用了<code>@MapperScan</code>注解，底层会使用<code>MapperScannerConfigurer</code>进行扫描并将Mapper注册到Spring容器中，核心代码要看<code>org.mybatis.spring.mapper.ClassPathMapperScanner#processBeanDefinitions</code>这个方法。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">></span></span> beanDefinitions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">GenericBeanDefinition</span> definition<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionHolder</span> holder <span class="token operator">:</span> beanDefinitions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    definition <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">GenericBeanDefinition</span><span class="token punctuation">)</span> holder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这两句代码时关键，这里将 beanClass 进行了重新设置，设置为了 MapperFactoryBean，并且将原来接口 class 设置为构造方法参数</span>    definition<span class="token punctuation">.</span><span class="token function">getConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addGenericArgumentValue</span><span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// issue #59</span>    definition<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mapperFactoryBean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    definition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"addToConfig"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>addToConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置 sqlSessionFactory，如果有配置</span>    <span class="token keyword">boolean</span> explicitFactoryUsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactoryBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      definition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"sqlSessionFactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeBeanReference</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactoryBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      explicitFactoryUsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      definition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"sqlSessionFactory"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      explicitFactoryUsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 设置 sqlSessionTemplate，如果有配置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionTemplateBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      definition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"sqlSessionTemplate"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeBeanReference</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionTemplateBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      explicitFactoryUsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionTemplate <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      definition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"sqlSessionTemplate"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>      explicitFactoryUsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果 sqlSessionFactory &amp; sqlSessionTemplate 都没有指定，那么启用类型自动注入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>explicitFactoryUsed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      definition<span class="token punctuation">.</span><span class="token function">setAutowireMode</span><span class="token punctuation">(</span><span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">.</span><span class="token constant">AUTOWIRE_BY_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>方法中<code>this.mapperFactoryBean.getClass()</code>会固定返回<code>org.mybatis.spring.mapper.MapperFactoryBean</code>，<code>definition.getBeanClassName()</code>返回的Mapper的类名作为<code>MapperFactoryBean</code>的属性。<br>Spring初始化进行装配时会调用<code>MapperFactoryBean</code>的<code>getObject()</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SqlSession</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSession<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mapperInterface<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>看到这，就知道了怎么将Mapper声明成bean，但是getSqlSession()返回的是属性中的sqlSession，Mybatis原生的写法中sqlSession不是线程安全的，那Mybatis-Spring如何做到用一个sqlSession处理多个线程的请求？我们继续看这个sqlSession有什么特别的。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSqlSessionFactory</span><span class="token punctuation">(</span><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>externalSqlSession<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSession <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">(</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>此处使用的<code>sqlSession</code>并非是Mybatis的<code>DefaultSqlSession</code>，而是<code>Mybatis-Spring</code>提供的<code>SqlSessionTemplate</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">(</span><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">,</span> <span class="token class-name">ExecutorType</span> executorType<span class="token punctuation">,</span>    <span class="token class-name">PersistenceExceptionTranslator</span> exceptionTranslator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">notNull</span><span class="token punctuation">(</span>sqlSessionFactory<span class="token punctuation">,</span> <span class="token string">"Property 'sqlSessionFactory' is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">notNull</span><span class="token punctuation">(</span>executorType<span class="token punctuation">,</span> <span class="token string">"Property 'executorType' is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>executorType <span class="token operator">=</span> executorType<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>exceptionTranslator <span class="token operator">=</span> exceptionTranslator<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionProxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SqlSession</span><span class="token punctuation">)</span> <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>      <span class="token class-name">SqlSessionFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token class-name">SqlSession</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">SqlSessionInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionProxy<span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">selectOne</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>SqlSessionTemplate</code>虽然是<code>SqlSession</code>的实现，但内部真正调用并非是他自己，而是生成了一个代理类，我们再看一下代理。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">SqlSessionInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span>        <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory<span class="token punctuation">,</span>        <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>executorType<span class="token punctuation">,</span>        <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>exceptionTranslator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSqlSessionTransactional</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// force commit even on non-dirty sessions because some databases require</span>        <span class="token comment">// a commit/rollback before calling close()</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Throwable</span> unwrapped <span class="token operator">=</span> <span class="token function">unwrapThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>exceptionTranslator <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> unwrapped <span class="token keyword">instanceof</span> <span class="token class-name">PersistenceException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// release the connection to avoid a deadlock if the translator is no loaded. See issue #22</span>        <span class="token function">closeSqlSession</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Throwable</span> translated <span class="token operator">=</span> <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>exceptionTranslator<span class="token punctuation">.</span><span class="token function">translateExceptionIfPossible</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PersistenceException</span><span class="token punctuation">)</span> unwrapped<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>translated <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          unwrapped <span class="token operator">=</span> translated<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">throw</span> unwrapped<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>sqlSession <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">closeSqlSession</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>sqlSessionProxy</code>运行时，每次都会判断当前事务中是否有SqlSession，没有就重新创建，这样可以保证多线程访问不会出现问题，也可以保证事务的传递。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Mybatis-Spring代码量不大，但实现比较巧妙，如果对Mapper注入和Spring事务感兴趣可以深入了解一下。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://mybatis.org/mybatis-3/">MyBatis.org</a></p><p><a href="http://mybatis.org/spring/zh/getting-started.html">mybatis-spring</a></p><p><a href="https://my.oschina.net/u/174366/blog/1788966">mybatis MapperScannerConfigurer 源码剖析</a></p><p><a href="https://juejin.im/post/6844904033610629128">Mybatis源码系列3-三种SqlSession的区别</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python logging模块日志流处理流程</title>
    <link href="/post/2c25ac60.html"/>
    <url>/post/2c25ac60.html</url>
    
    <content type="html"><![CDATA[<p><code>logger</code>是Python标准库的一部分，根据<a href="https://www.python.org/dev/peps/pep-0282">PEP 282</a>中描述，设计时也参考了Java的日志，所以处理流程上和jul、Log4j有跟多相似之处。</p><span id="more"></span><h3 id="logging模块的四大组件"><a href="#logging模块的四大组件" class="headerlink" title="logging模块的四大组件"></a>logging模块的四大组件</h3><table><thead><tr><th>组件名称</th><th>对应类名</th><th>功能描述</th></tr></thead><tbody><tr><td>日志器</td><td>Logger</td><td>提供了应用程序可一直使用的接口</td></tr><tr><td>处理器</td><td>Handler</td><td>将logger创建的日志记录发送到合适的目的输出</td></tr><tr><td>过滤器</td><td>Filter</td><td>提供了更细粒度的控制工具来决定输出哪条日志记录，丢弃哪条日志记录</td></tr><tr><td>格式器</td><td>Formatter</td><td>决定日志记录的最终输出格式</td></tr></tbody></table><p>logging模块就是通过这些组件来完成日志处理的，上面所使用的logging模块级别的函数也是通过这些组件对应的类来实现的。</p><p>这些组件之间的关系描述：</p><p>日志器（logger）需要通过处理器（handler）将日志信息输出到目标位置，如：文件、sys.stdout、网络等。不同的处理器（handler）可以将日志输出到不同的位置。日志器（logger）可以设置多个处理器（handler）将同一条日志记录输出到不同的位置。每个处理器（handler）都可以设置自己的过滤器（filter）实现日志过滤，从而只保留感兴趣的日志。每个处理器（handler）都可以设置自己的格式器（formatter）实现同一条日志以不同的格式输出到不同的地方。</p><p>简单点说就是：日志器（logger）是入口，真正干活儿的是处理器（handler），处理器（handler）还可以通过过滤器（filter）和格式器（formatter）对要输出的日志内容做过滤和格式化等处理操作。</p><p>如果和Logback类比的话这几个组件分别对应的是 <code>Logger</code>,<code>Appender</code>,<code>Filter</code>及<code>Layout</code></p><h3 id="使用yaml进行日志配置"><a href="#使用yaml进行日志配置" class="headerlink" title="使用yaml进行日志配置"></a>使用yaml进行日志配置</h3><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token key atrule">formatters</span><span class="token punctuation">:</span>  <span class="token key atrule">simple</span><span class="token punctuation">:</span>    <span class="token key atrule">format</span><span class="token punctuation">:</span> <span class="token string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span><span class="token key atrule">handlers</span><span class="token punctuation">:</span>  <span class="token key atrule">console</span><span class="token punctuation">:</span>    <span class="token key atrule">class</span><span class="token punctuation">:</span> logging.StreamHandler    <span class="token key atrule">level</span><span class="token punctuation">:</span> DEBUG    <span class="token key atrule">formatter</span><span class="token punctuation">:</span> simple  <span class="token key atrule">file</span><span class="token punctuation">:</span>    <span class="token key atrule">class</span><span class="token punctuation">:</span> logging.FileHandler    <span class="token key atrule">filename</span><span class="token punctuation">:</span> logging.log    <span class="token key atrule">encoding</span><span class="token punctuation">:</span> utf<span class="token punctuation">-</span><span class="token number">8</span>    <span class="token key atrule">level</span><span class="token punctuation">:</span> INFO    <span class="token key atrule">formatter</span><span class="token punctuation">:</span> simple  <span class="token key atrule">loggers</span><span class="token punctuation">:</span>  <span class="token key atrule">simpleLogger</span><span class="token punctuation">:</span>    <span class="token key atrule">level</span><span class="token punctuation">:</span> INFO    <span class="token key atrule">handlers</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>console<span class="token punctuation">,</span>file<span class="token punctuation">]</span>    <span class="token key atrule">propagate</span><span class="token punctuation">:</span> no<span class="token key atrule">root</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span> INFO  <span class="token key atrule">handlers</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>console<span class="token punctuation">]</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token punctuation">.</span>config<span class="token keyword">import</span> yamlconfig <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'log.yaml'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    config <span class="token operator">=</span> yaml<span class="token punctuation">.</span>safe_load<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    logging<span class="token punctuation">.</span>config<span class="token punctuation">.</span>dictConfig<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'simpleLogger'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    logger <span class="token operator">=</span> getLogger<span class="token punctuation">(</span><span class="token punctuation">)</span>        logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'debug'</span><span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'info:%s'</span><span class="token punctuation">,</span><span class="token string">'message'</span><span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>simpleLogger</code>配置的日志级别为INFO，debug的日志没有打印</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">2020-11-02 16:22:09,194 - simpleLogger - INFO - info:message2020-11-02 16:22:09,195 - simpleLogger - ERROR - error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.cnblogs.com/yyds/p/6901864.html">Python之日志处理（logging模块）</a></p><p><a href="https://logbackcn.gitbook.io/logback/">logback 中文手册</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>log</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DataX同步全量Mqsql数据到Elasticsearch</title>
    <link href="/post/6a3f5dff.html"/>
    <url>/post/6a3f5dff.html</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/alibaba/DataX">DataX</a> 是阿里巴巴集团内被广泛使用的离线数据同步工具/平台，实现包括 MySQL、SQL Server、Oracle、PostgreSQL、HDFS、Hive、HBase、OTS、ODPS 等各种异构数据源之间高效的数据同步功能。</p><p>DataX本身作为数据同步框架，将不同数据源的同步抽象为从源头数据源读取数据的Reader插件，以及向目标端写入数据的Writer插件，理论上DataX框架可以支持任意数据源类型的数据同步工作。同时DataX插件体系作为一套生态系统, 每接入一套新数据源该新加入的数据源即可实现和现有的数据源互通。</p><span id="more"></span><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>官方提供的二进制包缺少必要的组件，我们需要下载源码自己编译</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;codeload.github.com&#x2F;alibaba&#x2F;DataX&#x2F;zip&#x2F;master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>解压后编辑pom.xml，只保留部分必要module和mysql，es即可</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>transformer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- reader --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>mysqlreader<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- writer --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>elasticsearchwriter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- common support module --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>plugin-rdbms-util<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>plugin-unstructured-storage-util<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>hbase20xsqlreader<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>hbase20xsqlwriter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>kuduwriter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>更改配置后打包</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">mvn -U clean package assembly:assembly -Dmaven.test.skip&#x3D;truels .&#x2F;target&#x2F;datax&#x2F;datax&#x2F;binconfjoblibloglog_perfpluginscripttmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><!-- ### 设置动态模板开始同步数据前，在es中创建一个动态模板<figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUT _template/hkey_transferbill<span class="token punctuation">&#123;</span>    <span class="token property">"index_patterns"</span><span class="token operator">:</span><span class="token string">"hkey_transferbill"</span><span class="token punctuation">,</span>    <span class="token property">"settings"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token property">"number_of_shards"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"number_of_replicas"</span><span class="token operator">:</span><span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"mappings"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token property">"data"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token property">"dynamic_templates"</span><span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token property">"keyword_field"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                        <span class="token property">"unmatch"</span><span class="token operator">:</span><span class="token string">"*Name"</span><span class="token punctuation">,</span>                        <span class="token property">"match_mapping_type"</span><span class="token operator">:</span><span class="token string">"string"</span><span class="token punctuation">,</span>                        <span class="token property">"mapping"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                            <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span>                    <span class="token property">"text_fields"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                        <span class="token property">"match"</span><span class="token operator">:</span><span class="token string">"*Name"</span><span class="token punctuation">,</span>                        <span class="token property">"match_mapping_type"</span><span class="token operator">:</span><span class="token string">"string"</span><span class="token punctuation">,</span>                        <span class="token property">"mapping"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                            <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>                            <span class="token property">"fields"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                                <span class="token property">"raw"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                                    <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span>                                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token property">"rowkey"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                    <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"age"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                    <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p> –&gt;</p><h3 id="编写同步配置文件"><a href="#编写同步配置文件" class="headerlink" title="编写同步配置文件"></a>编写同步配置文件</h3><p><a href="https://github.com/alibaba/DataX/blob/master/mysqlreader/doc/mysqlreader.md">MysqlReader 插件文档</a></p><p><a href="https://github.com/alibaba/DataX/blob/master/elasticsearchwriter/doc/elasticsearchwriter.md">ElasticSearchWriter 插件文档</a></p><p>同步时间类型问题，部分mysql中时间字段为空，导入到ES中时间变成了系统时间，我在导入时将ES中column的type更改为<code>text</code>解决了这个问题。</p><p><code>setting.speed.channel</code>为并发数，<code>setting.speed.byte</code>是最大同步字节数</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"job"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token property">"setting"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token property">"speed"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token property">"channel"</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>                <span class="token property">"byte"</span><span class="token operator">:</span> <span class="token number">104857600</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"content"</span><span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"reader"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                    <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"mysqlreader"</span><span class="token punctuation">,</span>                    <span class="token property">"parameter"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                        <span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"root"</span><span class="token punctuation">,</span>                        <span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"test"</span><span class="token punctuation">,</span>                        <span class="token property">"column"</span><span class="token operator">:</span><span class="token punctuation">[</span>                            <span class="token string">"code"</span><span class="token punctuation">,</span>                            <span class="token string">"internal_code"</span><span class="token punctuation">,</span>                            <span class="token string">"internal_code_md5"</span>                        <span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token property">"connection"</span><span class="token operator">:</span><span class="token punctuation">[</span>                            <span class="token punctuation">&#123;</span>                                <span class="token property">"jdbcUrl"</span><span class="token operator">:</span><span class="token punctuation">[</span>                                    <span class="token string">"jdbc:mysql://192.168.1.200:3306/test"</span>                                <span class="token punctuation">]</span><span class="token punctuation">,</span>                                <span class="token property">"table"</span><span class="token operator">:</span><span class="token punctuation">[</span>                                    <span class="token string">"code_t"</span>                                <span class="token punctuation">]</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token property">"writer"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                    <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"elasticsearchwriter"</span><span class="token punctuation">,</span>                    <span class="token property">"parameter"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                        <span class="token property">"endpoint"</span><span class="token operator">:</span><span class="token string">"http://192.168.1.200:9200"</span><span class="token punctuation">,</span>                        <span class="token property">"accessId"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>                        <span class="token property">"accessKey"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span>                        <span class="token property">"index"</span><span class="token operator">:</span><span class="token string">"code_t"</span><span class="token punctuation">,</span>                        <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"_doc"</span><span class="token punctuation">,</span>                        <span class="token property">"cleanup"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token property">"dynamic"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token property">"batchSize"</span><span class="token operator">:</span><span class="token number">5000</span><span class="token punctuation">,</span>                        <span class="token property">"splitter"</span><span class="token operator">:</span><span class="token string">","</span><span class="token punctuation">,</span>                        <span class="token property">"column"</span><span class="token operator">:</span><span class="token punctuation">[</span>                            <span class="token punctuation">&#123;</span>                                <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"code"</span><span class="token punctuation">,</span>                                <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"long"</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                            <span class="token punctuation">&#123;</span>                                <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"internal_code"</span><span class="token punctuation">,</span>                                <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                            <span class="token punctuation">&#123;</span>                                <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"internal_code_md5"</span><span class="token punctuation">,</span>                                <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>dynamic</code>设置为true可使用ES自带的动态模版。ES自带的模板会对String类型做特殊处理，映射成<code>text</code>类型，并添加<code>keyword</code>类型的属性</p><p>如</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json">    <span class="token property">"internal_code"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>    <span class="token property">"fields"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"keyword"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"keyword"</span><span class="token punctuation">,</span>        <span class="token property">"ignore_above"</span> <span class="token operator">:</span> <span class="token number">256</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>mysqlreader</code> 中的列可以使用<code>*</code>代替，<code>elasticsearchwriter</code>中的<code>column</code>必填还要指定对应的类型，字段多的话处理起来很麻烦，我这里写了一个脚本来处理。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span>  records <span class="token keyword">import</span> Databasedata_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'int'</span><span class="token punctuation">:</span><span class="token string">'integer'</span><span class="token punctuation">,</span><span class="token string">'bigint'</span><span class="token punctuation">:</span><span class="token string">'long'</span><span class="token punctuation">,</span><span class="token string">'char'</span><span class="token punctuation">:</span><span class="token string">'keyword'</span><span class="token punctuation">,</span><span class="token string">'datetime'</span><span class="token punctuation">:</span><span class="token string">'keyword'</span><span class="token punctuation">,</span><span class="token string">'varchar'</span><span class="token punctuation">:</span><span class="token string">'keyword'</span><span class="token punctuation">&#125;</span>db<span class="token punctuation">:</span>Database <span class="token operator">=</span> common_connection<span class="token punctuation">.</span>getProDB<span class="token punctuation">(</span><span class="token punctuation">)</span>result <span class="token operator">=</span> db<span class="token punctuation">.</span>query<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''        select column_name as 'name',data_type as 'type' from information_schema.columns where table_name='code_t'    '''</span><span class="token punctuation">)</span>row_dict <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span>as_dict<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">for</span> row <span class="token keyword">in</span> row_dict<span class="token punctuation">:</span>    type_str <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span>    row<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data_dict<span class="token punctuation">[</span>type_str<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>row_dict<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>数据库封装使用的是<code>records</code></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>运行需要python环境，官方推荐2.6，我本地装的是2.7，实测可以正常使用</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">python datax.py .&#x2F;es.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://blog.csdn.net/Zsigner/article/details/108362724">【DataX 增量同步】Mysql 同步数据到 es（Elasticsearch）</a></p><p><a href="https://blog.csdn.net/ASN_forever/article/details/106340961">datax从mysql同步数据到elasticsearch（使用es的动态模板）</a></p>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Elasticsearch</tag>
      
      <tag>Mysql</tag>
      
      <tag>DataX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MacOS上使用OpenEmu玩怀旧游戏</title>
    <link href="/post/12c7a153.html"/>
    <url>/post/12c7a153.html</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.yjll.site/img/OpenEmu.png" alt="OpenEmu"></p><p>OpenEmu是MacOS上的开源项目模拟器项目，它整合了几乎全部主流的游戏机平台，你可以在mac系统上畅玩FC/NES、SFC/SNES、N64、PlayStation、GameBoy等游戏。</p><h3 id="下载模拟器"><a href="#下载模拟器" class="headerlink" title="下载模拟器"></a>下载模拟器</h3><p>官网：<a href="http://openemu.org">http://openemu.org</a></p><p>注意一定要下载里面的Experimental版本，正式版不支持Arcade街机游戏。</p><h3 id="下载核心"><a href="#下载核心" class="headerlink" title="下载核心"></a>下载核心</h3><p><img src="https://img.yjll.site/img/openemu_setting_core.jpg" alt="openemu_setting_core"></p><p>打开后在核心中下载对应的游戏核心，由于源在国外，访问不是很稳定，可以借助梯子解决。可以去单独下载核心core，放到指定位置<code>~/Library/Application Support/OpenEmu/Cores</code></p><p>后边的系统文件，指的是我们常说的BIOS，BIOS 就是从游戏机里 dump 出来的基本 IO 模块。绝大部分模拟器都需要这个模块来启动游戏。为了规避版权问题， BIOS 是要自己找的。因为 BIOS 的版权属于游戏机厂商（而模拟器本身只要不提供 BIOS 一般是不侵权的）。</p><p>BIOS文件放置在mac系统的位置 <code>~/Library/Application Support/OpenEmu/bios</code></p><h3 id="游戏下载"><a href="#游戏下载" class="headerlink" title="游戏下载"></a>游戏下载</h3><p>核心设置好后，我们还缺少对应的游戏，比如小时候常玩的任天堂(Nintendo)红白机，可以在下边的这个网站上下载</p><p><a href="https://www.retrostic.com/roms/nes">https://www.retrostic.com/roms/nes</a></p><p>我们将下载后的nes文件拖拽到Nintendo(NES)对应的窗口中即可。</p><p><img src="http://openemu.org/img/intro-nes-grid.png" alt=""></p><p>对于如合金弹头和拳皇等街机游戏直接运行的话会提示缺少文件，还需要和游戏配套的游戏BIOS，可通过<a href="https://www.mamechannel.it/pages/bios.php">www.mamechannel.it</a>下载。放置在<code>~/Library/Application Support/OpenEmu/Game Library/roms/Arcade</code>即可</p><p>如游戏和新核心不兼容可尝试手动安装老版本核心，下载<a href="https://github.com/OpenEmu/UME-Core/releases">UME-Core</a>覆盖<code>~/Library/Application Support/OpenEmu/Cores/MAME.oecoreplugin</code>。合金弹头启动失败我是下载<a href="https://github.com/OpenEmu/UME-Core/releases/tag/v0.219">MAME 0.219</a>版本解决的</p><p>附街机游戏下载</p><p><a href="https://ia803104.us.archive.org/view_archive.php?archive=/8/items/MAME217RomsOnlyMerged/MAME%200.217%20ROMs%20%28merged%29.zip">listing of MAME 0.217 ROMs (merged).zip</a></p><p><a href="https://archive.org/download/mame-0.250-roms-split_202212/MAME%200.250%20ROMs%20%28split%29/">MAME 0.250 ROMs (split)</a></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.imtrq.com/archives/1629">MacOS上的MAME街机模拟器，附三国战记+恐龙快打+拳皇97</a></p><p><a href="https://zhuanlan.zhihu.com/p/42108658">想在Mac上玩红白机吗？OpenEmu了解一下！</a></p><p><a href="https://post.smzdm.com/p/aoo8lr79/">OpenEmu，mac上最完整的街机和游戏机怀旧全能模拟器</a></p>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MacOS</tag>
      
      <tag>OpenEmu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring使用@Value注入List和Map</title>
    <link href="/post/a336f015.html"/>
    <url>/post/a336f015.html</url>
    
    <content type="html"><![CDATA[<h3 id="yml常规写法"><a href="#yml常规写法" class="headerlink" title="yml常规写法"></a>yml常规写法</h3><p>需要添加<code>spring-boot-configuration-processor</code>模块，并且对要注入的对象添加<code>set</code>方法</p><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">interceptorconfig</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span>    <span class="token key atrule">exclude</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /source      <span class="token punctuation">-</span> /sep/user/login      <span class="token punctuation">-</span> /sep/user/getCheckCode/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"interceptorconfig.path"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenFilter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> exclude<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">generate</span><span class="token punctuation">:</span>  <span class="token key atrule">companyAndPlanMap</span><span class="token punctuation">:</span>    <span class="token key atrule">101</span><span class="token punctuation">:</span> <span class="token number">2018081601</span>    <span class="token key atrule">121</span><span class="token punctuation">:</span> <span class="token number">2018081602</span>    <span class="token key atrule">111</span><span class="token punctuation">:</span> <span class="token number">2018081603</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/c"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"generate"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C35Controller</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> companyAndPlanMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCompanyAndPlanMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> companyAndPlanMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>companyAndPlanMap <span class="token operator">=</span> companyAndPlanMap<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="EL表达式-JSON写法"><a href="#EL表达式-JSON写法" class="headerlink" title="EL表达式+JSON写法"></a>EL表达式+JSON写法</h3><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">scio.cloud.list</span><span class="token punctuation">:</span> topic1<span class="token punctuation">,</span>topic2<span class="token punctuation">,</span>topic3<span class="token key atrule">scio.cloud.maps</span><span class="token punctuation">:</span> <span class="token string">"&#123;key1: 'value1', key2: 'value2'&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#&#123;'$&#123;scio.cloud.list&#125;'.split(',')&#125;"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token punctuation">;</span> <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#&#123;$&#123;scio.cloud.maps&#125;&#125;"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> maps<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.jianshu.com/p/1aa662a5f170">Spring @Value 注入List和Map</a></p><p><a href="https://juejin.im/post/6844903972403150861">Spring Boot配置文件注入</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java加密压缩Zip</title>
    <link href="/post/45e649c7.html"/>
    <url>/post/45e649c7.html</url>
    
    <content type="html"><![CDATA[<p>JDK自带的ZIP操作接口（java.util.zip包）不直接支持加密压缩，项目中需要用到加密压缩，在网上查了查，已经有人封装好了。<a href="https://github.com/srikanth-lingala/zip4j">Zip4j</a>功能比较强大，支持加密、解密压缩，支持文件的添加、删除等。</p><h3 id="使用Zip4j进行加密压缩"><a href="#使用Zip4j进行加密压缩" class="headerlink" title="使用Zip4j进行加密压缩"></a>使用Zip4j进行加密压缩</h3><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.lingala.zip4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zip4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">US_ASCII</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ZipParameters</span> zipParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用密码</span>zipParameters<span class="token punctuation">.</span><span class="token function">setEncryptFiles</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 加密方式</span>zipParameters<span class="token punctuation">.</span><span class="token function">setEncryptionMethod</span><span class="token punctuation">(</span><span class="token class-name">EncryptionMethod</span><span class="token punctuation">.</span><span class="token constant">AES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>zipParameters<span class="token punctuation">.</span><span class="token function">setAesKeyStrength</span><span class="token punctuation">(</span><span class="token class-name">AesKeyStrength</span><span class="token punctuation">.</span><span class="token constant">KEY_STRENGTH_256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// zip中的文件名</span>zipParameters<span class="token punctuation">.</span><span class="token function">setFileNameInZip</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s.txt"</span><span class="token punctuation">,</span> packageName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">File</span> tempFile <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">.</span><span class="token function">createTempFile</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> <span class="token string">".zip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 先删除，fileZip会自动创建</span>tempFile<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"file_path:&#123;&#125;"</span><span class="token punctuation">,</span> tempFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">ZipFile</span><span class="token punctuation">(</span>tempFile<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> zipParameters<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我生成压缩文件是为了上传使用，所以使用了<code>File.createTempFile</code>创建了一个临时文件，实际使用时发现生成压缩包时<code>zip4j</code>会判断我们传入的<code>file</code>是否为一个zip文件，我们这个文件是临时创建的是一个长度为0的空文件，所以直接报错了。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>zip4jRaf<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">ENDHDR</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ZipException</span><span class="token punctuation">(</span><span class="token string">"Zip file size less than minimum expected zip file size. "</span> <span class="token operator">+</span>        <span class="token string">"Probably not a zip file or a corrupted zip file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我再<code>File.createTempFile</code>后又将这个文件删除了，把生成文件的任务交给<code>zip4j</code>去处理，这样就没有问题了。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://github.com/srikanth-lingala/zip4j">Zip4j - A Java library for zip files / streams</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Zip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-Elasticsearch使用原生DSL查询</title>
    <link href="/post/3b7237cd.html"/>
    <url>/post/3b7237cd.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>注：本文的<code>spring-boot-starter-data-elasticsearch</code>的版本为<code>2.2.10.RELEASE</code><br>Elasticsearch版本为<code>6.8.12</code></p></blockquote><p><code>RestHighLevelClient</code>是ES官方推荐使用的客户端，新版本的<code>spring-data-elasticsearch</code>也对<code>RestHighLevelClient</code>进行了支持，使用<code>ElasticsearchRestTemplate</code>对<code>RestHighLevelClient</code>进行封装，我们直接使用<code>ElasticsearchRestTemplate</code>即可，但是对于参数较多特别是有嵌套聚合的查询，使用Spring提供的API过于繁琐，我们想使用原生的DSL进行查询，但是<code>ElasticsearchRestTemplate</code>并不支持这种写法。我们知道<code>ElasticsearchRestTemplate</code>底层一定通过JSON传输，分析内部实现，看看实现方式。</p><h3 id="ElasticsearchRestTemplate底层"><a href="#ElasticsearchRestTemplate底层" class="headerlink" title="ElasticsearchRestTemplate底层"></a>ElasticsearchRestTemplate底层</h3><p>拿ElasticsearchRestTemplate#query这个方法举例，<code>query</code>调用<code>client.search()</code>，这个client就是<code>RestHighLevelClient</code>，Spring对其进行了二次封装。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">SearchQuery</span> query<span class="token punctuation">,</span> <span class="token class-name">ResultsExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> resultsExtractor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SearchResponse</span> response <span class="token operator">=</span> <span class="token function">doSearch</span><span class="token punctuation">(</span><span class="token function">prepareSearch</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> resultsExtractor<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token keyword">private</span> <span class="token class-name">SearchResponse</span> <span class="token function">doSearch</span><span class="token punctuation">(</span><span class="token class-name">SearchRequest</span> searchRequest<span class="token punctuation">,</span> <span class="token class-name">SearchQuery</span> searchQuery<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">prepareSearch</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">,</span> searchQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ElasticsearchException</span><span class="token punctuation">(</span><span class="token string">"Error for search request with scroll: "</span> <span class="token operator">+</span> searchRequest<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>继续看<code>RestHighLevelClient#search</code>方法，主要是对参数和返回值进行封装，层层跟进该方法会调用<code>client.performRequest</code>，此处的<code>client</code>并非指<code>RestHighLevelClient</code>，而是更底层的客户端<code>RestClient</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">SearchResponse</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">SearchRequest</span> searchRequest<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span> options<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">performRequestAndParseEntity</span><span class="token punctuation">(</span>            searchRequest<span class="token punctuation">,</span>            r <span class="token operator">-></span> <span class="token class-name">RequestConverters</span><span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"_search"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            options<span class="token punctuation">,</span>            <span class="token class-name">SearchResponse</span><span class="token operator">::</span><span class="token function">fromXContent</span><span class="token punctuation">,</span>            <span class="token function">emptySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Req</span><span class="token punctuation">,</span> <span class="token class-name">Resp</span><span class="token punctuation">></span></span> <span class="token class-name">Resp</span> <span class="token function">internalPerformRequest</span><span class="token punctuation">(</span><span class="token class-name">Req</span> request<span class="token punctuation">,</span>                                        <span class="token class-name">CheckedFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Req</span><span class="token punctuation">,</span> <span class="token class-name">Request</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">></span></span> requestConverter<span class="token punctuation">,</span>                                        <span class="token class-name">RequestOptions</span> options<span class="token punctuation">,</span>                                        <span class="token class-name">CheckedFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Response</span><span class="token punctuation">,</span> <span class="token class-name">Resp</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">></span></span> responseConverter<span class="token punctuation">,</span>                                        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ignores<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Request</span> req <span class="token operator">=</span> requestConverter<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function">setOptions</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Response</span> response<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">performRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ResponseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ignores<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> responseConverter<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> innerException<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// the exception is ignored as we now try to parse the response as an error.</span>                <span class="token comment">// this covers cases like get where 404 can either be a valid document not found response,</span>                <span class="token comment">// or an error for which parsing is completely different. We try to consider the 404 response as a valid one</span>                <span class="token comment">// first. If parsing of the response breaks, we fall back to parsing it as an error.</span>                <span class="token keyword">throw</span> <span class="token function">parseResponseException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">throw</span> <span class="token function">parseResponseException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> responseConverter<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Unable to parse response body for "</span> <span class="token operator">+</span> response<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>RestClient#performRequest</code>接受的参数为<code>org.elasticsearch.client.Request</code>，其中重要的参数有一下几个:<br><code>method</code>:Http的方法<code>GET</code>,<code>POST</code>等<br><code>endpoint</code>:包含<code>index</code>,<code>type</code>,查询类别等,如<code>code/data/_search</code><br><code>entity</code>:包好JSON的实体</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">performRequest</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">SyncResponseListener</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyncResponseListener</span><span class="token punctuation">(</span>maxRetryTimeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">performRequestAsyncNoCatch</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> listener<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Request</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> method<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> endpoint<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">HttpEntity</span> entity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">RequestOptions</span> options <span class="token operator">=</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="使用RestClient进行请求"><a href="#使用RestClient进行请求" class="headerlink" title="使用RestClient进行请求"></a>使用RestClient进行请求</h3><p>知道底层的运行方式，我们构建一个Request再调用<code>RestClient#performRequest</code>即可。因为涉及到字符串拼接和json序列化，用Java不太方便，我这里使用Groovy语法编写。</p><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">String dsl <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"""        &#123;          "size": 0,          "query": &#123;            "terms": &#123;              "xxx": [                </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">xxx</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">              ]            &#125;          &#125;,          "aggs": &#123;            "first": &#123;              "value_count": &#123;                "field": "first_id"              &#125;            &#125;,            "second": &#123;              "value_count": &#123;                "field": "second_id"              &#125;            &#125;          &#125;        &#125;        """</span></span>String endpoint <span class="token operator">=</span> <span class="token string">'code/data/_search'</span>Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span>HttpPost<span class="token punctuation">.</span>METHOD_NAME<span class="token punctuation">,</span> endpoint<span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">setJsonEntity</span><span class="token punctuation">(</span>dsl<span class="token punctuation">)</span>Response response <span class="token operator">=</span> elasticsearchRestTemplate<span class="token punctuation">.</span><span class="token function">getClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLowLevelClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">performRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token keyword">def</span> respJson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonSlurper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>CodeTerms codeTerms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CodeTerms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>with <span class="token punctuation">&#123;</span>    firstCount <span class="token operator">=</span> respJson<span class="token punctuation">[</span><span class="token string">'aggregations'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span> <span class="token keyword">as</span> Long    secondCount <span class="token operator">=</span> respJson<span class="token punctuation">[</span><span class="token string">'aggregations'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'second'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span> <span class="token keyword">as</span> Long    it<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="使用RestHighLevelClient直接进行简单查询"><a href="#使用RestHighLevelClient直接进行简单查询" class="headerlink" title="使用RestHighLevelClient直接进行简单查询"></a>使用RestHighLevelClient直接进行简单查询</h3><p>简单查询，使用QueryBuilders组装SearchRequest</p><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">String dsl <span class="token operator">=</span> <span class="token string">'''&#123;  "range": &#123;      "second_upload_time": &#123;      "gte": "2020-06-01 00:00:00",      "lte": "2020-06-02 00:00:00"      &#125;  &#125;&#125;'''</span>SearchSourceBuilder ssb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">wrapperQuery</span><span class="token punctuation">(</span>dsl<span class="token punctuation">)</span><span class="token punctuation">)</span>SearchRequest searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"code"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">types</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"data"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>ssb<span class="token punctuation">)</span><span class="token keyword">def</span> response <span class="token operator">=</span> elasticsearchRestTemplate<span class="token punctuation">.</span><span class="token function">getClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="使用ElasticsearchRestTemplate直接进行简单查询"><a href="#使用ElasticsearchRestTemplate直接进行简单查询" class="headerlink" title="使用ElasticsearchRestTemplate直接进行简单查询"></a>使用ElasticsearchRestTemplate直接进行简单查询</h3><p>使用StringQuery基于DSL定义的JSON的查询，底层使用<code>SearchRequest</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">StringQuery stringQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringQuery</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"""        &#123;            "wildcard": &#123;              "internal_code.keyword": &#123;                "value": \"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">internalCode</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">\"              &#125;            &#125;          &#125;    """</span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    searchQuery<span class="token punctuation">.</span><span class="token function">addIndices</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"test"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    searchQuery<span class="token punctuation">.</span><span class="token function">addTypes</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"test"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>TestObject<span class="token operator">></span> list <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>stringQuery<span class="token punctuation">,</span> TestObject<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://my.oschina.net/xiaopei/blog/4302389">Elasticsearch如何查询使用JSON字符串的DSL</a></p><p><a href="https://blog.csdn.net/Qensq/article/details/103081923?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf">Elasticsearch 常用聚合(group by || sum || count)分组查询</a></p><p><a href="https://tuwaner.com/2019/01/17/%E5%9F%BA%E4%BA%8ESpring-Data-Elasticsearch%E4%B8%89%E7%A7%8D%E6%9F%A5%E8%AF%A2%E7%9A%84%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/">基于Spring-Data-Elasticsearch三种查询的使用示例</a></p><p><a href="https://blog.csdn.net/qq_38966984/article/details/91049878">Spring-data-Elasticsearch聚合查询</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Elasticsearch</tag>
      
      <tag>Java</tag>
      
      <tag>Groovy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA部署应用到远程Docker</title>
    <link href="/post/bee47fed.html"/>
    <url>/post/bee47fed.html</url>
    
    <content type="html"><![CDATA[<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，使用Docker可保证每个人的环境保持一致，减少团队开发中因项目环境不一致导致的问题，本文介绍如何使用IDEA直接部署Docker。</p><span id="more"></span><h3 id="配置服务端Docker"><a href="#配置服务端Docker" class="headerlink" title="配置服务端Docker"></a>配置服务端Docker</h3><p>首先需要修改 Docker 配置文件让其开放 <code>Docker REST API</code></p><p>vim /etc/docker/daemon.json</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"hosts"</span><span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token string">"unix:///var/run/docker.sock"</span><span class="token punctuation">,</span>    <span class="token string">"tcp://0.0.0.0:2375"</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"># 重新加载配置文件，并重启Dockersystemctl daemon-reloadsystemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="IDEA连接Docker"><a href="#IDEA连接Docker" class="headerlink" title="IDEA连接Docker"></a>IDEA连接Docker</h3><p>Docker配置完成后，我们配置IDEA</p><p><img src="https://img.yjll.site/img/20200927194234.png" alt="20200927194234"></p><p>配置正确会有Connection successful提示</p><p><a href="https://www.jetbrains.com/zh-cn/idea/whatsnew/2021-2/#docker">IDEA 2021.2</a>版本之后支持ssh连接</p><h3 id="Dockerfile文件"><a href="#Dockerfile文件" class="headerlink" title="Dockerfile文件"></a>Dockerfile文件</h3><p>熟悉Docker的对Dockerfile应该不会陌生，我这里写一个简单的</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">FROM openjdk:8u102-jdkADD target&#x2F;*.jar app.jarRUN ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtimeENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom&quot;,&quot;-jar&quot;,&quot;&#x2F;app.jar&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我用的是maven进行打包，打包后的文件放在target目录中，<code>ADD target/*.jar app.jar</code>是将target中的jar文件添加近容器并重命名为<code>app.jar</code>。</p><p>docker中的时区与我们不同，手动设置东八区。</p><p>注意openjdk的版本，我最开始使用的是<code>alpine</code>版本，占用体积较小。但实际运行时，生成验证码接口报错，同样的代码我在CentOS中能运行，Docker中报错。最后换了JDK的版本解决了，猜测是<code>alpine</code>可能精简一部分功能。</p><h3 id="IDEA部署Docker"><a href="#IDEA部署Docker" class="headerlink" title="IDEA部署Docker"></a>IDEA部署Docker</h3><p>在Run/Debug Configurations中添加Docker配置，支持<code>Docker Image</code>,<code>Docker-compose</code>,<code>Dockerfile</code>，我这里使用<code>Dockerfile</code>进行部署</p><p><img src="https://img.yjll.site/img/20200928090658.png" alt="20200928090658"></p><p>这是一个Spring Cloud项目，启动容器后发现向调度中心注册的地址不是本机IP，而是Docker中的桥接网卡的地址，运行参数我添加了<code>--network=host</code>，容器直接使用宿主机的网络，不进行桥接。</p><p>以上直接配置好后，启动项目</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Deploying &#39;admin-service Dockerfile: Dockerfile&#39;...Building image...Preparing build context archive...[&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;]1540&#x2F;1540 filesDoneSending build context to Docker daemon...[&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;] 107.5MBDoneStep 1&#x2F;4 : FROM openjdk:8u102-jdk ---&gt; ca5dd051db43Step 2&#x2F;4 : ADD target&#x2F;*.jar app.jar ---&gt; 8d0c14567ec9Step 3&#x2F;4 : RUN ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime ---&gt; Running in a289f48a6aa9Removing intermediate container a289f48a6aa9 ---&gt; 12cbefb7337eStep 4&#x2F;4 : ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom&quot;,&quot;-jar&quot;,&quot;&#x2F;app.jar&quot;] ---&gt; Running in 208933b6329bRemoving intermediate container 208933b6329b ---&gt; 7e398428e4c6Successfully built 7e398428e4c6Successfully tagged admin-service:latestCreating container...Container Id: b45137c747b9fd52713b191b92bf826fba7b0bdefd2996ddcbbfde98dbe872bcContainer name: &#39;admin-service&#39;Attaching to container &#39;admin-service&#39;...Starting container &#39;admin-service&#39;&#39;admin-service Dockerfile: Dockerfile&#39; has been deployed successfully.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>注意<code>Preparing build context archive...</code>和<code>Sending build context to Docker daemon...</code>，构建时默认是把同级目录下的所有文件发送到docker daemon，我们项目中日志和代码还有很多文件在此处是没有用处的，我们可以建立个<code>.dockerignore</code>将这部分文件忽略，配置方式和git的忽略配置相似，再次构建的时候就会发现速度提升了很多。</p><p>好了，部署完成了，可以访问项目试一试了。</p>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Hexo搭建静态博客</title>
    <link href="/post/48dba841.html"/>
    <url>/post/48dba841.html</url>
    
    <content type="html"><![CDATA[<p>一直使用Hexo搭建博客，这里记录一下从安装环境到部署的过程。</p><span id="more"></span><h3 id="安装nodejs环境"><a href="#安装nodejs环境" class="headerlink" title="安装nodejs环境"></a>安装nodejs环境</h3><p>我这里以CentOS为例</p><p>先删除老版本node</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum remove <span class="token parameter variable">-y</span> nodejs <span class="token function">npm</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>可根据<a href="https://github.com/nodesource/distributions">NodeSource</a>安装想要的版本</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://rpm.nodesource.com/setup_lts.x <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span> -<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="安装Hexo并初始化项目"><a href="#安装Hexo并初始化项目" class="headerlink" title="安装Hexo并初始化项目"></a>安装Hexo并初始化项目</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">npm install -g hexo-clihexo init blog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="类别插件"><a href="#类别插件" class="headerlink" title="类别插件"></a>类别插件</h3><p>npm install hexo-auto-category –save</p><p>可根据目录名称自动归类</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">auto_category</span><span class="token punctuation">:</span> <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">depth</span><span class="token punctuation">:</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="git-部署插件"><a href="#git-部署插件" class="headerlink" title="git 部署插件"></a>git 部署插件</h3><p>npm install hexo-deployer-git –save</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//xxx@github.com/yjll/yjll.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="固定地址插件"><a href="#固定地址插件" class="headerlink" title="固定地址插件"></a>固定地址插件</h3><p>Hexo在生成博客文章链接时，默认是按照年、月、日、标题格式来生成的，使用hexo-abbrlink插件可生成固定地址<br>  npm install hexo-abbrlink –save</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> post/<span class="token punctuation">:</span>abbrlink.html<span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>  <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc32  <span class="token comment"># 算法：crc16(default) and crc32</span>  <span class="token key atrule">rep</span><span class="token punctuation">:</span> hex    <span class="token comment"># 进制：dec(default) and hex</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="支持Obsidian的引用链接插件"><a href="#支持Obsidian的引用链接插件" class="headerlink" title="支持Obsidian的引用链接插件"></a>支持Obsidian的引用链接插件</h3><p><a href="https://github.com/Cyrusky/hexo-backlink">hexo-backlink</a></p><p>npm install hexo-backlink</p><p>Add backlink: true in _config.yml:</p><h3 id="图片上传到图床"><a href="#图片上传到图床" class="headerlink" title="图片上传到图床"></a>图片上传到图床</h3><p>使用Markdown写作，插入图片是个问题，可选择本地引用或者上传图片到图床。</p><p>PicGo是一个用于快速上传图片并获取图片 URL 链接的工具，我平时写内容喜欢使用vscode，可在商店中安装对应的插件</p><p><img src="https://img.yjll.site/img/PicGo_vscode.png" alt="PicGo_vscode"></p><h3 id="使用GitHub-Pages部署"><a href="#使用GitHub-Pages部署" class="headerlink" title="使用GitHub Pages部署"></a>使用GitHub Pages部署</h3><p>参考<a href="https://docs.github.com/cn/pages/getting-started-with-github-pages/creating-a-github-pages-site">创建 GitHub Pages 站点</a></p><h3 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h3><p>使用GitHub Pages部署默认使用的域名为<code>yjll.github.io</code>，我这里使用自定义域名<code>www.yjll.site</code><br><img src="https://img.yjll.site/img/github_page_domain.png" alt="github_page_domain"></p><p>创建名为CNAME的文件，写入<code>www.yjll.site</code>，将该文件放入source目录下。</p><h3 id="使用Github的Action进行部署"><a href="#使用Github的Action进行部署" class="headerlink" title="使用Github的Action进行部署"></a>使用Github的Action进行部署</h3><p>push后git会自动帮助我们部署项目</p><p>在<code>.github/workflows</code>目录下创建部署脚本</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> BlogCI<span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">]</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Download Source file      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Prepare Node env      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v1      <span class="token key atrule">with</span><span class="token punctuation">:</span>        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"12.x"</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Set Env      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        git config --global user.name '***' # github用户名        git config --global user.email '***' # github邮箱</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        rm package-lock.json        npm i -g hexo-cli        npm i        hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><details>    <summary>使用 Github webhooks 自动部署</summary><p>Github提供webhooks功能，可以在代码推送后回调我们配置的web接口，方便使用自己服务器部署。</p><p><img src="https://img.yjll.site/img/20200430115330.png" alt="20200430115330"></p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token keyword">import</span> subprocessapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token string">'./deployment.sh'</span><span class="token punctuation">,</span>shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'Hello, World!'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>port<span class="token operator">=</span><span class="token number">10080</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">cd</span> /root/Blog<span class="token function">git</span> pull<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/www/blog/source/_posts/*<span class="token function">cp</span> /root/Blog/public/* /var/www/blog/source/_posts/<span class="token builtin class-name">cd</span> /var/www/blog/hexo cleanhexo g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></details>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Blog</tag>
      
      <tag>workflows</tag>
      
      <tag>Github Action</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manjaro安装与配置</title>
    <link href="/post/d9d0da7d.html"/>
    <url>/post/d9d0da7d.html</url>
    
    <content type="html"><![CDATA[<p>闲来无事折腾了一下Manjaro，本文记录安装配置Manjaro的过程，一方面备忘，另一方面希望可以帮助到有需要的人</p><p>我版本选择<a href="https://manjaro.org/download/">官网</a>上的KDE版本，用<a href="https://www.balena.io/etcher/">balenaEtcher</a>将镜像写入U盘，Manjaro的安装步骤有图像界面，根据自己需求安装即可。</p><span id="more"></span><h3 id="配置国内源"><a href="#配置国内源" class="headerlink" title="配置国内源"></a>配置国内源</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman-mirrors <span class="token parameter variable">-i</span> <span class="token parameter variable">-c</span> China <span class="token parameter variable">-m</span> rank<span class="token comment"># 查看是否已经更改</span><span class="token function">cat</span> /etc/pacman.d/mirrorlist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>手动更改可参考<a href="https://www.archlinux.org/mirrorlist/">镜像地址</a></p><h3 id="添加-ArchLinuxCN-源"><a href="#添加-ArchLinuxCN-源" class="headerlink" title="添加 ArchLinuxCN 源"></a>添加 ArchLinuxCN 源</h3><p>ArchLinuxCN 是 Arch 中文组维护的一个软件合集，包含了中文用户常用的 WPS Office、搜狗拼音、Google Chrome 等软件。不过，Arch 本身和它的常见衍生版（如：Manjaro）默认都不包含这个源，因此我们需要手动来配置使用这个源。</p><p>参考<a href="https://github.com/archlinuxcn/mirrorlist-repo">镜像地址</a></p><p>我使用的是清华大学的源</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> etc/pacman.conf<span class="token punctuation">[</span>archlinuxcn<span class="token punctuation">]</span>SigLevel <span class="token operator">=</span> Optional TrustedOnlyServer <span class="token operator">=</span> http://mirrors.tuna.tsinghua.edu.cn/archlinuxcn//<span class="token variable">$arch</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>导入 GPG key 并更新系统<br>这是 archlinuxcn 的 key，安装后作为验证，就可以安装软件了。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更新数据源</span><span class="token function">sudo</span> pacman <span class="token parameter variable">-Syy</span><span class="token comment"># 安装导入 GPG key</span><span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> archlinuxcn-keyring<span class="token comment"># 更新系统</span><span class="token function">sudo</span> pacman <span class="token parameter variable">-Syu</span><span class="token comment"># 安装chrome</span><span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> google-chrome<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="AUR"><a href="#AUR" class="headerlink" title="AUR"></a>AUR</h3><p>Arch用户软件仓库（Arch User Repository，AUR）是为用户而建、由用户主导的Arch软件仓库。AUR中的软件包以软件包生成脚本（PKGBUILD）的形式提供，用户自己通过makepkg生成包，再由pacman安装。创建AUR的初衷是方便用户维护和分享新软件包，并由官方定期从中挑选软件包进入community仓库。</p><p>许多官方仓库软件包都来自AUR。通过AUR，大家相互分享新的软件包生成脚本（PKGBUILD和其他相关文件）。用户还可以为软件包投票。如果一个软件包投票足够多、没有协议问题、打包质量好，那么<br>它就很有希望被收录进官方[community]仓库（以后就可以直接通过pacman 或 abs 安装了）。</p><p>Yay 是用 Go 编写的 Arch Linux AUR 包管理工具。具体可以查看 <a href="https://wiki.archlinux.org/index.php/AUR_helpers">AUR_helpers</a></p><p>安装 yay：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> yay<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>配置 yay 的 aur 源为<a href="https://mirror.tuna.tsinghua.edu.cn/help/AUR/">清华源 AUR 镜像</a>：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay <span class="token parameter variable">--aururl</span> <span class="token string">"https://aur.tuna.tsinghua.edu.cn"</span> <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>修改的配置文件位于 <code>~/.config/yay/config.json</code> ，还可通过以下命令查看修改过的配置:</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay <span class="token parameter variable">-P</span> <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>yay的兼容Pacman命令</p><p>yay 安装命令不需要加 <code>sudo</code>。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://wiki.archlinux.org/index.php/Arch_User_Repository_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">AUR wiki</a></p><p><a href="https://zh.wikipedia.org/wiki/Manjaro_Linux">Manjaro wiki</a></p>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Manjaro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java搭配Groovy实现动态公式计算</title>
    <link href="/post/7b75058.html"/>
    <url>/post/7b75058.html</url>
    
    <content type="html"><![CDATA[<p>最近项目用到了动态公式计算，也就是页面配置一个公式，服务端进行计算。我们后端使用Java，Java处理这部分公式可以使用表达式引擎Aviator，Jexl。也可以以使用JVM上的脚本语言像Jython，Groovy。表达式引擎不是一门单独的语言，局限性比较高，由于我对Python比较熟悉，最开始准备使用Jython，查了查资料发现和Java配合不是很好，最终决定使用Groovy，Groovy兼容Java的语法，不熟悉的地方可以直接使用Java语法。</p><span id="more"></span><h3 id="GroovyShell"><a href="#GroovyShell" class="headerlink" title="GroovyShell"></a>GroovyShell</h3><p>可以使用<code>GroovyShell</code>根据公式求值</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 绑定公式中的变量和对应的值</span><span class="token class-name">Binding</span> binding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>binding<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>binding<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token class-name">GroovyShell</span> shell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroovyShell</span><span class="token punctuation">(</span>binding<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 进行计算 返回值是3</span>def result <span class="token operator">=</span> shell<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token char">'a + b'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h3><p>接口使用Java定义</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DynamicFormulaService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 根据公式和source中的值计算     * @param source 源数据     * @param formulaMap 公式     * @return     */</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> source <span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> formulaMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>source</code>为要被统计的源数据列表，<code>key</code>为公式中变量，如</p><p><code>&#123; price : 1.5 , quantity : 400 , total : null &#125;</code></p><p><code>formulaMap</code>中的key为结果，value为公式，如</p><p><code>&#123; total : price * quantity &#125;</code></p><p>返回的结果为<code>&#123; price : 1.5 , quantity : 400 , total : 600 &#125;</code></p><p>在计算数值之前，会先遍历<code>formulaMap</code>，将<code>value</code>中有计算公式的数据进行递归拆分，完成嵌套公式解析</p><p>如<code>&#123;a : b * c , b : d * e&#125;</code>解析的结果为<code>&#123;a : ( d * e ) * c , b : d * e&#125;</code></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>具体的实现使用Groovy，我这里在resources下新建了一个groovy的包存放我们的脚本</p><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">class</span> <span class="token class-name">DynamicFormulaServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DynamicFormulaService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 匹配加减乘除符号</span>    <span class="token keyword">def</span> pattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">'[\\+\\-\\*\\/\\(\\)]'</span><span class="token punctuation">)</span>    <span class="token comment">// 加减乘除符号</span>    <span class="token keyword">def</span> formulaString <span class="token operator">=</span> <span class="token string">'''+-*/()'''</span>    <span class="token annotation punctuation">@Override</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">compute</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> source<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> formulaMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        formulaMap<span class="token punctuation">.</span>each <span class="token punctuation">&#123;</span> k<span class="token punctuation">,</span> v <span class="token operator">-></span>            <span class="token comment">// 递归格式化公式</span>            formulaMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token function">formatFormula</span><span class="token punctuation">(</span>formulaMap<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        println formulaMap        <span class="token keyword">def</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> formulaMap<span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token punctuation">&#125;</span>    <span class="token keyword">def</span> <span class="token function">formatFormula</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> formulaMap<span class="token punctuation">,</span> String key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        String formula <span class="token operator">=</span> formulaMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token comment">// 是否含有公式</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>formula <span class="token operator">||</span> formula<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> key        <span class="token comment">// 将变量用空格分隔方便替换</span>        formula <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">" </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">formula</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> "</span></span>        formulaString<span class="token punctuation">.</span>chars<span class="token punctuation">.</span>each <span class="token punctuation">&#123;</span> c <span class="token operator">-></span>            formula <span class="token operator">=</span> formula<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">" </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">c</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> "</span></span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        formula<span class="token punctuation">.</span><span class="token function">splitEachLine</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> v <span class="token operator">-></span>            v<span class="token punctuation">.</span>each <span class="token punctuation">&#123;</span>                k <span class="token operator">-></span>                    k <span class="token operator">=</span> k<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">||</span> StringUtils<span class="token punctuation">.</span><span class="token function">isNumeric</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>                    <span class="token comment">// 精确匹配替换</span>                    formula <span class="token operator">=</span> formula<span class="token punctuation">.</span><span class="token function">replaceFirst</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">" </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">k</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> "</span></span><span class="token punctuation">,</span> <span class="token function">formatFormula</span><span class="token punctuation">(</span>formulaMap<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token interpolation-string"><span class="token string">"(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">formula</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)"</span></span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">def</span> <span class="token function">compute</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> source<span class="token punctuation">,</span> formulaMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        source<span class="token punctuation">.</span>each <span class="token punctuation">&#123;</span> e <span class="token operator">-></span>            Binding binding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            formulaMap<span class="token punctuation">.</span>each <span class="token punctuation">&#123;</span> k<span class="token punctuation">,</span> v <span class="token operator">-></span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    GroovyShell shell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroovyShell</span><span class="token punctuation">(</span>binding<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">def</span> result <span class="token operator">=</span> shell<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>                    println <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">k</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">result</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>                    e<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> result<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> source    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="两种集成方式"><a href="#两种集成方式" class="headerlink" title="两种集成方式"></a>两种集成方式</h3><p>groovy虽然是jvm平台上的语言，可编译成字节码运行，但毕竟不是Java本身，和Java的交互还需要一定的配置，我下面介绍两种配置方式。</p><h4 id="Spring集成"><a href="#Spring集成" class="headerlink" title="Spring集成"></a>Spring集成</h4><p><code>DynamicFormulaServiceImpl</code>还不能直接使用，要将它作为一个bean交给Spring统一管理，Spring也提供了对Groovy的支持</p><p>appcontextContext.xml</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/lang<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/lang https://www.springframework.org/schema/lang/spring-lang.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">lang:</span>groovy</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamicFormulaService<span class="token punctuation">"</span></span> <span class="token attr-name">script-source</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:groovy/DynamicFormulaServiceImpl.groovy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">lang:</span>groovy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Spring Framework 4.0 也支持<code>beans&#123;&#125;</code>写法</p><p>applicationContext.groovy</p><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">import</span> groovy<span class="token punctuation">.</span>DynamicFormulaServiceImplbeans <span class="token punctuation">&#123;</span>    <span class="token function">dynamicFormulaService</span><span class="token punctuation">(</span>DynamicFormulaServiceImpl<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果想热部署，定期扫描脚本变化，可通过配置<code>ScriptFactoryPostProcessor</code>来实现</p><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">beans <span class="token punctuation">&#123;</span>    <span class="token function">scriptFactoryPostProcessor</span><span class="token punctuation">(</span>ScriptFactoryPostProcessor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        defaultRefreshCheckDelay <span class="token operator">=</span> <span class="token number">5000</span>    <span class="token punctuation">&#125;</span>    <span class="token function">dynamicFormulaService</span><span class="token punctuation">(</span>GroovyScriptFactory<span class="token punctuation">,</span><span class="token string">'classpath:groovy/DynamicFormulaServiceImpl.groovy'</span><span class="token punctuation">)</span>    <span class="token comment">// 也可以读取配置文件取路径</span>    String scriptPath <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">'script.path'</span><span class="token punctuation">)</span>    <span class="token function">dynamicFormulaService</span><span class="token punctuation">(</span>GroovyScriptFactory<span class="token punctuation">,</span><span class="token string">'$&#123;scriptPath&#125;DynamicFormulaServiceImpl.groovy'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>引用以上配置</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span><span class="token string">"classpath:applicationContext.groovy"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="Maven插件编译"><a href="#Maven插件编译" class="headerlink" title="Maven插件编译"></a>Maven插件编译</h4><p>通过<a href="https://github.com/groovy/GMavenPlus">groovy/GMavenPlus</a>插件可在build时将groovy代码编译成jvm的class字节码文件。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;plugin&gt;    &lt;groupId&gt;org.codehaus.gmavenplus&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;gmavenplus-plugin&lt;&#x2F;artifactId&gt;    &lt;version&gt;1.11.0&lt;&#x2F;version&gt;    &lt;executions&gt;        &lt;execution&gt;            &lt;goals&gt;                &lt;goal&gt;addSources&lt;&#x2F;goal&gt;                &lt;goal&gt;addTestSources&lt;&#x2F;goal&gt;                &lt;goal&gt;generateStubs&lt;&#x2F;goal&gt;                &lt;goal&gt;compile&lt;&#x2F;goal&gt;                &lt;goal&gt;generateTestStubs&lt;&#x2F;goal&gt;                &lt;goal&gt;compileTests&lt;&#x2F;goal&gt;                &lt;goal&gt;removeStubs&lt;&#x2F;goal&gt;                &lt;goal&gt;removeTestStubs&lt;&#x2F;goal&gt;            &lt;&#x2F;goals&gt;        &lt;&#x2F;execution&gt;    &lt;&#x2F;executions&gt;    &lt;configuration&gt;        &lt;sources&gt;        &lt;source&gt;        &lt;directory&gt;$&#123;project.basedir&#125;&#x2F;src&#x2F;main&#x2F;java&lt;&#x2F;directory&gt;        &lt;includes&gt;            &lt;include&gt;**&#x2F;*.groovy&lt;&#x2F;include&gt;        &lt;&#x2F;includes&gt;        &lt;&#x2F;source&gt;        &lt;&#x2F;sources&gt;    &lt;&#x2F;configuration&gt;&lt;&#x2F;plugin&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>默认<code>source</code>目录为<code>$&#123;project.basedir&#125;/src/main/groovy</code>，我这里将groovy文件放在了Java工程中，所以单独加了一些配置。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>好了，现在我们的动态公式功能就可以使用了，由于Groovy我也是第一次使用，很多东西都是现用现查，用起来还不太灵活。之后我会深入学习一下，把我感觉有趣的东西写出来。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>上线后发现占用内存过高，怀疑有内存泄漏，查找资料发现是<code>GroovyShell</code>导致的，Groovy会动态加载Class，并且这个Class不会被回收，导致内存泄漏。想解决这个问题也比较简单，接入缓存即可，将脚本缓存起来，不用频繁加载，这部分功能<code>GroovyScriptEngineImpl</code>已经帮我们写好了，<code>GroovyScriptEngineImpl</code>是JSR-223（Scripting for the Java Platform）的Groovy实现。</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.codehaus.groovy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>groovy-jsr223<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;groovy.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>使用方法也比较简单</p><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">ScriptEngineManager factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScriptEngineManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ScriptEngine engine <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getEngineByName</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"groovy"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>engine<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"(1..10).forEach(e -> println e)"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我将原来的<code>compute</code>改写，获取<code>ScriptEngine</code>部分，我写到了外面，防止重复创建对象，减少开销</p><figure><div class="code-wrapper"><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">def</span> <span class="token function">compute</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> source<span class="token punctuation">,</span> formulaMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        source<span class="token punctuation">.</span>each <span class="token punctuation">&#123;</span> e <span class="token operator">-></span>            Bindings binding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleBindings</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            formulaMap<span class="token punctuation">.</span>each <span class="token punctuation">&#123;</span> k<span class="token punctuation">,</span> v <span class="token operator">-></span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">def</span> result <span class="token operator">=</span> engine<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>v <span class="token keyword">as</span> String<span class="token punctuation">,</span>binding<span class="token punctuation">)</span>                    println <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">k</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">result</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>                    e<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> result<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> source    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>上线发现不光内存泄漏问题解决，性能也提高了，因为不用频繁动态的创建和加载<code>Class</code>了。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/languages.html#groovy">Spring Apache Groovy</a></p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-cli.html#cli-groovy">Developing Applications with the Groovy Beans DSL</a></p><p><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#groovy-bean-definition-dsl">The Groovy Bean Definition DSL</a></p><p><a href="http://springcamp.cn/spring-groovy/">springboot集成groovy脚本</a></p><p><a href="https://spring.io/blog/2014/03/03/groovy-bean-configuration-in-spring-framework-4">Groovy Bean Configuration in Spring Framework 4</a></p><p><a href="https://zhuanlan.zhihu.com/p/75976213">Maven中java与Groovy的混合开发</a></p><p><a href="https://github.com/groovy/GMavenPlus/wiki/Examples">GMavenPlus Examples</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Groovy</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker复现RUN命令</title>
    <link href="/post/89a34fac.html"/>
    <url>/post/89a34fac.html</url>
    
    <content type="html"><![CDATA[<p>如果有这样以一个场景。我使用docker run启动了了一个redis容器，而docker run的参数有很多，由于时间太久，我已经忘记了当初的启动参数，也并没有使用docker-compose这样的编排工具。现在我如何找回此前的启动命令？</p><span id="more"></span><p>我可以使用<code>inspect</code>命令查看容器的元数据，根据元数据反推出运行的参数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> inspect 1cc825a43022<span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token string">"Id"</span><span class="token builtin class-name">:</span> <span class="token string">"1cc825a430226187c957b18c3006b4e3346cf143f43513ee71647011bbd98cfe"</span>,        <span class="token string">"Created"</span><span class="token builtin class-name">:</span> <span class="token string">"2019-10-12T05:54:40.635365198Z"</span>,        <span class="token string">"Path"</span><span class="token builtin class-name">:</span> <span class="token string">"docker-entrypoint.sh"</span>,        <span class="token string">"Args"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>            <span class="token string">"redis-server"</span>,            <span class="token string">"--appendonly"</span>,            <span class="token string">"yes"</span>        <span class="token punctuation">]</span>,        <span class="token string">"State"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"Status"</span><span class="token builtin class-name">:</span> <span class="token string">"running"</span>,            <span class="token string">"Running"</span><span class="token builtin class-name">:</span> true,            <span class="token string">"Paused"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"Restarting"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"OOMKilled"</span><span class="token builtin class-name">:</span> false,            <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>但实际使用不是很方便，因为inspect返回的数据实在太多，找到数据后还要手工的反推出启动时的命令，费时又容易出错。这个时候我们可以借助<code>runlike</code>这个小工具。</p><p><code>runlike</code>使用python开发，我们直接使用pip安装</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> runlike<span class="token comment"># 安装成功后直接运行，使用`-p`参数可将返回值美观一点</span>runlike <span class="token parameter variable">-p</span> 1cc825a43022<span class="token function">docker</span> run <span class="token punctuation">\</span>        <span class="token parameter variable">--name</span><span class="token operator">=</span>jolly_mirzakhani <span class="token punctuation">\</span>        <span class="token parameter variable">--hostname</span><span class="token operator">=</span>1cc825a43022 <span class="token punctuation">\</span>        <span class="token parameter variable">--env</span><span class="token operator">=</span><span class="token environment constant">PATH</span><span class="token operator">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin <span class="token punctuation">\</span>        <span class="token parameter variable">--env</span><span class="token operator">=</span>GOSU_VERSION<span class="token operator">=</span><span class="token number">1.11</span> <span class="token punctuation">\</span>        <span class="token parameter variable">--env</span><span class="token operator">=</span>REDIS_VERSION<span class="token operator">=</span><span class="token number">4.0</span>.14 <span class="token punctuation">\</span>        <span class="token parameter variable">--env</span><span class="token operator">=</span>REDIS_DOWNLOAD_URL<span class="token operator">=</span>http://download.redis.io/releases/redis-4.0.14.tar.gz <span class="token punctuation">\</span>        <span class="token parameter variable">--env</span><span class="token operator">=</span>REDIS_DOWNLOAD_SHA<span class="token operator">=</span>1e1e18420a86cfb285933123b04a82e1ebda20bfb0a289472745a087587e93a7 <span class="token punctuation">\</span>        <span class="token parameter variable">--volume</span><span class="token operator">=</span>/usr/local/docker/data:/data <span class="token punctuation">\</span>        <span class="token parameter variable">--volume</span><span class="token operator">=</span>/data <span class="token punctuation">\</span>        <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token punctuation">\</span>        <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\</span>        <span class="token parameter variable">--detach</span><span class="token operator">=</span>true <span class="token punctuation">\</span>        redis:4 <span class="token punctuation">\</span>        redis-server <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows下的包管理工具——Scoop</title>
    <link href="/post/82ab8e0c.html"/>
    <url>/post/82ab8e0c.html</url>
    
    <content type="html"><![CDATA[<p>Centos安装软件可使用yum，Ubuntu上可使用apt，MacOS可使用brew。Windows平台也有开发者开发对应的安装程序——Scoop，Scoop类似MacOS平台的brew，没有brew强大，但常见开发环境都可以轻松搞定。</p><p>使用scoop安装常用软件，可直接敲命令</p><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">scoop install git curl 7zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><span id="more"></span><h3 id="安装Scoop"><a href="#安装Scoop" class="headerlink" title="安装Scoop"></a>安装Scoop</h3><p>设置安装目录，非必须，默认安装在用户目录</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">$env:SCOOP&#x3D;&#39;D:\ProgramFile\scoop&#39;[environment]::setEnvironmentVariable(&#39;SCOOP&#39;,$env:SCOOP,&#39;User&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>在 PowerShell 中输入下面内容，保证允许本地脚本的执行</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">set-executionpolicy remotesigned -scope currentuser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>下载运行</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">iex (new-object net.webclient).downloadstring(&#39;https:&#x2F;&#x2F;get.scoop.sh&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如报以下异常，表示在dns服务器中找不到源网站，我们可以手动更改HOSTS文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">“1”个参数调用“DownloadString”时发生异常:“未能解析此远程名称:raw.githubusercontent.com。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>编辑<code>C:\Windows\System32\drivers\etc\hosts</code>文件</p><p>添加<code>199.232.68.133 raw.githubusercontent.com</code>即可。</p><p>有梯子的话，也可以通过配置代理解决</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">$env:https_proxy&#x3D;&quot;http:&#x2F;&#x2F;192.168.1.200:7890&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>Scoop 可以利用<a href="https://github.com/aria2/aria2"><code>aria2</code></a> 进行多线程下载。</p><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">scoop install aria2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>可以使用<code>scoop config</code>对aria2进行配置</p><ul><li>aria2-enabled (default: true)</li><li><a href="https://aria2.github.io/manual/en/html/aria2c.html#cmdoption-retry-wait">aria2-retry-wait</a> (default: 2)</li><li><a href="https://aria2.github.io/manual/en/html/aria2c.html#cmdoption-s">aria2-split</a> (default: 5)</li><li><a href="https://aria2.github.io/manual/en/html/aria2c.html#cmdoption-x">aria2-max-connection-per-server</a> (default: 5)</li><li><a href="https://aria2.github.io/manual/en/html/aria2c.html#cmdoption-k">aria2-min-split-size</a> (default: 5M)</li></ul><h3 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h3><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 设置代理</span>scoop config proxy localhost:1081<span class="token comment"># 删除代理</span>scoop config <span class="token function">rm</span> proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="添加buckets"><a href="#添加buckets" class="headerlink" title="添加buckets"></a>添加<code>buckets</code></h3><p>buckets类似Linux中的源，默认包含<code>main</code>,可手动添加其他bucket</p><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">scoop bucket add extrasscoop bucket add versionsscoop bucket add dorado https:<span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com/h404bi/dorado<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p><a href="https://rasa.github.io/scoop-directory/by-score.html">bucket收录列表</a></p><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p><code>scoop alias</code>可以配置命令别名</p><p>例如配置代理可以这样写</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">scoop alias add proxy &#39;$env:https_proxy&#x3D;&quot;http:&#x2F;&#x2F;192.168.1.200:7890&quot; ; $env:http_proxy&#x3D;&quot;http:&#x2F;&#x2F;192.168.1.200:7890&quot;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Java NIO实现SOCKS代理协议</title>
    <link href="/post/e99ab4dc.html"/>
    <url>/post/e99ab4dc.html</url>
    
    <content type="html"><![CDATA[<p>SOCKS是一种网络传输协议，主要用于客户端与外网服务器之间通讯的中间传递。<br>当防火墙后的客户端要访问外部的服务器时，就跟SOCKS代理服务器连接。这个代理服务器控制客户端访问外网的资格，允许的话，就将客户端的请求发往外部的服务器。</p><span id="more"></span><h3 id="SOCKS协议解析"><a href="#SOCKS协议解析" class="headerlink" title="SOCKS协议解析"></a>SOCKS协议解析</h3><p>SOCKS代理需要以下几个步骤</p><p>1 握手，客户端与代理协商SOCKS5版本及账号密码</p><p>2 请求建立连接，客户端将发送要请求的远程地址发送给代理</p><p>3 发送数据包给代理服务，代理进行转发后，将目标服务的数据返回</p><p><img src="https://img.yjll.site/img/sock5.png" alt="sock5"></p><p>根据OSI模型，SOCKS是会话层的协议，位于表示层与传输层之间。</p><h3 id="OSI网络模型"><a href="#OSI网络模型" class="headerlink" title="OSI网络模型"></a>OSI网络模型</h3><p><img src="https://img.yjll.site/img/OSI_model.jpg" alt="OSI_model"></p><h3 id="Shadowsocks工作原理"><a href="#Shadowsocks工作原理" class="headerlink" title="Shadowsocks工作原理"></a>Shadowsocks工作原理</h3><p>Shadowsocks是基于Python开发的科学上网软件。Shadowsocks实现了SOCKS协议，SOCKS协议本身是没有加密功能的，为了防止GFW根据报文对数据进行拦截，所以要对数据进行加密。<br>Shadowsocks分为 <code>SS Local</code> 和 <code>SS Server</code>。</p><ul><li><code>SS Local</code>负责通过SOCKS协议与客户端交互，将客户端(浏览器)请求的数据加密发送给<code>SS Server</code>和将<code>SS Server</code>响应的数据解密返回给客户端。</li><li><code>SS Server</code>负责将<code>SS Local</code>请求的数据解密，发送给目标网站(例如google.com)，并将目标网站的响应进行加密返回。</li></ul><p><img src="https://img.yjll.site/img/Shadowsocks.jpg" alt="Shadowsocks"></p><h3 id="NIO实现"><a href="#NIO实现" class="headerlink" title="NIO实现"></a>NIO实现</h3><p>首先我们要先创建一个选择器和一个ServerSocketChannel，ServerSocketChannel订阅ACCEPT事件注册到选择器上，<code>selector.select()</code>会阻塞直到有请求到来时。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"starting server at port &#123;&#125;"</span><span class="token punctuation">,</span> ssConfig<span class="token punctuation">.</span><span class="token function">getLocalPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ServerSocketChannel</span> serverSocketChannel <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serverSocketChannel<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>ssConfig<span class="token punctuation">.</span><span class="token function">getLocalPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 非阻塞</span>    serverSocketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 订阅事件，当有请求时激活</span>    serverSocketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_ACCEPT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 阻塞线程，直到有订阅的事件</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">SelectionKey</span> selectionKey <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>selectionKey<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment">// 一个新的连接进来时，</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>selectionKey<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ServerSocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> selectionKey<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 新进来的SocketChannel                    </span>                <span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 我们希望从中获取数据，我们注册读事件，当数据可读时会通知我们</span>                <span class="token comment">// 并绑定一个处理器，当数据可读时，使用这个处理器进行数据处理</span>                socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_READ</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ChannelHandler</span><span class="token punctuation">(</span>ssConfig<span class="token punctuation">,</span> selector<span class="token punctuation">,</span> socketChannel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 交由对应的处理器来处理</span>                <span class="token class-name">ChannelHandler</span> channelHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ChannelHandler</span><span class="token punctuation">)</span> selectionKey<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>channelHandler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    channelHandler<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>selectionKey<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>处理器将根据事件状态进行分发</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">SocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 与浏览器交互的Channel</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>localSocketChannel <span class="token operator">==</span> channel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 当有request时，读取数据</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">onLocalRead</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 与远程服务交互的Channel</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>remoteSocketChannel <span class="token operator">==</span> channel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 远程可连接时，发送加密数据包</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isConnectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">onRemoteConnect</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 当远程返回数据时，进行解密，将解密数据返回给浏览器</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">onRemoteRead</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stage <span class="token operator">=</span> <span class="token class-name">SocksStage</span><span class="token punctuation">.</span><span class="token constant">STAGE_DESTROYED</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 销毁</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stage <span class="token operator">==</span> <span class="token class-name">SocksStage</span><span class="token punctuation">.</span><span class="token constant">STAGE_DESTROYED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>与浏览器交互的Channel可读取时表示有新的数据到来，需从Channel读取数据，并写入响应数据</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onLocalRead</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SocksStage</span> socksStage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stage<span class="token punctuation">;</span>        <span class="token keyword">int</span> read <span class="token operator">=</span> socketChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> readData <span class="token operator">=</span> <span class="token class-name">ByteBuffers</span><span class="token punctuation">.</span><span class="token function">convertByte</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>readData<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>stage <span class="token operator">=</span> <span class="token class-name">SocksStage</span><span class="token punctuation">.</span><span class="token constant">STAGE_DESTROYED</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 通过状态控制socks5交互的步骤</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>socksStage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*                +----+----------+----------+                |VER | NMETHODS | METHODS  |                +----+----------+----------+                | 1  |    1     |  1~255   |                +----+----------+----------+             */</span>            <span class="token comment">// 握手，告知支持的协议</span>            <span class="token keyword">case</span> <span class="token constant">STAGE_INIT</span><span class="token operator">:</span>                socketChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>stage <span class="token operator">=</span> <span class="token class-name">SocksStage</span><span class="token punctuation">.</span><span class="token constant">STAGE_ADDR</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment">/*                +----+-----+-------+------+----------+----------+                |VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |                +----+-----+-------+------+----------+----------+                | 1  |  1  |   1   |  1   | Variable |    2     |                +----+-----+-------+------+----------+----------+             */</span>            <span class="token comment">// request中有要访问的域名，此处需要与远程建立连接，订阅OP_CONNECT事件，当可连接时通知到我们。</span>            <span class="token keyword">case</span> <span class="token constant">STAGE_ADDR</span><span class="token operator">:</span>                remoteSocketChannel <span class="token operator">=</span> <span class="token class-name">SocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                remoteSocketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                remoteSocketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_CONNECT</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                remoteSocketChannel<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>ssConfig<span class="token punctuation">.</span><span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ssConfig<span class="token punctuation">.</span><span class="token function">getServerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                socketChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>stage <span class="token operator">=</span> <span class="token class-name">SocksStage</span><span class="token punctuation">.</span><span class="token constant">STAGE_CONNECTING</span><span class="token punctuation">;</span>                <span class="token comment">// 0x05 0x01 0x00 0x03 0x0a b'google.com'  0x00 0x50</span>                <span class="token comment">// 0x0a 表示域名长度</span>                <span class="token class-name">Socks5Utils</span><span class="token punctuation">.</span><span class="token function">parseAddr</span><span class="token punctuation">(</span>readData<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 去掉无用数据,缓存向服务端请求的数据</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>byteQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>readData<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> read<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token constant">STAGE_CONNECTING</span><span class="token operator">:</span>                <span class="token comment">// 远程未连接，但是客户端数据已经到达，将数据缓存到队列中</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>byteQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>readData<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token constant">STAGE_STREAM</span><span class="token operator">:</span>                <span class="token comment">// 将数据加密发送给远程服务器</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encrypt <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cryptHelper<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>readData<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>remoteSocketChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>encrypt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>与浏览器交互的第2步时，会与远程建立连接，订阅连接事件。此处为可连接时的处理，将数据推送给远程，并订阅读取事件准备接受远程服务器的响应</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onRemoteConnect</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> key<span class="token punctuation">,</span> <span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>socketChannel<span class="token punctuation">.</span><span class="token function">finishConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        key<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_READ</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stage <span class="token operator">=</span> <span class="token class-name">SocksStage</span><span class="token punctuation">.</span><span class="token constant">STAGE_STREAM</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">:</span> byteQueue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encrypt <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cryptHelper<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            socketChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>encrypt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>远程服务可读时表示有数据返回，读取并将数据解密，返回给浏览器</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onRemoteRead</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    socketChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> readData <span class="token operator">=</span> <span class="token class-name">ByteBuffers</span><span class="token punctuation">.</span><span class="token function">convertByte</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>readData<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stage <span class="token operator">=</span> <span class="token class-name">SocksStage</span><span class="token punctuation">.</span><span class="token constant">STAGE_DESTROYED</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decrypt <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cryptHelper<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>readData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>localSocketChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>decrypt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://zh.wikipedia.org/wiki/SOCKS">wiki</a></p><p><a href="https://github.com/shadowsocks/shadowsocks/tree/master">Shadowsocks</a></p><p><a href="http://scm.zoomquiet.top/data/20190107092538/index.html">Shadowsocks 源码分析——协议与结构</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NIO</tag>
      
      <tag>SOCKS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>当我们谈论NIO时我们在谈论什么</title>
    <link href="/post/9a133fa7.html"/>
    <url>/post/9a133fa7.html</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.yjll.site/img/NIO_HEAD.png" alt="NIO_HEAD"></p><p>NIO（Non-blocking I/O，在Java领域，也称为New I/O），是一种同步非阻塞的I/O模型，也是I/O多路复用的基础，已经被越来越多地应用到大型应用服务器，成为解决高并发与大量连接、I/O处理问题的有效方式。</p><span id="more"></span><h3 id="用户空间与内核空间"><a href="#用户空间与内核空间" class="headerlink" title="用户空间与内核空间"></a>用户空间与内核空间</h3><p>现在操作系统都是采用虚拟存储器，那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操作系统将虚拟空间划分为两部分，一部分为内核空间，一部分为用户空间。针对linux操作系统而言，将最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用，称为内核空间，而将较低的3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用，称为用户空间。</p><h3 id="缓存-IO"><a href="#缓存-IO" class="headerlink" title="缓存 IO"></a>缓存 IO</h3><p>缓存 IO 又被称作标准 IO，大多数文件系统的默认 IO 操作都是缓存 IO。在 Linux 的缓存 IO 机制中，操作系统会将 IO 的数据缓存在文件系统的页缓存（ page cache ）中，也就是说，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。</p><h3 id="I-O-模型"><a href="#I-O-模型" class="headerlink" title="I/O 模型"></a>I/O 模型</h3><h4 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h4><p><img src="https://img.yjll.site/img/BIO_model.png" alt="BIO_model"></p><p>每个连接需要独立的进程/线程单独处理</p><h4 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h4><p><img src="https://img.yjll.site/img/loop_model.png" alt="loop_model"></p><p>轮询将会不断地询问内核，这将占用大量的 CPU 时间</p><h4 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h4><p><img src="https://img.yjll.site/img/NIO_model.png" alt="NIO_model"></p><p>当连接数较少时效率相比多线程+阻塞 I/O 模型效率较低，可能延迟更大，因为单个连接处理需要 2 次系统调用，占用时间会有增加。</p><h3 id="应用层实现"><a href="#应用层实现" class="headerlink" title="应用层实现"></a>应用层实现</h3><h4 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Excutors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPollExecutor</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//线程池</span> <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> serverSocket<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">8088</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//主线程死循环等待新连接到来</span> <span class="token class-name">Socket</span> socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConnectIOnHandler</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为新的连接创建新的线程</span><span class="token keyword">class</span> <span class="token class-name">ConnectIOnHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Socket</span> socket<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ConnectIOnHandler</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> socket<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> someThing <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//读取数据</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>someThing<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//处理数据</span>            socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//写数据</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ServerSocketChannel</span> serverSocketChannel <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>serverSocketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> serverSocketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_ACCEPT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>selector.select()</code>将会阻塞线程，直到有连接,并根据订阅的事件进行分发</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> readyChannels <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>readyChannels <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">></span></span> selectedKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">></span></span> keyIterator <span class="token operator">=</span> selectedKeys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>keyIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> keyIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// a connection was accepted by a ServerSocketChannel.</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isConnectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// a connection was established with a remote server.</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// a channel is ready for reading</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// a channel is ready for writing</span>    <span class="token punctuation">&#125;</span>    keyIterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://draveness.me/golang/">Go 语言设计与实现</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NIO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Cloud Gateway 登录拦截</title>
    <link href="/post/a9515f36.html"/>
    <url>/post/a9515f36.html</url>
    
    <content type="html"><![CDATA[<p><code>Spring Cloud Gateway</code>为Spring官方基于Spring 5.0、Spring Boot2.0和Project Reactor等技术开发的网关，鉴权是网关常用的功能，本文介绍基于<code>Spring Cloud Gateway</code>的登录拦截功能。</p><span id="more"></span><p><code>GlobalFilter</code>为全局过滤器的标识接口，我这个拦截是针对所有服务，所以使用了全局过滤器。</p><p>实现<code>Ordered</code>为了告诉<code>Gateway</code>我这个过滤器的优先级，<code>getOrder</code>方法返回值越大优先级越低，越后执行。</p><p>还有要注意的是<code>Spring Cloud Gateway</code>底层使用的是<code>webflux</code>，基于响应式编程，我们也要避免代码中出现阻塞I/O的调用，所以我从Redis中取token使用的是非阻塞的<code>ReactiveRedisTemplate</code>。</p><blockquote><p>Talk is cheap,show me the code</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TOKEN_HEAD</span> <span class="token operator">=</span> <span class="token string">"token"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Redis中token前缀     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PREFIX</span> <span class="token operator">=</span> <span class="token string">"CASECODE:USER:TOKEN:"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">TIMEOUT</span> <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 需排除的接口     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> exclude_path <span class="token operator">=</span> <span class="token class-name">ImmutableSet</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>            <span class="token string">"/sep/user/login"</span><span class="token punctuation">,</span> <span class="token string">"/sep/user/getCheckCode/"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ReactiveRedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span><span class="token operator">::</span><span class="token function">getRequest</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>serverHttpRequest <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">String</span> path <span class="token operator">=</span> serverHttpRequest<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"path:&#123;&#125;"</span><span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 排除不需要登录的接口</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>exclude_path<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>path<span class="token operator">::</span><span class="token function">contains</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"无需登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// 从HEAD中取token</span>                    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tokens <span class="token operator">=</span> serverHttpRequest<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">TOKEN_HEAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 无TOKEN</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildLoginResp</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token class-name">Iterables</span><span class="token punctuation">.</span><span class="token function">getOnlyElement</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 拼接前缀做为RedisKey</span>                    <span class="token class-name">String</span> redisKey <span class="token operator">=</span> <span class="token constant">PREFIX</span> <span class="token operator">+</span> token<span class="token punctuation">;</span>                    <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>redisKey<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">defaultIfEmpty</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token constant">EMPTY</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>user <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"\nTOKEN:&#123;&#125;\nVALUE:&#123;&#125;"</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// redis中有该用户</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>redisKey<span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">TIMEOUT</span><span class="token punctuation">,</span> <span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span>                                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildLoginResp</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">buildLoginResp</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServerHttpResponse</span> response <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span> <span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"无效token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataBuffer</span> buffer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">bufferFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span><span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Cloud</tag>
      
      <tag>Gateway</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Cloud OpenFeign 上传文件</title>
    <link href="/post/4c4b951a.html"/>
    <url>/post/4c4b951a.html</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/OpenFeign/feign">Feign</a>是一个声明式的伪Http客户端，它使得写Http客户端变得更简单。</p><p><code>Spring Cloud OpenFeign</code>是<code>Spring Could</code>服务间调用的基础组件,将Feign进行了封装，更便于使用，本文使用<code>Spring Cloud OpenFeign</code>进行文件上传。</p><span id="more"></span><blockquote><p><code>spring-cloud-openfeign</code>版本<code>2.1.1.RELEASE</code></p></blockquote><h3 id="声明使用Form表单形式提交"><a href="#声明使用Form表单形式提交" class="headerlink" title="声明使用Form表单形式提交"></a>声明使用Form表单形式提交</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultipartSupportConfig</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Encoder</span> <span class="token function">feignFormEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpringFormEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/**     * @return 日志级别     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span> <span class="token function">feignLoggerLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span><span class="token constant">FULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>consumes</code>指定<code>MediaType</code>为<code>multipart/form-data</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">,</span> url <span class="token operator">=</span> <span class="token string">"http://localhost:8141"</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">"p/c"</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token class-name">MultipartSupportConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UploadFileClient</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"uploadPrintedCodesFile"</span><span class="token punctuation">,</span> consumes <span class="token operator">=</span> <span class="token constant">MULTIPART_FORM_DATA_VALUE</span><span class="token punctuation">)</span>    <span class="token class-name">Object</span> <span class="token function">uploadPrintedCodesFile</span><span class="token punctuation">(</span><span class="token class-name">UploadData</span> uploadData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>url也支持使用注入的方式<code>$&#123;jdl.base_url&#125;</code></p><h3 id="将文件放在对象中作为form表单中的一部分进行提交"><a href="#将文件放在对象中作为form表单中的一部分进行提交" class="headerlink" title="将文件放在对象中作为form表单中的一部分进行提交"></a>将文件放在对象中作为form表单中的一部分进行提交</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>   <span class="token keyword">private</span> <span class="token class-name">UploadFileClient</span> uploadFileClient<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"./mock.xls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">MultipartFile</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MockMultipartFile</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">UploadData</span> uploadData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UploadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       uploadData<span class="token punctuation">.</span><span class="token function">setFactoryNo</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       uploadData<span class="token punctuation">.</span><span class="token function">setFile</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>       uploadFileClient<span class="token punctuation">.</span><span class="token function">uploadPrintedCodesFile</span><span class="token punctuation">(</span>uploadData<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果只是想提交文件，方法可以这样写,将<code>MultipartFile</code>传入即可</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">,</span> url <span class="token operator">=</span> <span class="token string">"http://localhost:8141"</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">"p/c"</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token class-name">MultipartSupportConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UploadFileClient</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"uploadPrintedCodesFile"</span><span class="token punctuation">,</span> consumes <span class="token operator">=</span> <span class="token constant">MULTIPART_FORM_DATA_VALUE</span><span class="token punctuation">)</span>    <span class="token class-name">Object</span> <span class="token function">uploadPrintedCodesFile</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="多个client使用相同name报错"><a href="#多个client使用相同name报错" class="headerlink" title="多个client使用相同name报错"></a>多个client使用相同name报错</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Caused by: org.springframework.beans.factory.support.BeanDefinitionOverrideException: Invalid bean definition with name &#39;XXX.FeignClientSpecification&#39; defined in null:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>Spring Bean定义冲突导致服务不能启动,可以添加如下配置</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">spring.main.allow-bean-definition-overriding&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如果不想更改整体Spring配置的话，可以手动指定contextId,优先使用contextId作为ClientName</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">@FeignClient(value &#x3D; &quot;admin&quot;,contextId &#x3D; &quot;aTest&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Cloud</tag>
      
      <tag>Feign</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker使用宿主代理</title>
    <link href="/post/21f939f5.html"/>
    <url>/post/21f939f5.html</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.yjll.site/img/20200428102310.png" alt="20200428102310"></p><p>在docker中安装软件，下载地址在外国，下载速度奇慢，这个时候可以通过宿主的代理访问。</p><span id="more"></span><p>Docker启动容器，默认使用bridge模式分配网络，会在宿主机安装一个虚拟网卡docker0。我们通过<code>ifconfig</code>命令查看一下</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">docker0: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255        inet6 fe80::42:caff:fefe:2f7e  prefixlen 64  scopeid 0x20&lt;link&gt;        ether 02:42:ca:fe:2f:7e  txqueuelen 0  (Ethernet)        RX packets 7941959  bytes 525663055 (525.6 MB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 8654991  bytes 11073643780 (11.0 GB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>对于容器来说，宿主的IP地址为<code>172.17.0.1</code></p><h3 id="运行容器时使用代理"><a href="#运行容器时使用代理" class="headerlink" title="运行容器时使用代理"></a>运行容器时使用代理</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span>  <span class="token parameter variable">-e</span> <span class="token string">"HTTP_PROXY=http://192.168.1.200:7890"</span> <span class="token parameter variable">-e</span> <span class="token string">"HTTPS_PROXY=http://192.168.1.200:7890"</span> <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="在已有的容器中使用代理"><a href="#在已有的容器中使用代理" class="headerlink" title="在已有的容器中使用代理"></a>在已有的容器中使用代理</h3><p>我们进入容器进行代理配置</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">export http_proxy&#x3D;http:172.17.0.1:1081export https_proxy&#x3D;http:172.17.0.1:1081<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="bulid-Dockerfile-使用代理"><a href="#bulid-Dockerfile-使用代理" class="headerlink" title="bulid Dockerfile 使用代理"></a>bulid Dockerfile 使用代理</h3><p>编辑Dokkerfile添加以下环境</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ENV http_proxy &quot;http:&#x2F;&#x2F;172.17.0.1:1081&quot;ENV https_proxy &quot;http:&#x2F;&#x2F;172.17.0.1:1081&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="下载镜像时使用代理"><a href="#下载镜像时使用代理" class="headerlink" title="下载镜像时使用代理"></a>下载镜像时使用代理</h3><p>官方的镜像源在国外，我们可以使用国内的镜像，但有时还是需要通过官方的源拉取镜像</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo mkdir -p &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d# 创建proxy文件vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d&#x2F;proxy.conf # 配置代理地址[Service]Environment&#x3D;&quot;HTTPS_PROXY&#x3D;http:&#x2F;&#x2F;localhost:1081&quot;Environment&#x3D;&quot;HTTP_PROXY&#x3D;http:&#x2F;&#x2F;localhost:1081&quot;# 需要重启Dockersudo service docker restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="通过nginx搭建代理"><a href="#通过nginx搭建代理" class="headerlink" title="通过nginx搭建代理"></a>通过nginx搭建代理</h3><p>增加一下配置</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"># dockerlocation &#x2F;v2&#x2F; &#123;    proxy_pass https:&#x2F;&#x2F;registry-1.docker.io; # Docker Hub 的官方镜像仓库    proxy_set_header Host registry-1.docker.io;    proxy_set_header X-Real-IP $remote_addr;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    proxy_set_header X-Forwarded-Proto $scheme;    # 关闭缓存    proxy_buffering off;    # 转发认证相关的头部    proxy_set_header Authorization $http_authorization;    proxy_pass_header Authorization;    # 重写 www-authenticate 头为你的反代地址    proxy_hide_header www-authenticate;    add_header www-authenticate &#39;Bearer realm&#x3D;&quot;https:&#x2F;&#x2F;docker.yjll.site&#x2F;token&quot;,service&#x3D;&quot;registry.docker.io&quot;&#39; always;    # always 参数确保该头部在返回 401 错误时无论什么情况下都会被添加。    # 对 upstream 状态码检查，实现 error_page 错误重定向    proxy_intercept_errors on;    # error_page 指令默认只检查了第一次后端返回的状态码，开启后可以跟随多次重定向。    recursive_error_pages on;    # 根据状态码执行对应操作，以下为301、302、307状态码都会触发    error_page 301 302 307 &#x3D; @handle_redirect;&#125;# 处理 Docker OAuth2 Token 认证请求location &#x2F;token &#123;    resolver 1.1.1.1 valid&#x3D;600s;    proxy_pass https:&#x2F;&#x2F;auth.docker.io; # Docker 认证服务器    # 设置请求头，确保转发正确    proxy_set_header Host auth.docker.io;    proxy_set_header X-Real-IP $remote_addr;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    proxy_set_header X-Forwarded-Proto $scheme;    # 传递 Authorization 头信息，获取 Token    proxy_set_header Authorization $http_authorization;    proxy_pass_header Authorization;    # 禁用缓存    proxy_buffering off;&#125;location @handle_redirect &#123;    resolver 1.1.1.1;    set $saved_redirect_location &#39;$upstream_http_location&#39;;    proxy_pass $saved_redirect_location;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>下载镜像时使用自己的域名作为前缀，官方镜像记得手动拼入library，自定义镜像则不需要。</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">docker pull docker.xxx.net/library/postgres</code></pre></div></figure><p>好了，可以愉快的乱搞了。</p>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RDS MySQL 物理备份文件恢复到自建数据库</title>
    <link href="/post/236702d.html"/>
    <url>/post/236702d.html</url>
    
    <content type="html"><![CDATA[<p>阿里云提供了定期备份数据库的功能，可以在阿里云的控制台将数据库恢复到备份点，那我们想将这部分数据导入到我们自建的数据库怎么操作呢？官方推荐使用开源软件Percona Xtrabackup对数据库进行恢复，Percona Xtrabackup目前没有Windows版本，但是我们可以使用Docker进行恢复。</p><span id="more"></span><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>在阿里云的后台下载备份文件</p><p><img src="https://img.yjll.site/img/bak.png" alt="bak"></p><p>生产环境的数据库使用的Mysql 8.0.16，我直接通过docker运行，并直接进入容器内部。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">docker run -v &#x2F;root&#x2F;bak.xb:&#x2F;root&#x2F;bak.xb  -p 3308:3306 -it mysql:8.0.16 bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>先更换<a href="https://mirrors.163.com/.help/debian.html">163源</a>方便安装软件</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">cat &gt;&gt;&#x2F;etc&#x2F;apt&#x2F;sources.list&lt;&lt;EOFdeb http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F; stretch main non-free contribdeb http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F; stretch-updates main non-free contribdeb http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F; stretch-backports main non-free contribdeb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F; stretch main non-free contribdeb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F; stretch-updates main non-free contribdeb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian&#x2F; stretch-backports main non-free contribdeb http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian-security&#x2F; stretch&#x2F;updates main non-free contribdeb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian-security&#x2F; stretch&#x2F;updates main non-free contribEOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>安装我们的主角percona-xtrabackup用户恢复文件，直接下载deb包进行安装</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">apt -y install lsb-release wget aria2 vimwget https:&#x2F;&#x2F;repo.percona.com&#x2F;apt&#x2F;percona-release_latest.$(lsb_release -sc)_all.debdpkg -i percona-release_latest.$(lsb_release -sc)_all.debapt-get updateapt-get -y install percona-xtrabackup-80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>创建解压目录，官方文档中使用的这个路径，我懒得改了，就创建了一个</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">mkdir -p &#x2F;home&#x2F;mysql&#x2F;data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>开始解压</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">先安装qpress解压软件aria2c http:&#x2F;&#x2F;www.quicklz.com&#x2F;qpress-11-linux-x64.tartar xvf qpress-11-linux-x64.tarchmod 775 qpresscp qpress &#x2F;usr&#x2F;bincat bak.xb | xbstream -x -v -C &#x2F;home&#x2F;mysql&#x2F;dataxtrabackup --decompress --remove-original --target-dir&#x3D;&#x2F;home&#x2F;mysql&#x2F;data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>解压后进行数据恢复</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"># 删除原数据库中数据rm -rf &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;*xtrabackup --prepare --target-dir&#x3D;&#x2F;home&#x2F;mysql&#x2F;dataxtrabackup --datadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql --copy-back --target-dir&#x3D;&#x2F;home&#x2F;mysql&#x2F;data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>自建数据库不支持如下参数，需要注释掉。</p><p>vi /home/mysql/data/backup-my.cnf</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">#innodb_log_checksum_algorithm#innodb_fast_checksum#innodb_log_block_size#innodb_doublewrite_file#rds_encrypt_data#innodb_encrypt_algorithm#redo_log_version#master_key_id#server_uuid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>启动</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">mysqld_safe --defaults-file&#x3D;&#x2F;home&#x2F;mysql&#x2F;data&#x2F;backup-my.cnf --user&#x3D;root --datadir&#x3D;&#x2F;home&#x2F;mysql&#x2F;data &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">2020-04-28T09:43:49.658819Z mysqld_safe Logging to &#39;&#x2F;home&#x2F;mysql&#x2F;data&#x2F;14864923d3cb.err&#39;.2020-04-28T09:43:49.703474Z mysqld_safe Starting mysqld daemon with databases from &#x2F;home&#x2F;mysql&#x2F;data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>如果mysql服务没起来，可以查看/home/mysql/data/14864923d3cb.err这个日志文件</p><p>实际使用遇到过的问题</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">2020-08-18T06:18:32.304152Z 0 [ERROR] [MY-010095] [Server] Failed to access directory for --secure-file-priv. Please make sure that directory exists and is accessible by MySQL Server. Supplied value : &#x2F;var&#x2F;lib&#x2F;mysql-files<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><code>--secure-file-priv</code> 默认使用 <code>/var/lib/mysql-files</code>这个目录，我们更改一下</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;home&#x2F;mysql&#x2F;data&#x2F;backup-my.cnfsecure-file-priv&#x3D;&#x2F;home&#x2F;mysql&#x2F;data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">2020-08-18T06:20:49.765666Z 1 [ERROR] [MY-011087] [Server] Different lower_case_table_names settings for server (&#39;0&#39;) and data dictionary (&#39;1&#39;).<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>大小写配置问题</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">lower_case_table_names&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>再次启动后我们登录一下</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">root@a8a32828e279:&#x2F;home&#x2F;mysql&#x2F;data# mysql -upro -p            Enter password: Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 17Server version: 8.0.16 MySQL Community Server - GPLCopyright (c) 2000, 2019, Oracle and&#x2F;or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and&#x2F;or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.mysql&gt; show databases    -&gt; ;+--------------------+| Database           |+--------------------+| pro                || information_schema || mysql              |+--------------------+3 rows in set (0.01 sec)mysql&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>OK，大功告成</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://help.aliyun.com/knowledge_detail/41817.html">https://help.aliyun.com/knowledge_detail/41817.html</a></p>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Mysql</tag>
      
      <tag>Aliyun</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx使用Certbot配置HTTPS证书</title>
    <link href="/post/77a89a46.html"/>
    <url>/post/77a89a46.html</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.yjll.site/img/20200426131416.jpg" alt="20200426131416"></p><p>随着互联网的发展，数据安全问题越来越收到重视，Chrome 将没有配置 SSL 加密的 HTTP 网站标记为不安全，HTTPS是未来互联网发展的趋势，但是想要网站支持HTTPS网站必须有Certificate Authority颁发的证书，一般CA签发的证书都是收费的。本文将介绍如何使用免费的授权证书并自动续签。</p><p>Let’s Encrypt 是 一个叫 ISRG （ Internet Security Research Group ，互联网安全研究小组）的组织推出的免费安全证书计划。ISRG 的发起者 EFF （电子前哨基金会）为 Let’s Encrypt 项目发布了一个官方的客户端 Certbot ，利用它可以完全自动化的获取、部署和更新安全证书。</p><span id="more"></span><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>我们已经安装了Nginx，并且使用默认的80端口，例如我的Hexo博客配置，Certbot会更改nginx的配置文件，操作前最好备份一下nginx.conf。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">server &#123;    listen 80;    server_name blog.yjll.site;    location &#x2F; &#123;        include &#x2F;etc&#x2F;nginx&#x2F;mime.types;        root &#x2F;var&#x2F;www&#x2F;blog&#x2F;public;        index index.html;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我们先安装Certbot,我是用的是CentOS7，就直接使用yum安装啦。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">yum install python2-certbot-nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="通过Certbot获取配置证书"><a href="#通过Certbot获取配置证书" class="headerlink" title="通过Certbot获取配置证书"></a>通过Certbot获取配置证书</h3><p>安装完成后，输入命令</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">certbot --nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>只更改部分域名</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">certbot --nginx -d xxx.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>期间会要求输入邮箱信息，确认协议和域名等，根据提示输入就好。我们看一下生成好的nginx.conf，原来的80变成了443端口，增加了证书配置。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">server &#123;    server_name blog.yjll.site;    location &#x2F; &#123;        include &#x2F;etc&#x2F;nginx&#x2F;mime.types;        root &#x2F;var&#x2F;www&#x2F;blog&#x2F;public;        index index.html;    &#125;    listen 443 ssl; # managed by Certbot    ssl_certificate &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;yjll.site&#x2F;fullchain.pem; # managed by Certbot    ssl_certificate_key &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;yjll.site&#x2F;privkey.pem; # managed by Certbot    include &#x2F;etc&#x2F;letsencrypt&#x2F;options-ssl-nginx.conf; # managed by Certbot    ssl_dhparam &#x2F;etc&#x2F;letsencrypt&#x2F;ssl-dhparams.pem; # managed by Certbot&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>为了原来的http连接也可以正常使用，我们可以通过Nginx将http请求重定向到现在的端口上</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">server &#123;listen       80;rewrite ^(.*) https:&#x2F;&#x2F;$host$1 permanent;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>好了，可以在浏览器访问HTTP和HTTPS链接试一试了。</p><h3 id="自动续期"><a href="#自动续期" class="headerlink" title="自动续期"></a>自动续期</h3><p>使用起来确实挺方便的，但是Let’s Encrypt发布的证书期限只有三个月，在证书到期前我们要重新申请证书，<code>certbot</code>也提供了续订的功能</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">certbot renew<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>也就是说在证书过期前要运行一下上边的命令，并且重新加载nginx的配置文件，这部分我们可以配置在定时任务中。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">certbot renew --force-renew --renew-hook &quot;nginx -s reload&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://certbot.eff.org/">https://certbot.eff.org/</a></p><p><a href="https://learnku.com/articles/19999">https://learnku.com/articles/19999</a></p>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>Https</tag>
      
      <tag>Certbot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漫谈Guava之Cache（二）</title>
    <link href="/post/a6e28e21.html"/>
    <url>/post/a6e28e21.html</url>
    
    <content type="html"><![CDATA[<p>之前的文章介绍了Guava Cache的使用，本文将剖析Cache的源码，对Guava Cache的不太了解的可以移步这里：</p><p><a href="https://blog.yjll.site/post/96f462f9.html">漫谈Guava之Cache（一）</a></p><span id="more"></span><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>创建Cache需通过CacheBuilder，该处使用了建造者模式，我们来看CacheBuilder的build方法。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span>K1 <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> V1 <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span>K1<span class="token punctuation">,</span> V1<span class="token punctuation">></span></span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">checkWeightWithWeigher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">checkNonLoadingCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LocalCache<span class="token punctuation">.</span>LocalManualCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalManualCache</span><span class="token punctuation">(</span><span class="token class-name">CacheBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LocalCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>LocalManualCache 相当于LocalCache的包装类，大部分方法直接使用LocalCache的实现，部分方法自己实现了一下。我们直接看LocalCache的逻辑，LocalCache的实现参考了<code>ConcurrentHashMap</code>，采用分段锁技术，当一个线程访问一个 <code>Segment</code> 时，不会影响其他的 <code>Segment</code>。</p><p><img src="https://img.yjll.site/img/Segment.png" alt="Segment"></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">segmentFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> segments<span class="token punctuation">[</span><span class="token punctuation">(</span>hash <span class="token operator">>>></span> segmentShift<span class="token punctuation">)</span> <span class="token operator">&amp;</span> segmentMask<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>Segment中维护了5个队列</p><ul><li>keyReferenceQueue key引用队列</li><li>valueReferenceQueue value引用队列 </li><li>recencyQueue 临时队列，数据刷新清空该队列，队列中数据同步到accessQueue中</li><li>writeQueue 写队列</li><li>accessQueue 访问队列</li></ul><h3 id="存放元素"><a href="#存放元素" class="headerlink" title="存放元素"></a>存放元素</h3><p>segmentFor(hash)根据hash值取到Segment，优化并发操作。<br>加锁，<code>preWriteCleanup</code>删除被GC的数据，判断加入的元素在缓存中是否存在，若存在替换<code>enqueueNotification</code>或者不做更改，不存在新增放入缓存中，若缓存元素超限删除不活跃元素<code>evictEntries</code>(LRU)，最后释放锁并推送删除的元素给监听者<code>postWriteCleanup</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">checkNotNull</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">checkNotNull</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">segmentFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> now <span class="token operator">=</span> map<span class="token punctuation">.</span>ticker<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 清理过期数据和被GC回收的数据</span>    <span class="token function">preWriteCleanup</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> newCount <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 扩容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCount <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>threshold<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// ensure capacity</span>      <span class="token function">expand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      newCount <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">AtomicReferenceArray</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReferenceEntry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> table <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>table<span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ReferenceEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> first <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Look for an existing entry.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ReferenceEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> first<span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">K</span> entryKey <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> hash          <span class="token operator">&amp;&amp;</span> entryKey <span class="token operator">!=</span> <span class="token keyword">null</span>          <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">.</span>keyEquivalence<span class="token punctuation">.</span><span class="token function">equivalent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> entryKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// We found an existing entry.</span>        <span class="token class-name">ValueReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> valueReference <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getValueReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">V</span> entryValue <span class="token operator">=</span> valueReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 表示触发GC，值被回收了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entryValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token operator">++</span>modCount<span class="token punctuation">;</span>          <span class="token comment">// 排除CacheLoad加载的数据</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>valueReference<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 移入删除队列中，由删除队列触发监听</span>            <span class="token function">enqueueNotification</span><span class="token punctuation">(</span>                key<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> entryValue<span class="token punctuation">,</span> valueReference<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">RemovalCause</span><span class="token punctuation">.</span><span class="token constant">COLLECTED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>            newCount <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span> <span class="token comment">// count remains unchanged</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>            newCount <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> newCount<span class="token punctuation">;</span> <span class="token comment">// write-volatile</span>          <span class="token comment">// 移除原来元素</span>          <span class="token function">evictEntries</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">// Mimic</span>          <span class="token comment">// "if (!map.containsKey(key)) ...</span>          <span class="token comment">// else return map.get(key);</span>          <span class="token comment">// 只更新最后访问时间</span>          <span class="token function">recordLockedRead</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> entryValue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// clobber existing entry, count remains unchanged</span>          <span class="token operator">++</span>modCount<span class="token punctuation">;</span>          <span class="token comment">// 与第一个条件分支逻辑类似</span>          <span class="token function">enqueueNotification</span><span class="token punctuation">(</span>              key<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> entryValue<span class="token punctuation">,</span> valueReference<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">RemovalCause</span><span class="token punctuation">.</span><span class="token constant">REPLACED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">evictEntries</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> entryValue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Create a new entry.</span>    <span class="token comment">// 缓存中没有，创建一个</span>    <span class="token operator">++</span>modCount<span class="token punctuation">;</span>    <span class="token class-name">ReferenceEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> newEntry <span class="token operator">=</span> <span class="token function">newEntry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 包装key，value放到newEntry中，并调用recordWrite()方法，更新权重,将entry存入accessQueue，writeQueue队列中</span>    <span class="token function">setValue</span><span class="token punctuation">(</span>newEntry<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> newEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>    newCount <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// count用volatile修饰，保证内存可见性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> newCount<span class="token punctuation">;</span> <span class="token comment">// write-volatile</span>    <span class="token comment">// 新增元素后有可能导致缓存数据过多，需进行清理，优先删除较少访问的</span>    <span class="token function">evictEntries</span><span class="token punctuation">(</span>newEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 移除的元素会放到单独队列中，此时触发监听</span>    <span class="token function">postWriteCleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>添加或替换元素时会触发<code>recordWrite</code>,更新写队列和读队列</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">ReferenceEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> entry<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> now<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">ValueReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> previous <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValueReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> weight <span class="token operator">=</span> map<span class="token punctuation">.</span>weigher<span class="token punctuation">.</span><span class="token function">weigh</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">checkState</span><span class="token punctuation">(</span>weight <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Weights must be non-negative"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ValueReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> valueReference <span class="token operator">=</span>      map<span class="token punctuation">.</span>valueStrength<span class="token punctuation">.</span><span class="token function">referenceValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> entry<span class="token punctuation">,</span> value<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>  entry<span class="token punctuation">.</span><span class="token function">setValueReference</span><span class="token punctuation">(</span>valueReference<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">recordWrite</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> weight<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>  previous<span class="token punctuation">.</span><span class="token function">notifyNewValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">recordWrite</span><span class="token punctuation">(</span><span class="token class-name">ReferenceEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> entry<span class="token punctuation">,</span> <span class="token keyword">int</span> weight<span class="token punctuation">,</span> <span class="token keyword">long</span> now<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// we are already under lock, so drain the recency queue immediately</span>  <span class="token function">drainRecencyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  totalWeight <span class="token operator">+=</span> weight<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">recordsAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    entry<span class="token punctuation">.</span><span class="token function">setAccessTime</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">recordsWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    entry<span class="token punctuation">.</span><span class="token function">setWriteTime</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  accessQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>  writeQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>缓存元素有变动时会调用<code>drainRecencyQueue</code>方法，将<code>recencyQueue</code>队列数据清空，并按照队列顺序放入访问队列中以备LRU策略删除</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">drainRecencyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ReferenceEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> recencyQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// An entry may be in the recency queue despite it being removed from</span>      <span class="token comment">// the map . This can occur when the entry was concurrently read while a</span>      <span class="token comment">// writer is removing it from the segment or after a clear has removed</span>      <span class="token comment">// all of the segment's entries.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>accessQueue<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        accessQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="取元素"><a href="#取元素" class="headerlink" title="取元素"></a>取元素</h3><p>和存放逻辑一样，也要先取对应的Segment。从Segment中取出value，value不为空继续判断是否超过缓存过期时间，若元素可用，更新读队列，最后清除GC和过期数据。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">V</span> <span class="token function">getIfPresent</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">V</span> value <span class="token operator">=</span> <span class="token function">segmentFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    globalStatsCounter<span class="token punctuation">.</span><span class="token function">recordMisses</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    globalStatsCounter<span class="token punctuation">.</span><span class="token function">recordHits</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// `getLiveEntry`方法传入当前时间，过期返回空</span><span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> hash<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// read-volatile</span>      <span class="token keyword">long</span> now <span class="token operator">=</span> map<span class="token punctuation">.</span>ticker<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">ReferenceEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> <span class="token function">getLiveEntry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">V</span> value <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getValueReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 未被GC回收</span>        <span class="token comment">// 放入recencyQueue队列中</span>        <span class="token function">recordRead</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 当前时间和写入的时间超过刷新间隔，重新加载value</span>        <span class="token keyword">return</span> <span class="token function">scheduleRefresh</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hash<span class="token punctuation">,</span> value<span class="token punctuation">,</span> now<span class="token punctuation">,</span> map<span class="token punctuation">.</span>defaultLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 垃圾回收</span>      <span class="token function">tryDrainReferenceQueues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 清超时和GC数据</span>    <span class="token function">postReadCleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">ReferenceEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">getLiveEntry</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token keyword">long</span> now<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">ReferenceEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> <span class="token function">getEntry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">isExpired</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 缓存已过期</span>    <span class="token function">tryExpireEntries</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> e<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.cnblogs.com/aspirant/p/11734918.html">Guava cacha 机制及源码分析</a></p><p><a href="https://www.jianshu.com/p/2502e8301ec7">guava Cache源码分析（二）</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Guava</tag>
      
      <tag>Cache</tag>
      
      <tag>缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漫谈Guava之Cache（一）</title>
    <link href="/post/96f462f9.html"/>
    <url>/post/96f462f9.html</url>
    
    <content type="html"><![CDATA[<p>计算机的世界中，缓存无处不在，最常见的如CPU高速缓存，<code>CPU Cache</code>是用于减少<a href="https://zh.wikipedia.org/wiki/中央处理器">处理器</a>访问内存所需平均时间的部件。在金字塔式<a href="https://zh.wikipedia.org/w/index.php?title=存储体系&action=edit&redlink=1">存储体系</a>中它位于自顶向下的第二层，仅次于<a href="https://zh.wikipedia.org/wiki/寄存器">CPU寄存器</a>。其容量远小于<a href="https://zh.wikipedia.org/wiki/内存">内存</a>，但速度却可以接近处理器的频率。</p><p>当处理器发出内存访问请求时，会先查看缓存内是否有请求数据。如果存在（命中），则不经访问内存直接返回该数据；如果不存在（失效），则要先把内存中的相应数据载入缓存，再将其返回处理器。</p><p>这和我们日常开发中的很多场景相似，例如调用第三方接口取数据，微服务间取数据，甚至从数据库中取数据。这些IO操作所消耗的时间对于CPU来说是很久的。如果这些数据是读多写少，也就是说数据不会轻易改变，那我们可以把这部分数据进行缓存，取数据前先访问缓存，在缓存中查不到时再走原来的逻辑。</p><span id="more"></span><p>日常开发中我们可能会使用<code>ConcurrentHashMap</code>存数据，替代缓存使用，简单场景这样使用没什么问题，只是<code>ConcurrentHashMap</code>设计的目的不是做缓存，所以很多Cache应该有的很多功能，<code>ConcurrentHashMap</code>并不直接支持，类如设置key的过期时间，内存不足时释放缓存等。</p><p>本文介绍Guava的Cache使用，为该系列的第一部分。</p><p>我先写一个简单的例子，创建一个缓存，该缓存最多存100个元素，超时时间为10分钟</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> cache <span class="token operator">=</span> <span class="token class-name">CacheBuilder</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cache<span class="token punctuation">.</span><span class="token function">getIfPresent</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> defaultValue<span class="token punctuation">)</span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="CacheLoader"><a href="#CacheLoader" class="headerlink" title="CacheLoader"></a>CacheLoader</h3><p>上文中的<code>cache.get(key, () -&gt; defaultValue)</code>会在<code>cache</code>中没这条数据的情况下，根据我们写的策略重新计算，并将数据保存在缓存中一份。对于这种情况可以使用<code>CacheLoader</code>来统一处理。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LoadingCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token class-name">Graph</span><span class="token punctuation">></span></span> graphs <span class="token operator">=</span> <span class="token class-name">CacheBuilder</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">expireAfterAccess</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>          <span class="token keyword">new</span> <span class="token class-name">CacheLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token class-name">Graph</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token class-name">Graph</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// no checked exception</span>              <span class="token keyword">return</span> <span class="token function">createExpensiveGraph</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">return</span> graphs<span class="token punctuation">.</span><span class="token function">getUnchecked</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="三种淘汰策略"><a href="#三种淘汰策略" class="headerlink" title="三种淘汰策略"></a>三种淘汰策略</h2><blockquote><p>Guava provides three basic types of eviction: size-based eviction, time-based eviction, and reference-based eviction.</p></blockquote><h3 id="容量大小"><a href="#容量大小" class="headerlink" title="容量大小"></a>容量大小</h3><p>前文使用的<code>CacheBuilder.maximumSize(long)</code> 便可限制最大缓存数量。<br>如缓冲的每条数据有不同的权重的话可自己写<code>Weigher</code>策略，并设置最大<code>重量</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LoadingCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token class-name">Graph</span><span class="token punctuation">></span></span> graphs <span class="token operator">=</span> <span class="token class-name">CacheBuilder</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">maximumWeight</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">weigher</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Weigher</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token class-name">Graph</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">weigh</span><span class="token punctuation">(</span><span class="token class-name">Key</span> k<span class="token punctuation">,</span> <span class="token class-name">Graph</span> g<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> g<span class="token punctuation">.</span><span class="token function">vertices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>           <span class="token keyword">new</span> <span class="token class-name">CacheLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token class-name">Graph</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">public</span> <span class="token class-name">Graph</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// no checked exception</span>               <span class="token keyword">return</span> <span class="token function">createExpensiveGraph</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><p><code>CacheBuilder</code> provides two approaches to timed eviction:</p><ul><li><code>expireAfterAccess(long, TimeUnit)</code> 读或写多长时间后，缓存失效</li><li><code>expireAfterWrite(long, TimeUnit)</code> 值更改后多长时间后，缓存失效</li></ul><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>使用JVM的垃圾回收，可被动的缓存失效。</p><ul><li><code>CacheBuilder.weakKeys()</code> 对key使用弱引用包装</li><li><code>CacheBuilder.weakValues()</code> 对value使用弱引用包装</li><li><code>CacheBuilder.softValues()</code> 对soft使用软引用包装</li></ul><h2 id="Removal-Listeners"><a href="#Removal-Listeners" class="headerlink" title="Removal Listeners"></a>Removal Listeners</h2><p>如果我们想对淘汰的元素进行处理，我们可以写一个<code>RemovalListener</code>对Cache进行监听。例如我们将DB连接存入cache中，当缓存失效时，我们需要关闭数据库连接，这部分逻辑就可以通过<code>RemovalListener</code>来完成</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CacheLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token class-name">DatabaseConnection</span><span class="token punctuation">></span></span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CacheLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token class-name">DatabaseConnection</span><span class="token punctuation">></span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">DatabaseConnection</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">openConnection</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">RemovalListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token class-name">DatabaseConnection</span><span class="token punctuation">></span></span> removalListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemovalListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token class-name">DatabaseConnection</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRemoval</span><span class="token punctuation">(</span><span class="token class-name">RemovalNotification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token class-name">DatabaseConnection</span><span class="token punctuation">></span></span> removal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">DatabaseConnection</span> conn <span class="token operator">=</span> removal<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// tear down properly</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">CacheBuilder</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">removalListener</span><span class="token punctuation">(</span>removalListener<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="Refresh"><a href="#Refresh" class="headerlink" title="Refresh"></a>Refresh</h2><p>对于失效性比较强的元素，我们可以配置刷新的策略。刷新和淘汰不同，刷新元素是可以是异步操作，刷新未完成时返回还是原数据，刷新成功则返回新数据。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Some keys don't need refreshing, and we want refreshes to be done asynchronously.</span><span class="token class-name">LoadingCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token class-name">Graph</span><span class="token punctuation">></span></span> graphs <span class="token operator">=</span> <span class="token class-name">CacheBuilder</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">refreshAfterWrite</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>           <span class="token keyword">new</span> <span class="token class-name">CacheLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token class-name">Graph</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">public</span> <span class="token class-name">Graph</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// no checked exception</span>               <span class="token keyword">return</span> <span class="token function">getGraphFromDatabase</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>             <span class="token keyword">public</span> <span class="token class-name">ListenableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Graph</span><span class="token punctuation">></span></span> <span class="token function">reload</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Key</span> key<span class="token punctuation">,</span> <span class="token class-name">Graph</span> prevGraph<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">neverNeedsRefresh</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token keyword">return</span> <span class="token class-name">Futures</span><span class="token punctuation">.</span><span class="token function">immediateFuture</span><span class="token punctuation">(</span>prevGraph<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">// asynchronous!</span>                 <span class="token class-name">ListenableFutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Graph</span><span class="token punctuation">></span></span> task <span class="token operator">=</span> <span class="token class-name">ListenableFutureTask</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Graph</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">public</span> <span class="token class-name">Graph</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                     <span class="token keyword">return</span> <span class="token function">getGraphFromDatabase</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>                 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> task<span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>             <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Guava</tag>
      
      <tag>Cache</tag>
      
      <tag>缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Cloud Gateway 分布式限流</title>
    <link href="/post/c7e397c2.html"/>
    <url>/post/c7e397c2.html</url>
    
    <content type="html"><![CDATA[<p>前文我们介绍过通过Guava中的RateLimiter进行限流，但Guava中的工具只适用同一JVM中的操作，想要在分布式环境中进行接口限流我们还需要引入中间件，本文介绍基于Redis的接口限流。</p><span id="more"></span><h3 id="Spring-Cloud-Gateway"><a href="#Spring-Cloud-Gateway" class="headerlink" title="Spring Cloud Gateway"></a>Spring Cloud Gateway</h3><p><code>Spring Cloud Gateway</code>为Spring官方基于Spring 5.0、Spring Boot2.0和Project Reactor等技术开发的网关，限流作为网关应用中常用功能，<code>Gateway</code>也提供了一个基于Redis的分布式过滤器，简单配置，即可在网关层进行流量限制。</p><blockquote><p>注：本文的<code>Spring Cloud</code> 版本为<code>Greenwich.SR1</code></p></blockquote><p><code>Spring Cloud Gateway</code>的路由配置支持配置文件和Java代码配置，为了直观展示源码，本文使用Java代码编写路由。</p><ul><li>RedisRateLimiter 基于Redis的过滤器</li><li>setBurstCapacity() 设置令牌桶的容量</li><li>setReplenishRate() 设置每秒可取的令牌数量</li><li>setKeyResolver(pathKeyResolver) 配置过滤key的策略，本文使用路径作为过滤的key</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PathKeyResolver</span> <span class="token keyword">implements</span> <span class="token class-name">KeyResolver</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouteLocatorConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">PathKeyResolver</span> pathKeyResolver<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RouteLocator</span> <span class="token function">customerRouteLocator</span><span class="token punctuation">(</span><span class="token class-name">RouteLocatorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/admin/**"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span>f <span class="token operator">-></span> f<span class="token punctuation">.</span><span class="token function">requestRateLimiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">rateLimiter</span><span class="token punctuation">(</span><span class="token class-name">RedisRateLimiter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> c <span class="token operator">-></span> c<span class="token punctuation">.</span><span class="token function">setBurstCapacity</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setReplenishRate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>c <span class="token operator">-></span> c<span class="token punctuation">.</span><span class="token function">setKeyResolver</span><span class="token punctuation">(</span>pathKeyResolver<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"lb://ADMIN"</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>RouteLocator配置完成后限流器就可以正常使用了，每个路径符合<code>/admin/**</code>的请求都会经过<code>RequestRateLimiterGatewayFilterFactory</code>的<code>apply()</code>方法。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">GatewayFilter</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Config</span> config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 取过滤key的策略，我们这里使用上文自定义的 PathKeyResolver</span>   <span class="token class-name">KeyResolver</span> resolver <span class="token operator">=</span> <span class="token function">getOrDefault</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>keyResolver<span class="token punctuation">,</span> defaultKeyResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 限流器，我们这里使用 RedisRateLimiter</span>   <span class="token class-name">RateLimiter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> limiter <span class="token operator">=</span> <span class="token function">getOrDefault</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>rateLimiter<span class="token punctuation">,</span>         defaultRateLimiter<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 解析的key为空时是否拦截 默认拦截</span>   <span class="token keyword">boolean</span> denyEmpty <span class="token operator">=</span> <span class="token function">getOrDefault</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>denyEmptyKey<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>denyEmptyKey<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">HttpStatusHolder</span> emptyKeyStatus <span class="token operator">=</span> <span class="token class-name">HttpStatusHolder</span>         <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>emptyKeyStatus<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>emptyKeyStatusCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Route</span> route <span class="token operator">=</span> exchange            <span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchangeUtils</span><span class="token punctuation">.</span><span class="token constant">GATEWAY_ROUTE_ATTR</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据我们写的过滤策略计算出key</span>      <span class="token keyword">return</span> resolver<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">defaultIfEmpty</span><span class="token punctuation">(</span><span class="token constant">EMPTY_KEY</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>key <span class="token operator">-></span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">EMPTY_KEY</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>denyEmpty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token function">setResponseStatus</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> emptyKeyStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token comment">// key 不为空时走限流逻辑，这里使用的RateLimiter的isAllowed()方法</span>         <span class="token keyword">return</span> limiter<span class="token punctuation">.</span><span class="token function">isAllowed</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>response <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> header <span class="token operator">:</span> response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     header<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">setResponseStatus</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>resolver.resolve(exchange)</code>实际调用<code>RedisRateLimiter</code>限流器的<code>isAllowed</code>方法</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Response</span><span class="token punctuation">></span></span> <span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token class-name">String</span> routeId<span class="token punctuation">,</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>initialized<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"RedisRateLimiter is not initialized"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token class-name">Config</span> routeConfig <span class="token operator">=</span> <span class="token function">loadConfiguration</span><span class="token punctuation">(</span>routeId<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// How many requests per second do you want a user to be allowed to do?</span>    <span class="token comment">// 每秒可取多少令牌</span>   <span class="token keyword">int</span> replenishRate <span class="token operator">=</span> routeConfig<span class="token punctuation">.</span><span class="token function">getReplenishRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// How much bursting do you want to allow?</span>    <span class="token comment">// 令牌桶的容量</span>   <span class="token keyword">int</span> burstCapacity <span class="token operator">=</span> routeConfig<span class="token punctuation">.</span><span class="token function">getBurstCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 生成redis的key,request_rate_limiter.&#123;id&#125;.tokens和request_rate_limiter.&#123;id&#125;.timestamp</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keys <span class="token operator">=</span> <span class="token function">getKeys</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// The arguments to the LUA script. time() returns unixtime in seconds.</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> scriptArgs <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>replenishRate <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span>            burstCapacity <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEpochSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// allowed, tokens_left = redis.eval(SCRIPT, keys, args)</span>       <span class="token comment">// redis中支持lua脚本原子性执行,该脚本在Bean初始化时装配进来</span>      <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span><span class="token punctuation">></span></span> flux <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>script<span class="token punctuation">,</span> keys<span class="token punctuation">,</span>            scriptArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// .log("redisratelimiter", Level.FINER);</span>      <span class="token keyword">return</span> flux<span class="token punctuation">.</span><span class="token function">onErrorResume</span><span class="token punctuation">(</span>throwable <span class="token operator">-></span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>longs<span class="token punctuation">,</span> l<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>               longs<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> longs<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>results <span class="token operator">-></span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 根据lua脚本返回值判断是否允许通过</span>               <span class="token keyword">boolean</span> allowed <span class="token operator">=</span> results<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1L</span><span class="token punctuation">;</span>               <span class="token class-name">Long</span> tokensLeft <span class="token operator">=</span> results<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>allowed<span class="token punctuation">,</span>                     <span class="token function">getHeaders</span><span class="token punctuation">(</span>routeConfig<span class="token punctuation">,</span> tokensLeft<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"response: "</span> <span class="token operator">+</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token keyword">return</span> response<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/*       * We don't want a hard dependency on Redis to allow traffic. Make sure to set       * an alert so you know if this is happening too much. Stripe's observed       * failure rate is 0.01%.       */</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error determining if user allowed from redis"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token function">getHeaders</span><span class="token punctuation">(</span>routeConfig<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>this.script</code>为Bean初始化时装配进来，<code>GatewayRedisAutoConfiguration#redisRequestRateLimiterScript</code>将lua脚本从文件中读取并注册成Bean</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">RedisScript</span> <span class="token function">redisRequestRateLimiterScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">DefaultRedisScript</span> redisScript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   redisScript<span class="token punctuation">.</span><span class="token function">setScriptSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceScriptSource</span><span class="token punctuation">(</span>         <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"META-INF/scripts/request_rate_limiter.lua"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   redisScript<span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> redisScript<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>request_rate_limiter.lua</code>中的代码，与前文所讲的Guava中的RateLimiter实现大同小异</p><figure><div class="code-wrapper"><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> tokens_key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">local</span> timestamp_key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">--redis.log(redis.LOG_WARNING, "tokens_key " .. tokens_key)</span><span class="token keyword">local</span> rate <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">local</span> capacity <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">local</span> now <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">local</span> requested <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">local</span> fill_time <span class="token operator">=</span> capacity<span class="token operator">/</span>rate<span class="token comment">-- 计算超时时间</span><span class="token keyword">local</span> ttl <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>fill_time<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">--redis.log(redis.LOG_WARNING, "rate " .. ARGV[1])</span><span class="token comment">--redis.log(redis.LOG_WARNING, "capacity " .. ARGV[2])</span><span class="token comment">--redis.log(redis.LOG_WARNING, "now " .. ARGV[3])</span><span class="token comment">--redis.log(redis.LOG_WARNING, "requested " .. ARGV[4])</span><span class="token comment">--redis.log(redis.LOG_WARNING, "filltime " .. fill_time)</span><span class="token comment">--redis.log(redis.LOG_WARNING, "ttl " .. ttl)</span><span class="token keyword">local</span> last_tokens <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> tokens_key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> last_tokens <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>  last_tokens <span class="token operator">=</span> capacity<span class="token keyword">end</span><span class="token comment">--redis.log(redis.LOG_WARNING, "last_tokens " .. last_tokens)</span><span class="token comment">-- 最后刷新时间</span><span class="token keyword">local</span> last_refreshed <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> timestamp_key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> last_refreshed <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>  last_refreshed <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">end</span><span class="token comment">--redis.log(redis.LOG_WARNING, "last_refreshed " .. last_refreshed)</span><span class="token comment">-- 和上次请求的时间差</span><span class="token keyword">local</span> delta <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> now<span class="token operator">-</span>last_refreshed<span class="token punctuation">)</span><span class="token comment">-- 计算令牌桶中token数量</span><span class="token keyword">local</span> filled_tokens <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> last_tokens<span class="token operator">+</span><span class="token punctuation">(</span>delta<span class="token operator">*</span>rate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 桶中令牌数量是否足够</span><span class="token keyword">local</span> allowed <span class="token operator">=</span> filled_tokens <span class="token operator">>=</span> requested<span class="token keyword">local</span> new_tokens <span class="token operator">=</span> filled_tokens<span class="token keyword">local</span> allowed_num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> allowed <span class="token keyword">then</span>  <span class="token comment">-- 桶中令牌被取走</span>  new_tokens <span class="token operator">=</span> filled_tokens <span class="token operator">-</span> requested  allowed_num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">end</span><span class="token comment">--redis.log(redis.LOG_WARNING, "delta " .. delta)</span><span class="token comment">--redis.log(redis.LOG_WARNING, "filled_tokens " .. filled_tokens)</span><span class="token comment">--redis.log(redis.LOG_WARNING, "allowed_num " .. allowed_num)</span><span class="token comment">--redis.log(redis.LOG_WARNING, "new_tokens " .. new_tokens)</span><span class="token comment">-- 剩余令牌数量</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"setex"</span><span class="token punctuation">,</span> tokens_key<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> new_tokens<span class="token punctuation">)</span><span class="token comment">-- 刷新时间设为当前</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"setex"</span><span class="token punctuation">,</span> timestamp_key<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span> allowed_num<span class="token punctuation">,</span> new_tokens <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h3><p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务。本文使用Redisson提供的RRateLimiter实现分布式限流。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RRateLimiterDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">RRateLimiter</span> rateLimiter <span class="token operator">=</span> <span class="token class-name">RedisClient</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">getRateLimiter</span><span class="token punctuation">(</span><span class="token string">"rate_limiter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        rateLimiter<span class="token punctuation">.</span><span class="token function">trySetRate</span><span class="token punctuation">(</span><span class="token class-name">RateType</span><span class="token punctuation">.</span><span class="token constant">PER_CLIENT</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">RateIntervalUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 5个线程同时调用，模拟多个请求同时访问</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">acquire</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// acquire方法默认取一个令牌，桶中令牌不够的话会阻塞线程</span>        rateLimiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前系统时间:%s\n"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>静态代码块中为设置限流器的速率，每秒生成两个令牌。下面是控制台打印的结果，可以看出来时间间隔和预想的一致。</p><p>该限流器也是通过lua脚本实现限流，实现逻辑与之前介绍的大同小异，我就不做过多展示了。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">当前系统时间:2020-04-08T16:49:40.425当前系统时间:2020-04-08T16:49:40.425当前系统时间:2020-04-08T16:49:41.420当前系统时间:2020-04-08T16:49:41.421当前系统时间:2020-04-08T16:49:42.422<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>Redis限流器不仅仅今天介绍的这两种，分布式限流器也不限于Redis，但通过这两篇介绍限流器的文章可以发现他们的原理都是相通的，我们了解其中的思想即可。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>limiter</tag>
      
      <tag>Spring Cloud</tag>
      
      <tag>Gateway</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漫谈限流器</title>
    <link href="/post/38378326.html"/>
    <url>/post/38378326.html</url>
    
    <content type="html"><![CDATA[<p>​    日常开发中经常会出现一瞬间接口被超频次访问的这种情况，例如电商秒杀活动，定点抢红包等。短时间高并发可能会拖慢系统的响应速度，引起网络超时，一个服务不可用进而影响其他服务也不可用，甚至导致雪崩。</p><p>​    限流是最直接有效的控制手段，将系统处理不过来的请求拦截在核心逻辑之外。限流器实现方法有<code>漏桶算法(Leaky Bucket),</code>令牌桶算法(Token Bucket)`等。</p><span id="more"></span><ul><li>漏斗算法 理解起来比较简单，水(即请求)流入固定大小的漏斗内，漏斗也已一定的速度流出水，当水满时停止流入,进行限流。</li><li>令牌桶算法 同样是固定大小的桶，定期往桶中投令牌，有新请求时需从桶中取令牌，当桶中无令牌可取时，则拒绝。</li></ul><p>本文使用<code>Guava</code>中的<code>RateLimiter</code>进行限流，我使用的Guava的版本为<code>28.2-jre</code>，不同版本api可能略有偏差。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GuavaLimiterDemo</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 每秒生成2个令牌</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">RateLimiter</span> rateLimiter <span class="token operator">=</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 5个线程同时调用，模拟多个请求同时访问</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">acquire</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// acquire方法默认取一个令牌，桶中令牌不够的话会阻塞线程,返回值为线程阻塞时间</span>        <span class="token keyword">double</span> acquire <span class="token operator">=</span> rateLimiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前系统时间:%s,等待秒数:%s\n"</span><span class="token punctuation">,</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>acquire<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> acquire<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>​    调用静态方法<code>create()</code>创建限流器,参数为每秒生产令牌的数量</p><p>​    <code>acquire()</code>方法默认取一个令牌，可用调用重载的方法取多个令牌，如果桶中无令牌该方法会阻塞，开发过程中要注意大量线程挂起的问题，慎用。</p><p>​    <code>tryAcquire()</code>方法可解决上述问题，取一个令牌，如桶中无令牌直接返回false。<br><code>tryAcquire(int permits, long timeout, TimeUnit unit)</code>可传入超时时间，超过这段时间桶中还是无令牌可取的话返回false。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">当前系统时间:2020-03-25T13:30:37.757,等待秒数:0.0当前系统时间:2020-03-25T13:30:38.195,等待秒数:0.458741当前系统时间:2020-03-25T13:30:38.694,等待秒数:0.958729当前系统时间:2020-03-25T13:30:39.194,等待秒数:1.458717当前系统时间:2020-03-25T13:30:39.695,等待秒数:1.958704<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>​    这是控制台打印的结果，每秒放入两个令牌的桶，同时有5个线程访问。基本每0.5秒放行一个请求。</p><h3 id="Guava-RateLimiter-实现原理"><a href="#Guava-RateLimiter-实现原理" class="headerlink" title="Guava RateLimiter 实现原理"></a>Guava RateLimiter 实现原理</h3><p><img src="https://img.yjll.site/img/20200327141557.png" alt=""></p><p>​    RateLimiter限流器实现了两种算法<code>SmoothWarmingUp(漏斗算法)</code>和<code>SmoothBursty(令牌桶算法)</code>，默认使用<code>SmoothBursty</code>。</p><p>​    静态方法<code>RateLimiter.create()</code>默认使用子类<code>SmoothBursty</code>创建限流器</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// permitsPerSecond 创建时传入的单位时间内发放令牌数量</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RateLimiter</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">double</span> permitsPerSecond<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">create</span><span class="token punctuation">(</span>permitsPerSecond<span class="token punctuation">,</span> <span class="token class-name">SleepingStopwatch</span><span class="token punctuation">.</span><span class="token function">createFromSystemTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">// stopwatch guava实现的时间监视器 默认SleepingStopwatch.createFromSystemTimer()</span><span class="token keyword">static</span> <span class="token class-name">RateLimiter</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">double</span> permitsPerSecond<span class="token punctuation">,</span> <span class="token class-name">SleepingStopwatch</span> stopwatch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// maxBurstSeconds 最大缓存时间，默认1.0</span>    <span class="token class-name">RateLimiter</span> rateLimiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SmoothBursty</span><span class="token punctuation">(</span>stopwatch<span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token comment">/* maxBurstSeconds */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化时设置投放令牌的速率</span>    rateLimiter<span class="token punctuation">.</span><span class="token function">setRate</span><span class="token punctuation">(</span>permitsPerSecond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> rateLimiter<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>​    <code>setRate</code>底层调用<code>doSetRate</code>设置速率</p><p>​    <code>setRate</code>为设置投放令牌的速率，调用时对以下值进行更改：</p><ul><li><p>storedPermits 当前令牌数量，速率更改时会根据新旧速率的比例对原桶中令牌的数量进行更改。初始化时为0</p></li><li><p>stableIntervalMicros 每生产一个令牌需要的毫秒数</p></li><li><p>maxPermits 桶中最多可存储的令牌数量，可根据maxBurstSeconds * permitsPerSecond 计算</p></li><li><p>nextFreeTicketMicros 下一次可取令牌的时间，当前时间早于该时间表示可取元素，与之的差表示放入令牌且不取出令牌的时间，进而再跟据stableIntervalMicros可算出该时间段内桶中增加了多少令牌(受限于桶的大小)</p></li></ul><p>​    在初始化时或手动更改速率时调用。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// permitsPerSecond 创建时传入的单位时间内发放令牌数量</span><span class="token comment">// nowMicros 从创建到现在经过的时间</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">doSetRate</span><span class="token punctuation">(</span><span class="token keyword">double</span> permitsPerSecond<span class="token punctuation">,</span> <span class="token keyword">long</span> nowMicros<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">resync</span><span class="token punctuation">(</span>nowMicros<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> stableIntervalMicros <span class="token operator">=</span> <span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">toMicros</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span> <span class="token operator">/</span> permitsPerSecond<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stableIntervalMicros <span class="token operator">=</span> stableIntervalMicros<span class="token punctuation">;</span>    <span class="token function">doSetRate</span><span class="token punctuation">(</span>permitsPerSecond<span class="token punctuation">,</span> stableIntervalMicros<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">// stableIntervalMicros 每生产一个令牌，需要经过多少毫秒</span><span class="token keyword">void</span> <span class="token function">doSetRate</span><span class="token punctuation">(</span><span class="token keyword">double</span> permitsPerSecond<span class="token punctuation">,</span> <span class="token keyword">double</span> stableIntervalMicros<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">double</span> oldMaxPermits <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxPermits<span class="token punctuation">;</span>      maxPermits <span class="token operator">=</span> maxBurstSeconds <span class="token operator">*</span> permitsPerSecond<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>oldMaxPermits <span class="token operator">==</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token constant">POSITIVE_INFINITY</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// if we don't special-case this, we would get storedPermits == NaN, below</span>        storedPermits <span class="token operator">=</span> maxPermits<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        storedPermits <span class="token operator">=</span>            <span class="token punctuation">(</span>oldMaxPermits <span class="token operator">==</span> <span class="token number">0.0</span><span class="token punctuation">)</span>                <span class="token operator">?</span> <span class="token number">0.0</span> <span class="token comment">// initial state</span>                <span class="token operator">:</span> storedPermits <span class="token operator">*</span> maxPermits <span class="token operator">/</span> oldMaxPermits<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>​    速率更改或者从桶中取令牌时会调用<code>resync</code>方法</p><p>​    <code>resync(nowMicros)</code>将当前时间与<code>nextFreeTicketMicros</code>作比较，如当前时间在<code>nextFreeTicketMicros</code>之后，则重新计算桶中令牌的数量，并重置<code>nextFreeTicketMicros</code>的值。从这里可以看出Guava Limiter设计的绝妙之处，不需要单独开线程向桶中添加令牌，而是惰性的在取令牌时计算一下这时间内桶中添加了几个令牌，在根据桶中令牌数量进行限流。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">resync</span><span class="token punctuation">(</span><span class="token keyword">long</span> nowMicros<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// if nextFreeTicket is in the past, resync to now</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>nowMicros <span class="token operator">></span> nextFreeTicketMicros<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> newPermits <span class="token operator">=</span> <span class="token punctuation">(</span>nowMicros <span class="token operator">-</span> nextFreeTicketMicros<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">coolDownIntervalMicros</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 防止添加后的令牌数量超过桶的极限</span>    storedPermits <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>maxPermits<span class="token punctuation">,</span> storedPermits <span class="token operator">+</span> newPermits<span class="token punctuation">)</span><span class="token punctuation">;</span>    nextFreeTicketMicros <span class="token operator">=</span> nowMicros<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>​    取数据调用<code>acquire()</code>方法，桶中无令牌的话会阻塞</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 需等待的时间</span>  <span class="token keyword">long</span> microsToWait <span class="token operator">=</span> <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 线程挂起</span>  stopwatch<span class="token punctuation">.</span><span class="token function">sleepMicrosUninterruptibly</span><span class="token punctuation">(</span>microsToWait<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">1.0</span> <span class="token operator">*</span> microsToWait <span class="token operator">/</span> <span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">toMicros</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>​    <code>acquire()</code>最终会调用<code>reserveEarliestAvailable()</code></p><p>​    令牌桶限流器的一个优势是可以减缓突发情况带来的问题，允许单次请求的令牌数量超出剩余令牌数量，但是多拿的令牌数要从后边的补，正所谓“前人挖坑，后人填坑”。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token function">reserveEarliestAvailable</span><span class="token punctuation">(</span><span class="token keyword">int</span> requiredPermits<span class="token punctuation">,</span> <span class="token keyword">long</span> nowMicros<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 前文提到过，在取数据之前计算桶中令牌数量</span>    <span class="token function">resync</span><span class="token punctuation">(</span>nowMicros<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> returnValue <span class="token operator">=</span> nextFreeTicketMicros<span class="token punctuation">;</span>    <span class="token keyword">double</span> storedPermitsToSpend <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>requiredPermits<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storedPermits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 计算突发情况多取的令牌数量</span>    <span class="token keyword">double</span> freshPermits <span class="token operator">=</span> requiredPermits <span class="token operator">-</span> storedPermitsToSpend<span class="token punctuation">;</span>    <span class="token keyword">long</span> waitMicros <span class="token operator">=</span>        <span class="token function">storedPermitsToWaitTime</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>storedPermits<span class="token punctuation">,</span> storedPermitsToSpend<span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>freshPermits <span class="token operator">*</span> stableIntervalMicros<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 超发的情况，下一次可取令牌的时间往后延</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>nextFreeTicketMicros <span class="token operator">=</span> <span class="token class-name">LongMath</span><span class="token punctuation">.</span><span class="token function">saturatedAdd</span><span class="token punctuation">(</span>nextFreeTicketMicros<span class="token punctuation">,</span> waitMicros<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>storedPermits <span class="token operator">-=</span> storedPermitsToSpend<span class="token punctuation">;</span>    <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>limiter</tag>
      
      <tag>Guava</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql主从配置</title>
    <link href="/post/776d488.html"/>
    <url>/post/776d488.html</url>
    
    <content type="html"><![CDATA[<p>主从复制是指一台服务器充当主数据库服务器，另一台或多台服务器充当从数据库服务器，主服务器中的数据自动复制到从服务器之中。对于多级复制，数据库服务器即可充当主机，也可充当从机。MySQL主从复制的基础是主服务器对数据库修改记录二进制日志，从服务器通过主服务器的二进制日志自动执行更新。</p><span id="more"></span><h3 id="主库配置"><a href="#主库配置" class="headerlink" title="主库配置"></a>主库配置</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">$ cat .&#x2F;mysql-master&#x2F;etc&#x2F;my.cnf [mysqld]## 设置server_id，一般设置为IP，注意要唯一server_id&#x3D;1  ## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）binlog-ignore-db&#x3D;mysql  ## 开启二进制日志功能，可以随便取，最好有含义（关键就是这里了）log-bin&#x3D;replicas-mysql-bin  ## 为每个session分配的内存，在事务过程中用来存储二进制日志的缓存binlog_cache_size&#x3D;1M  ## 主从复制的格式（mixed,statement,row，默认格式是statement）binlog_format&#x3D;mixed  ## 二进制日志自动删除&#x2F;过期的天数。默认值为0，表示不自动删除。expire_logs_days&#x3D;7  ## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致slave_skip_errors&#x3D;1062# 忽略大小写lower_case_table_names&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>添加同步账户</p><p><code>grant replication slave on *.* to &#39;slave&#39;@&#39;%&#39; identified by &#39;slave@123456&#39;;</code></p><p>查看主库状态</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show master status;+---------------------------+----------+--------------+------------------+-------------------+| File                      | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |+---------------------------+----------+--------------+------------------+-------------------+| replicas-mysql-bin.000003 |  2841451 |              | mysql            |                   |+---------------------------+----------+--------------+------------------+-------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>File &amp;&amp; Position 需记住配置从库时使用</p></blockquote><h3 id="从库配置"><a href="#从库配置" class="headerlink" title="从库配置"></a>从库配置</h3><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">$ cat mysql-slave&#x2F;etc&#x2F;my.cnf [mysqld]## 设置server_id，一般设置为IP，注意要唯一server_id&#x3D;101  ## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）binlog-ignore-db&#x3D;mysql  ## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用log-bin&#x3D;replicas-mysql-slave1-bin  ## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存binlog_cache_size&#x3D;1M  ## 主从复制的格式（mixed,statement,row，默认格式是statement）binlog_format&#x3D;mixed  ## 二进制日志自动删除&#x2F;过期的天数。默认值为0，表示不自动删除。expire_logs_days&#x3D;7  ## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致slave_skip_errors&#x3D;1062  ## relay_log配置中继日志relay_log&#x3D;replicas-mysql-relay-bin  ## log_slave_updates表示slave将复制事件写进自己的二进制日志log_slave_updates&#x3D;1  ## 防止改变数据(除了特殊的线程)read_only&#x3D;1 lower_case_table_names&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>链接到主库</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">CHANGE MASTER TO    MASTER_HOST&#x3D;&#39;172.17.0.2&#39;,    MASTER_USER&#x3D;&#39;slave&#39;,    MASTER_PASSWORD&#x3D;&#39;slave@123456&#39;,    MASTER_LOG_FILE&#x3D;&#39;replicas-mysql-bin.000003&#39;,    MASTER_LOG_POS&#x3D;2841451;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>启动同步</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">mysql&gt; start slave;Query OK, 0 rows affected, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>查询同步状态</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show slave status \G;*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: 172.17.0.2                  Master_User: slave                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: replicas-mysql-bin.000003          Read_Master_Log_Pos: 2854957               Relay_Log_File: replicas-mysql-relay-bin.000002                Relay_Log_Pos: 2854848        Relay_Master_Log_File: replicas-mysql-bin.000003             Slave_IO_Running: Yes            Slave_SQL_Running: Yes              Replicate_Do_DB:           Replicate_Ignore_DB:            Replicate_Do_Table:        Replicate_Ignore_Table:       Replicate_Wild_Do_Table:   Replicate_Wild_Ignore_Table:                    Last_Errno: 0                   Last_Error:                  Skip_Counter: 0          Exec_Master_Log_Pos: 2854957              Relay_Log_Space: 2855064              Until_Condition: None               Until_Log_File:                 Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:            Master_SSL_CA_Path:               Master_SSL_Cert:             Master_SSL_Cipher:                Master_SSL_Key:         Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No                Last_IO_Errno: 0                Last_IO_Error:                Last_SQL_Errno: 0               Last_SQL_Error:   Replicate_Ignore_Server_Ids:              Master_Server_Id: 1                  Master_UUID: 306755a5-d46e-11e9-9f46-0242ac110002             Master_Info_File: &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;master.info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates           Master_Retry_Count: 86400                  Master_Bind:       Last_IO_Error_Timestamp:      Last_SQL_Error_Timestamp:                Master_SSL_Crl:            Master_SSL_Crlpath:            Retrieved_Gtid_Set:             Executed_Gtid_Set:                 Auto_Position: 0         Replicate_Rewrite_DB:                  Channel_Name:            Master_TLS_Version: 1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://juejin.im/post/6844903921677238285">Mysql主从复制原理及搭建</a></p>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mqsql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Mycat实现读写分离</title>
    <link href="/post/6ea54e66.html"/>
    <url>/post/6ea54e66.html</url>
    
    <content type="html"><![CDATA[<p>Mycat是常用的数据库代理层中间件，本文通过Mycat实现读写分离，应用程序先访问Mycat服务，Mycat根据SQL语句进行分发，读操作并且无事务走从库，写操作走主库。</p><span id="more"></span><h3 id="Mycat服务配置"><a href="#Mycat服务配置" class="headerlink" title="Mycat服务配置"></a>Mycat服务配置</h3><p>$ cat mycat/conf/server.xml</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;!-- - - Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); - you may not use this file except in compliance with the License. - You may obtain a copy of the License at - - http:&#x2F;&#x2F;www.apache.org&#x2F;licenses&#x2F;LICENSE-2.0 - - Unless required by applicable law or agreed to in writing, software - distributed under the License is distributed on an &quot;AS IS&quot; BASIS, - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. - See the License for the specific language governing permissions and - limitations under the License. --&gt;&lt;!DOCTYPE mycat:server SYSTEM &quot;server.dtd&quot;&gt;&lt;mycat:server xmlns:mycat&#x3D;&quot;http:&#x2F;&#x2F;io.mycat&#x2F;&quot;&gt;&lt;system&gt;&lt;!-- 这里配置的都是一些系统属性，可以自己查看mycat文档 --&gt;&lt;property name&#x3D;&quot;defaultSqlParser&quot;&gt;druidparser&lt;&#x2F;property&gt;&lt;property name&#x3D;&quot;charset&quot;&gt;utf8mb4&lt;&#x2F;property&gt;&lt;&#x2F;system&gt;&lt;user name&#x3D;&quot;root&quot; defaultAccount&#x3D;&quot;true&quot;&gt;&lt;property name&#x3D;&quot;password&quot;&gt;123456&lt;&#x2F;property&gt;&lt;property name&#x3D;&quot;schemas&quot;&gt;prod&lt;&#x2F;property&gt;&lt;&#x2F;user&gt;&lt;&#x2F;mycat:server&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p><code>schemas</code>表示<code>schema.xml</code>中的<code>schema</code>节点，多个库用逗号分隔</p></blockquote><h3 id="表配置"><a href="#表配置" class="headerlink" title="表配置"></a>表配置</h3><p>$ cat mycat/conf/schema.xml </p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;&lt;mycat:schema xmlns:mycat&#x3D;&quot;http:&#x2F;&#x2F;io.mycat&#x2F;&quot;&gt;&lt;schema name&#x3D;&quot;prod&quot; checkSQLschema&#x3D;&quot;false&quot; sqlMaxLimit&#x3D;&quot;100&quot; dataNode&#x3D;&quot;pcxNode&quot;&gt;&lt;&#x2F;schema&gt;&lt;dataNode name&#x3D;&quot;pcxNode&quot; dataHost&#x3D;&quot;dtHost&quot; database&#x3D;&quot;test&quot; &#x2F;&gt;&lt;dataHost name&#x3D;&quot;dtHost&quot; maxCon&#x3D;&quot;1000&quot; minCon&#x3D;&quot;10&quot; balance&#x3D;&quot;3&quot;  writeType&#x3D;&quot;0&quot; dbType&#x3D;&quot;mysql&quot; dbDriver&#x3D;&quot;native&quot; switchType&#x3D;&quot;1&quot;  slaveThreshold&#x3D;&quot;100&quot;&gt;&lt;heartbeat&gt;select user()&lt;&#x2F;heartbeat&gt;&lt;!-- can have multi write hosts --&gt;&lt;writeHost host&#x3D;&quot;hostM1&quot; url&#x3D;&quot;localhost:3308&quot; user&#x3D;&quot;root&quot;   password&#x3D;&quot;123456&quot;&gt;&lt;!-- can have multi read hosts --&gt;&lt;readHost host&#x3D;&quot;hostS1&quot; url&#x3D;&quot;localhost:3307&quot; user&#x3D;&quot;root&quot; password&#x3D;&quot;123456&quot; &#x2F;&gt;&lt;&#x2F;writeHost&gt;&lt;&#x2F;dataHost&gt;&lt;&#x2F;mycat:schema&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>增加数据库时要添加<code>dataNode</code>及<code>schema</code></p></blockquote><h3 id="Mycat-启动"><a href="#Mycat-启动" class="headerlink" title="Mycat 启动"></a>Mycat 启动</h3><p><code>./mycat start</code></p>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mqsql</tag>
      
      <tag>Mycat</tag>
      
      <tag>读写分离</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis进阶</title>
    <link href="/post/3a12d43e.html"/>
    <url>/post/3a12d43e.html</url>
    
    <content type="html"><![CDATA[<p>日常开发中Redis是常用的缓存工具，Redis其实不仅仅能做缓存，Redis支持string(字符串)、list(列表)、hash(字典)、set(集合) 和zset(有序集合)这五种数据结构，本文介绍更多Redis的使用场景。</p><span id="more"></span><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p><code>SET key value [EX seconds] [PX milliseconds] [NX|XX]</code></p><p>将字符串值 value 关联到 key 。</p><p>如果 key 已经持有其他值， SET 就覆写旧值，无视类型。</p><p>对于某个原本带有生存时间（TTL）的键来说， 当 SET 命令成功在这个键上执行时， 这个键原有的 TTL 将被清除。</p><p>可选参数</p><p>从 Redis 2.6.12 版本开始， SET 命令的行为可以通过一系列参数来修改：</p><p>EX second ：设置键的过期时间为 second 秒。<br>PX millisecond ：设置键的过期时间为 millisecond 毫秒。<br>NX ：只在键不存在时，才对键进行设置操作。 SET key value NX 效果等同于 SETNX key value 。<br>XX ：只在键已经存在时，才对键进行设置操作。</p><blockquote><p>因为 SET 命令可以通过参数来实现和 SETNX 、 SETEX 和 PSETEX 三个命令的效果，所以将来的 Redis 版本可能会废弃并最终移除 SETNX 、 SETEX 和 PSETEX 这三个命令。</p></blockquote><p>使用RedisTemplate加锁</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">,</span> <span class="token class-name">String</span> lockValue<span class="token punctuation">,</span> <span class="token keyword">int</span> expire<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 加锁</span>    <span class="token class-name">String</span> lock <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> connection <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">JedisCommands</span> commands <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">JedisCommands</span><span class="token punctuation">)</span> connection<span class="token punctuation">.</span><span class="token function">getNativeConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> commands<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> lockValue<span class="token punctuation">,</span> <span class="token string">"NX"</span><span class="token punctuation">,</span> <span class="token string">"EX"</span><span class="token punctuation">,</span> expire<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">LOCK_RESULT</span><span class="token punctuation">,</span> lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>使用RedisTemplate解锁</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 解锁</span>    stringRedisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>锁不具备拥有者标识，即任何客户端都可以解锁。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">if</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">)</span><span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">,</span><span class="token class-name">String</span> requestId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keys <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 采用lua脚本方式保证在多线程环境下也是原子操作</span>    <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> script <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    script<span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    script<span class="token punctuation">.</span><span class="token function">setScriptText</span><span class="token punctuation">(</span>luaScriptText<span class="token punctuation">)</span><span class="token punctuation">;</span>    stringRedisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>script<span class="token punctuation">,</span>keys<span class="token punctuation">,</span>requestId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><h4 id="可使用list实现一个简单的消息队列"><a href="#可使用list实现一个简单的消息队列" class="headerlink" title="可使用list实现一个简单的消息队列"></a>可使用list实现一个简单的消息队列</h4><p><code>RPUSH key value [value ...]</code></p><p>将一个或多个值 value 插入到列表 key 的表尾(最右边)。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">redis_conn<span class="token punctuation">.</span>lpush<span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><code>LRANGE key start stop</code></p><p>返回列表 key 中指定区间内的元素，区间以偏移量 start 和 stop 指定。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">redis_conn<span class="token punctuation">.</span>lrange<span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><code>BLPOP key [key ...] timeout</code></p><p>BLPOP 是列表的阻塞式(blocking)弹出原语。</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment"># 阻塞</span>    data <span class="token operator">=</span> redis_conn<span class="token punctuation">.</span>blpop<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h3><h4 id="有序集合实现排行榜功能"><a href="#有序集合实现排行榜功能" class="headerlink" title="有序集合实现排行榜功能"></a>有序集合实现排行榜功能</h4><p><code>ZINCRBY key increment member</code></p><p>为有序集 key 的成员 member 的 score 值加上增量 increment 。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BoundZSetOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> operations <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">boundZSetOps</span><span class="token punctuation">(</span><span class="token constant">INVITE_ACTIVITY_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>operations<span class="token punctuation">.</span><span class="token function">incrementScore</span><span class="token punctuation">(</span>userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p><code>ZREVRANGE key start stop [WITHSCORES]</code></p><p>返回有序集 key 中，指定区间内的成员。<br><strong>bscore相同时会按照member字典顺序排序</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 取前十名</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ZSetOperations<span class="token punctuation">.</span>TypedTuple</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> typedTuples <span class="token operator">=</span> operations<span class="token punctuation">.</span><span class="token function">reverseRangeWithScores</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历取用户Id和积分</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ZSetOperations<span class="token punctuation">.</span>TypedTuple</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> typedTuple <span class="token operator">:</span> typedTuples<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Integer</span> inviterId <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>typedTuple<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 邀请用户数量</span>    <span class="token class-name">Integer</span> inviteCount <span class="token operator">=</span> typedTuple<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>ZSCORE key member</code></p><p>返回有序集 key 中，成员 member 的 score 值。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Double</span> score <span class="token operator">=</span> operations<span class="token punctuation">.</span><span class="token function">score</span><span class="token punctuation">(</span>userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="发布-订阅"><a href="#发布-订阅" class="headerlink" title="发布/订阅"></a>发布/订阅</h3><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p><code>MULTI</code></p><p>标记一个事务块的开始。</p><p>事务块内的多条命令会按照先后顺序被放进一个队列当中，最后由 <code>EXEC</code> 命令原子性(atomic)地执行。</p><p><code>EXEC</code></p><p>执行所有事务块内的命令。</p><p><code>WATCH key [key ...]</code></p><p>监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</p><p>减库存操作</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 监视一个key</span>pipe<span class="token punctuation">.</span>watch<span class="token punctuation">(</span><span class="token string">'stock_count'</span><span class="token punctuation">)</span>count <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>pipe<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'stock_count'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 有库存</span><span class="token keyword">if</span> count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>     <span class="token comment"># 事务开始</span>    pipe<span class="token punctuation">.</span>multi<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># pipe.decr('stock_count')</span>    pipe<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'stock_count'</span><span class="token punctuation">,</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># 事务结束(可能会抛异常)</span>    pipe<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
